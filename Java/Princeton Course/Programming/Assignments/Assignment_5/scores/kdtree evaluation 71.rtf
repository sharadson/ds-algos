{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf600
{\fonttbl\f0\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red98\green98\blue98;\red255\green255\blue255;}
{\*\expandedcolortbl;;\cssrgb\c45882\c45882\c45882;\cssrgb\c100000\c100000\c100000;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
See the Assessment Guide for information on how to interpret this report.\
\
ASSESSMENT SUMMARY\
\
Compilation:  PASSED\
API:          PASSED\
\
Spotbugs:     PASSED\
PMD:          FAILED (1 warning)\
Checkstyle:   FAILED (0 errors, 3 warnings)\
\
Correctness:  19/35 tests passed\
Memory:       16/16 tests passed\
Timing:       38/42 tests passed\
\
Aggregate score: 70.67%\
[Compilation: 5%, API: 5%, Spotbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]\
\
ASSESSMENT DETAILS\
\
The following files were submitted:\
----------------------------------\
6.9K Jan  7 11:52 KdTree.java\
2.8K Jan  7 11:52 PointSET.java\
\
\
********************************************************************************\
*  COMPILING                                                                    \
********************************************************************************\
\
\
% javac PointSET.java\
*-----------------------------------------------------------\
\
% javac KdTree.java\
*-----------------------------------------------------------\
\
\
================================================================\
\
\
Checking the APIs of your programs.\
*-----------------------------------------------------------\
PointSET:\
\
KdTree:\
\
================================================================\
\
\
********************************************************************************\
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       \
********************************************************************************\
\
\
% spotbugs *.class\
*-----------------------------------------------------------\
\
\
================================================================\
\
\
% pmd .\
*-----------------------------------------------------------\
PointSET.java:8: The private instance (or static) variable 'points' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]\
PMD ends with 1 warning.\
\
\
================================================================\
\
\
% checkstyle *.java\
*-----------------------------------------------------------\
[WARN] KdTree.java:69:27: ',' is not followed by whitespace. [WhitespaceAfter]\
[WARN] KdTree.java:69:29: ',' is not followed by whitespace. [WhitespaceAfter]\
[WARN] KdTree.java:69:31: ',' is not followed by whitespace. [WhitespaceAfter]\
Checkstyle ends with 0 errors and 3 warnings.\
\
% custom checkstyle checks for PointSET.java\
*-----------------------------------------------------------\
\
% custom checkstyle checks for KdTree.java\
*-----------------------------------------------------------\
\
\
================================================================\
\
\
********************************************************************************\
*  TESTING CORRECTNESS\
********************************************************************************\
\
Testing correctness of PointSET\
*-----------------------------------------------------------\
Running 8 total tests.\
\
A point in an m-by-m grid means that it is of the form (i/m, j/m),\
where i and j are integers between 0 and m\
\
Test 1: insert n random points; check size() and isEmpty() after each insertion\
        (size may be less than n because of duplicates)\
  * 5 random points in a 1-by-1 grid\
  * 50 random points in a 8-by-8 grid\
  * 100 random points in a 16-by-16 grid\
  * 1000 random points in a 128-by-128 grid\
  * 5000 random points in a 1024-by-1024 grid\
  * 50000 random points in a 65536-by-65536 grid\
==> passed\
\
Test 2: insert n random points; check contains() with random query points\
  * 1 random points in a 1-by-1 grid\
  * 10 random points in a 4-by-4 grid\
  * 20 random points in a 8-by-8 grid\
  * 10000 random points in a 128-by-128 grid\
  * 100000 random points in a 1024-by-1024 grid\
  * 100000 random points in a 65536-by-65536 grid\
==> passed\
\
Test 3: insert random points; check nearest() with random query points\
  * 10 random points in a 4-by-4 grid\
  * 15 random points in a 8-by-8 grid\
  * 20 random points in a 16-by-16 grid\
  * 100 random points in a 32-by-32 grid\
  * 10000 random points in a 65536-by-65536 grid\
==> passed\
\
Test 4: insert random points; check range() with random query rectangles\
  * 2 random points and random rectangles in a 2-by-2 grid\
    - failed on trial 1 of 2\
    - query rectangle = [0.0, 0.25] x [0.25, 0.75]\
    - sequence of points inserted: \
      A  0.5 0.5\
      B  0.0 0.5\
    - student   range():  empty\
    - reference range():  (0.0, 0.5) \
\
  * 10 random points and random rectangles in a 4-by-4 grid\
  * 20 random points and random rectangles in a 8-by-8 grid\
  * 100 random points and random rectangles in a 16-by-16 grid\
  * 1000 random points and random rectangles in a 64-by-64 grid\
  * 10000 random points and random rectangles in a 128-by-128 grid\
==> FAILED\
\
Test 5: call methods before inserting any points\
 * size() and isEmpty()\
 * contains()\
 * nearest()\
 * range()\
==> passed\
\
Test 6: call methods with null argument\
  * insert()\
  * contains()\
  * range()\
  * nearest()\
==> passed\
\
Test 7: check intermixed sequence of calls to insert(), isEmpty(),\
        size(), contains(), range(), and nearest() with\
        probabilities (p1, p2, p3, p4, p5, p6, p7), respectively\
  * 10000 calls with random points in a 1-by-1 grid\
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)\
    - failed on trial 5 of 10000\
    - rectangle = [0.0, 1.0] x [0.0, 1.0]\
    - student   range():  empty\
    - reference range():  (1.0, 0.0) (0.0, 1.0) \
    - sequence of operations was:\
           set.insert((1.0, 0.0))\
           set.insert((0.0, 1.0))\
           set.isEmpty()  ==>  false\
           set.range([1.0, 1.0] x [0.0, 1.0])  ==>  (1.0, 0.0) \
           set.range([0.0, 1.0] x [0.0, 1.0])  ==>  empty\
\
  * 10000 calls with random points in a 16-by-16 grid\
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)\
    - failed on trial 75 of 10000\
    - rectangle = [0.0625, 0.8125] x [0.25, 0.8125]\
    - student   range():  (0.4375, 0.125) (0.0625, 0.3125) (0.25, 0.3125) (0.25, 0.375) (0.5, 0.5) (0.5625, 0.5625) (0.0625, 0.625) (0.25, 0.625) (0.375, 0.625) (0.25, 0.6875) (0.5, 0.6875) (0.625, 0.8125) \
    - reference range():  (0.0625, 0.3125) (0.25, 0.3125) (0.25, 0.375) (0.5, 0.5) (0.5625, 0.5625) (0.0625, 0.625) (0.25, 0.625) (0.375, 0.625) (0.25, 0.6875) (0.5, 0.6875) (0.625, 0.8125) \
\
  * 10000 calls with random points in a 128-by-128 grid\
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)\
    - failed on trial 19 of 10000\
    - rectangle = [0.0546875, 0.53125] x [0.1796875, 0.1875]\
    - student   range():  (0.109375, 0.1015625) \
    - reference range():  empty\
    - sequence of operations was:\
           set.size()     ==>  0\
           set.insert((0.5703125, 0.3359375))\
           set.insert((0.84375, 0.3984375))\
           set.size()     ==>  2\
           set.nearest((0.203125, 0.6796875))   ==>  (0.5703125, 0.3359375)\
           set.insert((0.578125, 0.078125))\
           set.isEmpty()  ==>  false\
           set.isEmpty()  ==>  false\
           set.insert((0.109375, 0.1015625))\
           set.insert((0.6875, 0.71875))\
           set.insert((0.7578125, 0.390625))\
           set.size()     ==>  6\
           set.isEmpty()  ==>  false\
           set.isEmpty()  ==>  false\
           set.insert((0.2578125, 0.3984375))\
           set.insert((0.1796875, 0.375))\
           set.range([0.53125, 0.6171875] x [0.296875, 0.7421875])  ==>  (0.5703125, 0.3359375) \
           set.contains((0.4375, 0.9609375))  ==>  false\
           set.range([0.0546875, 0.53125] x [0.1796875, 0.1875])  ==>  (0.109375, 0.1015625) \
\
  * 10000 calls with random points in a 1024-by-1024 grid\
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)\
    - failed on trial 23 of 10000\
    - rectangle = [0.369140625, 0.845703125] x [0.357421875, 0.578125]\
    - student   range():  (0.6044921875, 0.0947265625) (0.51171875, 0.4482421875) \
    - reference range():  (0.51171875, 0.4482421875) \
    - sequence of operations was:\
           set.insert((0.6044921875, 0.0947265625))\
           set.contains((0.9228515625, 0.52734375))  ==>  false\
           set.isEmpty()  ==>  false\
           set.range([0.0576171875, 0.064453125] x [0.1181640625, 0.736328125])  ==>  empty\
           set.isEmpty()  ==>  false\
           set.insert((0.1435546875, 0.806640625))\
           set.insert((0.51171875, 0.4482421875))\
           set.contains((0.9560546875, 0.94921875))  ==>  false\
           set.range([0.736328125, 0.8740234375] x [0.1357421875, 0.501953125])  ==>  empty\
           set.insert((0.541015625, 0.9716796875))\
           set.contains((0.2705078125, 0.794921875))  ==>  false\
           set.nearest((0.2041015625, 0.4423828125))   ==>  (0.51171875, 0.4482421875)\
           set.contains((0.0166015625, 0.126953125))  ==>  false\
           set.nearest((0.20703125, 0.8408203125))   ==>  (0.1435546875, 0.806640625)\
           set.contains((0.431640625, 0.5029296875))  ==>  false\
           set.insert((0.8369140625, 0.9599609375))\
           set.nearest((0.080078125, 0.2392578125))   ==>  (0.51171875, 0.4482421875)\
           set.nearest((0.8564453125, 0.15234375))   ==>  (0.6044921875, 0.0947265625)\
           set.nearest((0.32421875, 0.3779296875))   ==>  (0.51171875, 0.4482421875)\
           set.range([0.3486328125, 0.4013671875] x [0.1455078125, 0.298828125])  ==>  empty\
           set.insert((0.6845703125, 0.833984375))\
           set.nearest((0.103515625, 0.556640625))   ==>  (0.1435546875, 0.806640625)\
           set.range([0.369140625, 0.845703125] x [0.357421875, 0.578125])  ==>  (0.6044921875, 0.0947265625) (0.51171875, 0.4482421875) \
\
  * 10000 calls with random points in a 8192-by-8192 grid\
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)\
    - failed on trial 9 of 10000\
    - rectangle = [0.2734375, 0.42333984375] x [0.225341796875, 0.954833984375]\
    - student   range():  empty\
    - reference range():  (0.4188232421875, 0.2491455078125) \
    - sequence of operations was:\
           set.isEmpty()  ==>  true\
           set.insert((0.6766357421875, 0.3582763671875))\
           set.isEmpty()  ==>  false\
           set.insert((0.4188232421875, 0.2491455078125))\
           set.range([0.52197265625, 0.5355224609375] x [0.18212890625, 0.4595947265625])  ==>  empty\
           set.isEmpty()  ==>  false\
           set.size()     ==>  2\
           set.nearest((0.0079345703125, 0.1910400390625))   ==>  (0.4188232421875, 0.2491455078125)\
           set.range([0.2734375, 0.42333984375] x [0.225341796875, 0.954833984375])  ==>  empty\
\
  * 10000 calls with random points in a 65536-by-65536 grid\
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)\
    - failed on trial 17 of 10000\
    - rectangle = [0.677154541015625, 0.8698883056640625] x [0.270538330078125, 0.407623291015625]\
    - student   range():  (0.8600616455078125, 0.0047454833984375) \
    - reference range():  empty\
    - sequence of operations was:\
           set.insert((0.8896636962890625, 0.5267333984375))\
           set.isEmpty()  ==>  false\
           set.insert((0.2592010498046875, 0.431732177734375))\
           set.size()     ==>  2\
           set.insert((0.001861572265625, 0.35565185546875))\
           set.range([0.28961181640625, 0.6809234619140625] x [0.10833740234375, 0.786041259765625])  ==>  empty\
           set.insert((0.23150634765625, 0.522674560546875))\
           set.insert((0.483612060546875, 0.601104736328125))\
           set.range([0.3911285400390625, 0.7732086181640625] x [0.4652099609375, 0.9119873046875])  ==>  (0.483612060546875, 0.601104736328125) \
           set.contains((0.9571533203125, 0.482635498046875))  ==>  false\
           set.size()     ==>  5\
           set.isEmpty()  ==>  false\
           set.size()     ==>  5\
           set.insert((0.8600616455078125, 0.0047454833984375))\
           set.range([0.1951141357421875, 0.493438720703125] x [0.054473876953125, 0.489959716796875])  ==>  (0.2592010498046875, 0.431732177734375) \
           set.insert((0.9034576416015625, 0.767578125))\
           set.range([0.677154541015625, 0.8698883056640625] x [0.270538330078125, 0.407623291015625])  ==>  (0.8600616455078125, 0.0047454833984375) \
\
==> FAILED\
\
Test 8: check that two PointSET objects can be created at the same time\
==> passed\
\
\
Total: 6/8 tests passed!\
\
\
================================================================\
Testing correctness of KdTree\
*-----------------------------------------------------------\
Running 27 total tests.\
\
In the tests below, we consider three classes of points and rectangles.\
\
  * Non-degenerate points: no two points (or rectangles) share either an\
                           x-coordinate or a y-coordinate\
\
  * Distinct points:       no two points (or rectangles) share both an\
                           x-coordinate and a y-coordinate\
\
  * General points:        no restrictions on the x-coordinates or y-coordinates\
                           of the points (or rectangles)\
\
A point in an m-by-m grid means that it is of the form (i/m, j/m),\
where i and j are integers between 0 and m (inclusive).\
\
Test 1a: insert points from file; check size() and isEmpty() after each insertion\
  * input0.txt\
  * input1.txt\
  * input5.txt\
  * input10.txt\
==> passed\
\
Test 1b: insert non-degenerate points; check size() and isEmpty() after each insertion\
  * 1 random non-degenerate points in a 1-by-1 grid\
  * 5 random non-degenerate points in a 8-by-8 grid\
  * 10 random non-degenerate points in a 16-by-16 grid\
  * 50 random non-degenerate points in a 128-by-128 grid\
  * 500 random non-degenerate points in a 1024-by-1024 grid\
  * 50000 random non-degenerate points in a 65536-by-65536 grid\
==> passed\
\
Test 1c: insert distinct points; check size() and isEmpty() after each insertion\
  * 1 random distinct points in a 1-by-1 grid\
  * 10 random distinct points in a 8-by-8 grid\
  * 20 random distinct points in a 16-by-16 grid\
  * 10000 random distinct points in a 128-by-128 grid\
  * 100000 random distinct points in a 1024-by-1024 grid\
  * 100000 random distinct points in a 65536-by-65536 grid\
==> passed\
\
Test 1d: insert general points; check size() and isEmpty() after each insertion\
  * 5 random general points in a 1-by-1 grid\
  * 10 random general points in a 4-by-4 grid\
  * 50 random general points in a 8-by-8 grid\
  * 100000 random general points in a 16-by-16 grid\
  * 100000 random general points in a 128-by-128 grid\
  * 100000 random general points in a 1024-by-1024 grid\
==> passed\
\
Test 2a: insert points from file; check contains() with random query points\
  * input0.txt\
  * input1.txt\
  * input5.txt\
  * input10.txt\
==> passed\
\
Test 2b: insert non-degenerate points; check contains() with random query points\
  * 1 random non-degenerate points in a 1-by-1 grid\
  * 5 random non-degenerate points in a 8-by-8 grid\
  * 10 random non-degenerate points in a 16-by-16 grid\
  * 20 random non-degenerate points in a 32-by-32 grid\
  * 500 random non-degenerate points in a 1024-by-1024 grid\
  * 10000 random non-degenerate points in a 65536-by-65536 grid\
==> passed\
\
Test 2c: insert distinct points; check contains() with random query points\
  * 1 random distinct points in a 1-by-1 grid\
  * 10 random distinct points in a 4-by-4 grid\
  * 20 random distinct points in a 8-by-8 grid\
  * 10000 random distinct points in a 128-by-128 grid\
  * 100000 random distinct points in a 1024-by-1024 grid\
  * 100000 random distinct points in a 65536-by-65536 grid\
==> passed\
\
Test 2d: insert general points; check contains() with random query points\
  * 10000 random general points in a 1-by-1 grid\
  * 10000 random general points in a 16-by-16 grid\
  * 10000 random general points in a 128-by-128 grid\
  * 10000 random general points in a 1024-by-1024 grid\
==> passed\
\
Test 3a: insert points from file; check range() with random query rectangles\
  * input0.txt\
  * input1.txt\
  * input5.txt\
  * input10.txt\
==> passed\
\
Test 3b: insert non-degenerate points; check range() with random query rectangles\
  * 1 random non-degenerate points and random rectangles in a 2-by-2 grid\
  * 5 random non-degenerate points and random rectangles in a 8-by-8 grid\
  * 10 random non-degenerate points and random rectangles in a 16-by-16 grid\
  * 20 random non-degenerate points and random rectangles in a 32-by-32 grid\
  * 500 random non-degenerate points and random rectangles in a 1024-by-1024 grid\
    - failed on trial 1 of 10000\
    - query rectangle = [0.2080078125, 0.84375] x [0.0234375, 0.693359375]\
    - student   range():  A B P M B D Y Z G G H K E W R U U K V X N T R O G K ...\
    - reference range():  A B P M B D Y Z G G H K E W R U U K V X N T R O G K ...\
\
  * 10000 random non-degenerate points and random rectangles in a 65536-by-65536 grid\
    - failed on trial 1 of 10000\
    - query rectangle = [0.3751373291015625, 0.8885040283203125] x [0.4285888671875, 0.55133056640625]\
    - student   range():  C U P Y Y I X X T S C E Q V O B R S D Q A J N M T M ...\
    - reference range():  C U P Y Y I X X T S C E Q V O B R S P R D Q A J K K ...\
\
==> FAILED\
\
Test 3c: insert distinct points; check range() with random query rectangles\
  * 2 random distinct points and random rectangles in a 2-by-2 grid\
  * 10 random distinct points and random rectangles in a 4-by-4 grid\
  * 20 random distinct points and random rectangles in a 8-by-8 grid\
  * 100 random distinct points and random rectangles in a 16-by-16 grid\
    - failed on trial 1 of 10000\
    - query rectangle = [0.4375, 0.875] x [0.3125, 0.75]\
    - student   range():  A D N D G O G V W E M K L R D H W \
    - reference range():  A D N D G O G V W E D M K L R O B D H W S \
\
  * 1000 random distinct points and random rectangles in a 64-by-64 grid\
    - failed on trial 1 of 10000\
    - query rectangle = [0.125, 0.8125] x [0.140625, 0.796875]\
    - student   range():  A C Z X U I E C T L F B D S G Q X L L C V E X Z J X ...\
    - reference range():  A C Z X F Z V M G L N L U M I E C T L F B D S G Q X ...\
\
  * 10000 random distinct points and random rectangles in a 128-by-128 grid\
    - failed on trial 1 of 10000\
    - query rectangle = [0.8125, 0.8671875] x [0.03125, 0.078125]\
    - student   range():  X G Z A Z E Z N U H H O Q L J N G Z G B \
    - reference range():  X G Z A Z E Z N U H H O Q L J N G Z G B S F T Q O H ...\
\
==> FAILED\
\
Test 3d: insert general points; check range() with random query rectangles\
  * 5000 random general points and random rectangles in a 2-by-2 grid\
  * 5000 random general points and random rectangles in a 16-by-16 grid\
    - failed on trial 1 of 10000\
    - query rectangle = [0.0625, 0.625] x [0.0625, 0.375]\
    - student   range():  D Z D M Q H G N H V U L N N D P G T K W C Y G M Q S ...\
    - reference range():  D Z D M Q H G N H V U L N N E H L C D P G T K W C Y ...\
\
  * 5000 random general points and random rectangles in a 128-by-128 grid\
    - failed on trial 1 of 10000\
    - query rectangle = [0.4453125, 0.65625] x [0.4140625, 0.53125]\
    - student   range():  D X O D M Q I V V M F E N N O B G S R F L T I N R \
    - reference range():  D X O D J Z Y M Q I V V M F Y N L M W X U J K B L I ...\
\
  * 5000 random general points and random rectangles in a 1024-by-1024 grid\
    - failed on trial 1 of 10000\
    - query rectangle = [0.2001953125, 0.43359375] x [0.1494140625, 0.46875]\
    - student   range():  E O B Y Q L G M Q Q T S X Q C F R O K R Y L Z E Q M ...\
    - reference range():  E O B Y Q L G M Q S Q T S X Q C F R O K R Y L Z E Q ...\
\
==> FAILED\
\
Test 3e: insert random points; check range() with tiny rectangles\
         enclosing each point\
  * 5 tiny rectangles and 5 general points in a 2-by-2 grid\
  * 10 tiny rectangles and 10 general points in a 4-by-4 grid\
  * 20 tiny rectangles and 20 general points in a 8-by-8 grid\
  * 5000 tiny rectangles and 5000 general points in a 128-by-128 grid\
  * 5000 tiny rectangles and 5000 general points in a 1024-by-1024 grid\
  * 5000 tiny rectangles and 5000 general points in a 65536-by-65536 grid\
==> passed\
\
Test 4a: insert points from file; check range() with random query rectangles\
         and check traversal of kd-tree\
  * input5.txt\
  * input10.txt\
    - student range() returns correct set of points\
    - student   range():  D G J \
    - reference range():  D G J \
    - performs incorrect traversal of kd-tree during call to range()\
    - query rectangle = [0.0, 0.97] x [0.15, 0.4]\
    - sequence of points inserted: \
      A  0.372 0.497\
      B  0.564 0.413\
      C  0.226 0.577\
      D  0.144 0.179\
      E  0.083 0.51\
      F  0.32 0.708\
      G  0.417 0.362\
      H  0.862 0.825\
      I  0.785 0.725\
      J  0.499 0.208\
    - student kd-tree nodes involved in calls to Point2D methods:\
      A C D E B G J H I \
    - reference kd-tree nodes involved in calls to Point2D methods:\
      A C D E B G J \
    - failed on trial 16 of 1000\
\
==> FAILED\
\
Test 4b: insert non-degenerate points; check range() with random query rectangles\
         and check traversal of kd-tree\
  * 3 random non-degenerate points and 1000 random rectangles in a 4-by-4 grid\
  * 6 random non-degenerate points and 1000 random rectangles in a 8-by-8 grid\
  * 10 random non-degenerate points and 1000 random rectangles in a 16-by-16 grid\
    - student range() returns correct set of points\
    - student   range():  empty\
    - reference range():  empty\
    - performs incorrect traversal of kd-tree during call to range()\
    - query rectangle = [0.875, 0.9375] x [0.3125, 0.625]\
    - sequence of points inserted: \
      A  0.0 0.75\
      B  1.0 1.0\
      C  0.25 0.125\
      D  0.3125 0.375\
      E  0.8125 0.8125\
      F  0.4375 0.25\
      G  0.125 0.9375\
      H  0.625 0.6875\
      I  0.1875 0.1875\
      J  0.5 0.5625\
    - student kd-tree nodes involved in calls to Point2D methods:\
      A B C D F E H \
    - reference kd-tree nodes involved in calls to Point2D methods:\
      A B C D F E \
    - failed on trial 7 of 1000\
\
  * 20 random non-degenerate points and 1000 random rectangles in a 32-by-32 grid\
    - student range() returns correct set of points\
    - student   range():  empty\
    - reference range():  empty\
    - performs incorrect traversal of kd-tree during call to range()\
    - query rectangle = [0.375, 0.84375] x [0.84375, 0.90625]\
    - sequence of points inserted: \
      A  0.21875 0.8125\
      B  0.5625 0.03125\
      C  0.15625 0.09375\
      D  0.625 0.25\
      E  0.71875 0.96875\
      F  0.0 0.28125\
      G  0.9375 0.6875\
      H  0.1875 0.78125\
      I  0.6875 0.59375\
      J  0.53125 0.9375\
      K  0.5 0.0625\
      L  0.75 0.21875\
      M  0.34375 0.75\
      N  0.28125 0.34375\
      O  0.40625 0.71875\
      P  0.78125 0.46875\
      Q  0.25 0.1875\
      R  0.3125 1.0\
      S  0.0625 0.3125\
      T  0.875 0.15625\
    - student kd-tree nodes involved in calls to Point2D methods:\
      A B D J K M E G \
    - reference kd-tree nodes involved in calls to Point2D methods:\
      A B D J K M E G I \
    - failed on trial 3 of 1000\
\
  * 30 random non-degenerate points and 1000 random rectangles in a 64-by-64 grid\
    - student range() returns wrong set of points\
    - student   range():  F L \
    - reference range():  F L B \
    - performs incorrect traversal of kd-tree during call to range()\
    - query rectangle = [0.09375, 0.9375] x [0.71875, 0.875]\
    - number of entries in student   solution: 20\
    - number of entries in reference solution: 19\
    - 5 extra entries in student solution, including:\
      '(0.890625, 0.328125)'\
\
    - 4 missing entries in student solution, including:\
      '(0.828125, 0.9375)'\
\
    - failed on trial 3 of 1000\
\
==> FAILED\
\
Test 5a: insert points from file; check nearest() with random query points\
  * input0.txt\
  * input1.txt\
  * input5.txt\
    java.lang.NullPointerException\
\
    edu.princeton.cs.algs4.Point2D.distanceSquaredTo(Point2D.java:193)\
    KdTree.getDistanceToNode2Rect(KdTree.java:237)\
    KdTree.nearestTraverse(KdTree.java:200)\
    KdTree.nearestNode(KdTree.java:177)\
    KdTree.nearestTraverse(KdTree.java:195)\
     ...\
    KdTree.nearest(KdTree.java:165)\
    TestKdTree.checkNearest(TestKdTree.java:316)\
    TestKdTree.checkNearest(TestKdTree.java:282)\
    TestKdTree.test5a(TestKdTree.java:1767)\
    TestKdTree.main(TestKdTree.java:1980)\
\
  * input10.txt\
    java.lang.NullPointerException\
\
    edu.princeton.cs.algs4.Point2D.distanceSquaredTo(Point2D.java:193)\
    KdTree.getDistanceToNode2Rect(KdTree.java:237)\
    KdTree.nearestTraverse(KdTree.java:200)\
    KdTree.nearestNode(KdTree.java:177)\
    KdTree.nearestTraverse(KdTree.java:195)\
     ...\
    KdTree.nearest(KdTree.java:165)\
    TestKdTree.checkNearest(TestKdTree.java:316)\
    TestKdTree.checkNearest(TestKdTree.java:282)\
    TestKdTree.test5a(TestKdTree.java:1768)\
    TestKdTree.main(TestKdTree.java:1980)\
\
==> FAILED\
\
Test 5b: insert non-degenerate points; check nearest() with random query points\
  * 5 random non-degenerate points in a 8-by-8 grid\
  * 10 random non-degenerate points in a 16-by-16 grid\
  * 20 random non-degenerate points in a 32-by-32 grid\
  * 30 random non-degenerate points in a 64-by-64 grid\
  * 10000 random non-degenerate points in a 65536-by-65536 grid\
==> passed\
\
Test 5c: insert distinct points; check nearest() with random query points\
  * 10 random distinct points in a 4-by-4 grid\
    java.lang.NullPointerException\
\
    edu.princeton.cs.algs4.Point2D.distanceSquaredTo(Point2D.java:193)\
    KdTree.getDistanceToNode2Rect(KdTree.java:237)\
    KdTree.nearestTraverse(KdTree.java:200)\
    KdTree.nearestNode(KdTree.java:173)\
    KdTree.nearestTraverse(KdTree.java:195)\
     ...\
    KdTree.nearest(KdTree.java:165)\
    TestKdTree.checkNearest(TestKdTree.java:316)\
    TestKdTree.checkNearest(TestKdTree.java:276)\
    TestKdTree.test5c(TestKdTree.java:1789)\
    TestKdTree.main(TestKdTree.java:1986)\
\
  * 15 random distinct points in a 8-by-8 grid\
    java.lang.NullPointerException\
\
    edu.princeton.cs.algs4.Point2D.distanceSquaredTo(Point2D.java:193)\
    KdTree.getDistanceToNode2Rect(KdTree.java:237)\
    KdTree.nearestTraverse(KdTree.java:200)\
    KdTree.nearestNode(KdTree.java:177)\
    KdTree.nearestTraverse(KdTree.java:195)\
     ...\
    KdTree.nearest(KdTree.java:165)\
    TestKdTree.checkNearest(TestKdTree.java:316)\
    TestKdTree.checkNearest(TestKdTree.java:276)\
    TestKdTree.test5c(TestKdTree.java:1790)\
    TestKdTree.main(TestKdTree.java:1986)\
\
  * 20 random distinct points in a 16-by-16 grid\
    java.lang.NullPointerException\
\
    edu.princeton.cs.algs4.Point2D.distanceSquaredTo(Point2D.java:193)\
    KdTree.getDistanceToNode2Rect(KdTree.java:237)\
    KdTree.nearestTraverse(KdTree.java:200)\
    KdTree.nearestNode(KdTree.java:173)\
    KdTree.nearestTraverse(KdTree.java:195)\
     ...\
    KdTree.nearest(KdTree.java:165)\
    TestKdTree.checkNearest(TestKdTree.java:316)\
    TestKdTree.checkNearest(TestKdTree.java:276)\
    TestKdTree.test5c(TestKdTree.java:1791)\
    TestKdTree.main(TestKdTree.java:1986)\
\
  * 100 random distinct points in a 32-by-32 grid\
    java.lang.NullPointerException\
\
    edu.princeton.cs.algs4.Point2D.distanceSquaredTo(Point2D.java:193)\
    KdTree.getDistanceToNode2Rect(KdTree.java:237)\
    KdTree.nearestTraverse(KdTree.java:200)\
    KdTree.nearestNode(KdTree.java:177)\
    KdTree.nearestTraverse(KdTree.java:195)\
     ...\
    KdTree.nearest(KdTree.java:165)\
    TestKdTree.checkNearest(TestKdTree.java:316)\
    TestKdTree.checkNearest(TestKdTree.java:276)\
    TestKdTree.test5c(TestKdTree.java:1792)\
    TestKdTree.main(TestKdTree.java:1986)\
\
  * 10000 random distinct points in a 65536-by-65536 grid\
    java.lang.NullPointerException\
\
    edu.princeton.cs.algs4.Point2D.distanceSquaredTo(Point2D.java:193)\
    KdTree.getDistanceToNode2Rect(KdTree.java:237)\
    KdTree.nearestTraverse(KdTree.java:200)\
    KdTree.nearestNode(KdTree.java:177)\
    KdTree.nearestTraverse(KdTree.java:195)\
     ...\
    KdTree.nearest(KdTree.java:165)\
    TestKdTree.checkNearest(TestKdTree.java:316)\
    TestKdTree.checkNearest(TestKdTree.java:276)\
    TestKdTree.test5c(TestKdTree.java:1793)\
    TestKdTree.main(TestKdTree.java:1986)\
\
==> FAILED\
\
Test 5d: insert general points; check nearest() with random query points\
  * 10000 random general points in a 16-by-16 grid\
    java.lang.NullPointerException\
\
    edu.princeton.cs.algs4.Point2D.distanceSquaredTo(Point2D.java:193)\
    KdTree.getDistanceToNode2Rect(KdTree.java:237)\
    KdTree.nearestTraverse(KdTree.java:200)\
    KdTree.nearestNode(KdTree.java:177)\
    KdTree.nearestTraverse(KdTree.java:195)\
     ...\
    KdTree.nearest(KdTree.java:165)\
    TestKdTree.checkNearest(TestKdTree.java:316)\
    TestKdTree.checkNearest(TestKdTree.java:276)\
    TestKdTree.test5d(TestKdTree.java:1801)\
    TestKdTree.main(TestKdTree.java:1989)\
\
  * 10000 random general points in a 128-by-128 grid\
    java.lang.NullPointerException\
\
    edu.princeton.cs.algs4.Point2D.distanceSquaredTo(Point2D.java:193)\
    KdTree.getDistanceToNode2Rect(KdTree.java:237)\
    KdTree.nearestTraverse(KdTree.java:200)\
    KdTree.nearestNode(KdTree.java:173)\
    KdTree.nearestTraverse(KdTree.java:195)\
     ...\
    KdTree.nearest(KdTree.java:165)\
    TestKdTree.checkNearest(TestKdTree.java:316)\
    TestKdTree.checkNearest(TestKdTree.java:276)\
    TestKdTree.test5d(TestKdTree.java:1802)\
    TestKdTree.main(TestKdTree.java:1989)\
\
  * 10000 random general points in a 1024-by-1024 grid\
    java.lang.NullPointerException\
\
    edu.princeton.cs.algs4.Point2D.distanceSquaredTo(Point2D.java:193)\
    KdTree.getDistanceToNode2Rect(KdTree.java:237)\
    KdTree.nearestTraverse(KdTree.java:200)\
    KdTree.nearestNode(KdTree.java:173)\
    KdTree.nearestTraverse(KdTree.java:195)\
     ...\
    KdTree.nearest(KdTree.java:165)\
    TestKdTree.checkNearest(TestKdTree.java:316)\
    TestKdTree.checkNearest(TestKdTree.java:276)\
    TestKdTree.test5d(TestKdTree.java:1803)\
    TestKdTree.main(TestKdTree.java:1989)\
\
==> FAILED\
\
Test 6a: insert points from file; check nearest() with random query points\
         and check traversal of kd-tree\
  * input5.txt\
    - student   nearest() = (0.4, 0.7)\
    - reference nearest() = (0.4, 0.7)\
    - performs incorrect traversal of kd-tree during call to nearest()\
    - query point = (0.12, 0.91)\
    - sequence of points inserted: \
      A  0.7 0.2\
      B  0.5 0.4\
      C  0.2 0.3\
      D  0.4 0.7\
      E  0.9 0.6\
    - student sequence of kd-tree nodes involved in calls to Point2D methods:\
      A B D (0.12, 0.4) (0.7, 0.91) \
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:\
      A B D \
    - failed on trial 1 of 1000\
\
  * input10.txt\
    - student   nearest() = (0.32, 0.708)\
    - reference nearest() = (0.32, 0.708)\
    - performs incorrect traversal of kd-tree during call to nearest()\
    - query point = (0.37, 0.86)\
    - sequence of points inserted: \
      A  0.372 0.497\
      B  0.564 0.413\
      C  0.226 0.577\
      D  0.144 0.179\
      E  0.083 0.51\
      F  0.32 0.708\
      G  0.417 0.362\
      H  0.862 0.825\
      I  0.785 0.725\
      J  0.499 0.208\
    - student sequence of kd-tree nodes involved in calls to Point2D methods:\
      A C F (0.37, 0.577) (0.372, 0.86) B H I (0.37, 0.413) \
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:\
      A C F B H I \
    - failed on trial 1 of 1000\
\
==> FAILED\
\
Test 6b: insert non-degenerate points; check nearest() with random query points\
         and check traversal of kd-tree\
  * 5 random non-degenerate points in a 8-by-8 grid\
    - student   nearest() = (0.25, 0.375)\
    - reference nearest() = (0.25, 0.375)\
    - performs incorrect traversal of kd-tree during call to nearest()\
    - query point = (0.375, 1.0)\
    - sequence of points inserted: \
      A  0.125 0.0\
      B  1.0 0.75\
      C  0.25 0.375\
      D  0.875 0.5\
      E  0.0 0.25\
    - student sequence of kd-tree nodes involved in calls to Point2D methods:\
      A B (0.375, 0.75) C D (0.125, 1.0) E \
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:\
      A B C D E \
    - failed on trial 1 of 1000\
\
  * 10 random non-degenerate points in a 16-by-16 grid\
    - student   nearest() = (0.875, 0.0625)\
    - reference nearest() = (0.875, 0.0625)\
    - performs incorrect traversal of kd-tree during call to nearest()\
    - query point = (1.0, 0.25)\
    - sequence of points inserted: \
      A  0.0 0.4375\
      B  0.375 0.9375\
      C  0.4375 0.625\
      D  0.5625 0.125\
      E  0.75 1.0\
      F  0.625 0.8125\
      G  0.125 0.3125\
      H  0.875 0.0625\
      I  0.6875 0.375\
      J  0.1875 0.1875\
    - student sequence of kd-tree nodes involved in calls to Point2D methods:\
      A B C D F I (1.0, 0.125) H (0.4375, 0.25) (1.0, 0.9375) \
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:\
      A B C D F I H \
    - failed on trial 1 of 1000\
\
  * 20 random non-degenerate points in a 32-by-32 grid\
    - student   nearest() = (0.3125, 0.28125)\
    - reference nearest() = (0.3125, 0.28125)\
    - performs incorrect traversal of kd-tree during call to nearest()\
    - query point = (0.21875, 0.21875)\
    - sequence of points inserted: \
      A  0.15625 0.6875\
      B  0.46875 0.4375\
      C  0.59375 0.65625\
      D  0.5625 0.90625\
      E  0.75 0.78125\
      F  0.90625 0.0\
      G  0.09375 0.5\
      H  0.96875 0.1875\
      I  0.40625 0.0625\
      J  0.25 0.46875\
      K  0.1875 0.84375\
      L  0.625 0.875\
      M  0.8125 0.03125\
      N  0.78125 0.96875\
      O  0.3125 0.28125\
      P  0.84375 0.375\
      Q  0.5 0.125\
      R  0.0 0.40625\
      S  0.03125 0.59375\
      T  0.125 0.15625\
    - student sequence of kd-tree nodes involved in calls to Point2D methods:\
      A B F I O (0.3125, 0.21875) P Q (0.21875, 0.0625) (0.90625, 0.21875) (0.21875, 0.4375) (0.15625, 0.21875) G R T (0.21875, 0.5) \
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:\
      A B F I O P Q G R T \
    - failed on trial 1 of 1000\
\
  * 30 random non-degenerate points in a 64-by-64 grid\
    - student   nearest() = (0.765625, 0.78125)\
    - reference nearest() = (0.765625, 0.78125)\
    - performs incorrect traversal of kd-tree during call to nearest()\
    - number of student   entries = 18\
    - number of reference entries = 7\
    - entry 5 of the two sequences are not equal\
    - student   entry 5 = (0.734375, 0.53125)\
    - reference entry 5 = (0.765625, 0.78125)\
    - failed on trial 1 of 1000\
\
  * 50 random non-degenerate points in a 128-by-128 grid\
    - student   nearest() = (0.3125, 0.671875)\
    - reference nearest() = (0.3125, 0.671875)\
    - performs incorrect traversal of kd-tree during call to nearest()\
    - number of student   entries = 20\
    - number of reference entries = 12\
    - entry 7 of the two sequences are not equal\
    - student   entry 7 = (0.1796875, 0.640625)\
    - reference entry 7 = (0.1484375, 0.2421875)\
    - failed on trial 1 of 1000\
\
  * 1000 random non-degenerate points in a 2048-by-2048 grid\
    - student   nearest() = (0.826171875, 0.69970703125)\
    - reference nearest() = (0.826171875, 0.69970703125)\
    - performs incorrect traversal of kd-tree during call to nearest()\
    - number of student   entries = 16\
    - number of reference entries = 10\
    - failed on trial 1 of 1000\
\
==> FAILED\
\
Test 7: check with no points\
  * size() and isEmpty()\
  * contains()\
  * nearest()\
  * range()\
==> passed\
\
Test 8: check that the specified exception is thrown with null arguments\
  * argument to insert() is null\
  * argument to contains() is null\
  * argument to range() is null\
  * argument to nearest() is null\
==> passed\
\
Test 9a: check intermixed sequence of calls to insert(), isEmpty(),\
         size(), contains(), range(), and nearest() with probabilities\
         (p1, p2, p3, p4, p5, p6), respectively\
  * 20000 calls with non-degenerate points in a 1-by-1 grid\
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)\
  * 20000 calls with non-degenerate points in a 16-by-16 grid\
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)\
  * 20000 calls with non-degenerate points in a 128-by-128 grid\
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)\
    - failed on trial 97 of 20000\
    - rectangle = [0.3359375, 0.9609375] x [0.1796875, 0.4453125]\
    - student   range():  A Y P W V I \
    - reference range():  A Y P W V I L \
\
  * 20000 calls with non-degenerate points in a 1024-by-1024 grid\
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)\
    - failed on trial 50 of 20000\
    - rectangle = [0.2421875, 0.8720703125] x [0.3095703125, 0.673828125]\
    - student   range():  O W K \
    - reference range():  O W T K O \
\
  * 20000 calls with non-degenerate points in a 8192-by-8192 grid\
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)\
    - failed on trial 81 of 20000\
    - rectangle = [0.3533935546875, 0.945068359375] x [0.1810302734375, 0.3548583984375]\
    - student   range():  V \
    - reference range():  V J A \
\
  * 20000 calls with non-degenerate points in a 65536-by-65536 grid\
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)\
    - failed on trial 26 of 20000\
    - rectangle = [0.3475494384765625, 0.78680419921875] x [0.0634918212890625, 0.5288848876953125]\
    - student   range():  I V \
    - reference range():  I V O \
    - sequence of operations was:\
           st.isEmpty()  ==>  true\
           st.insert(0.206573486328125, 0.5277557373046875)\
           st.range([0.2391204833984375, 0.2533416748046875] x [0.198211669921875, 0.7015533447265625])  ==>  empty\
           st.insert(0.400146484375, 0.3318328857421875)\
           st.size()  ==>  2\
           st.insert(0.3575897216796875, 0.578277587890625)\
           st.isEmpty()  ==>  false\
           st.nearest((0.2956695556640625, 0.2630157470703125))   ==>  (0.400146484375, 0.3318328857421875)\
           st.range([0.3032684326171875, 0.528350830078125] x [0.3619384765625, 0.379913330078125])  ==>  empty\
           st.insert(0.5358734130859375, 0.9207916259765625)\
           st.insert(0.512786865234375, 0.4456329345703125)\
           st.contains((0.6367340087890625, 0.9554443359375))  ==>  false\
           st.contains((0.52166748046875, 0.5250244140625))  ==>  false\
           st.nearest((0.2936859130859375, 0.873748779296875))   ==>  (0.5358734130859375, 0.9207916259765625)\
           st.size()  ==>  5\
           st.insert(0.17120361328125, 0.364654541015625)\
           st.range([0.226348876953125, 0.8613433837890625] x [0.4901580810546875, 0.8998260498046875])  ==>  W \
           st.insert(0.1098175048828125, 0.0738983154296875)\
           st.nearest((0.5688323974609375, 0.061920166015625))   ==>  (0.400146484375, 0.3318328857421875)\
           st.size()  ==>  7\
           st.contains((0.1428375244140625, 0.2953643798828125))  ==>  false\
           st.range([0.23870849609375, 0.3316192626953125] x [0.003570556640625, 0.7955169677734375])  ==>  empty\
           st.insert(0.4113922119140625, 0.1066131591796875)\
           st.insert(0.1590576171875, 0.4232330322265625)\
           st.insert(0.6116180419921875, 0.801300048828125)\
           st.range([0.3475494384765625, 0.78680419921875] x [0.0634918212890625, 0.5288848876953125])  ==>  I V \
\
==> FAILED\
\
Test 9b: check intermixed sequence of calls to insert(), isEmpty(),\
         size(), contains(), range(), and nearest() with probabilities\
         (p1, p2, p3, p4, p5, p6), respectively\
  * 20000 calls with distinct points in a 1-by-1 grid\
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)\
  * 20000 calls with distinct points in a 16-by-16 grid\
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)\
    - failed on trial 28 of 20000\
    - rectangle = [0.0625, 0.625] x [0.5, 0.625]\
    - student   range():  W \
    - reference range():  W V X \
\
  * 20000 calls with distinct points in a 128-by-128 grid\
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)\
    java.lang.NullPointerException\
\
    edu.princeton.cs.algs4.Point2D.distanceSquaredTo(Point2D.java:193)\
    KdTree.getDistanceToNode2Rect(KdTree.java:237)\
    KdTree.nearestTraverse(KdTree.java:200)\
    KdTree.nearestNode(KdTree.java:173)\
    KdTree.nearestTraverse(KdTree.java:195)\
     ...\
    KdTree.nearestNode(KdTree.java:173)\
    KdTree.nearest(KdTree.java:165)\
    TestKdTree.checkAll(TestKdTree.java:965)\
    TestKdTree.test9b(TestKdTree.java:1874)\
    TestKdTree.main(TestKdTree.java:2007)\
\
\
  * 20000 calls with distinct points in a 1024-by-1024 grid\
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)\
    - failed on trial 95 of 20000\
    - rectangle = [0.1552734375, 0.7802734375] x [0.51953125, 0.9990234375]\
    - student   range():  V D D J E E N \
    - reference range():  V D D M V J J E E N \
\
  * 20000 calls with distinct points in a 8192-by-8192 grid\
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)\
    - failed on trial 56 of 20000\
    - rectangle = [0.1278076171875, 0.2857666015625] x [0.030029296875, 0.9136962890625]\
    - student   range():  U R \
    - reference range():  U R R \
\
  * 20000 calls with distinct points in a 65536-by-65536 grid\
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)\
    - failed on trial 153 of 20000\
    - rectangle = [0.09967041015625, 0.630279541015625] x [0.326934814453125, 0.8508453369140625]\
    - student   range():  C F W Y J U F K K \
    - reference range():  C F W Y J R J U F K K O X \
\
==> FAILED\
\
Test 9c: check intermixed sequence of calls to insert(), isEmpty(),\
         size(), contains(), range(), and nearest() with probabilities\
         (p1, p2, p3, p4, p5, p6), respectively\
  * 20000 calls with general points in a 1-by-1 grid\
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)\
    java.lang.NullPointerException\
\
    edu.princeton.cs.algs4.Point2D.distanceSquaredTo(Point2D.java:193)\
    KdTree.getDistanceToNode2Rect(KdTree.java:237)\
    KdTree.nearestTraverse(KdTree.java:200)\
    KdTree.nearestNode(KdTree.java:177)\
    KdTree.nearestTraverse(KdTree.java:195)\
     ...\
    KdTree.nearestNode(KdTree.java:173)\
    KdTree.nearest(KdTree.java:165)\
    TestKdTree.checkAll(TestKdTree.java:965)\
    TestKdTree.test9c(TestKdTree.java:1886)\
    TestKdTree.main(TestKdTree.java:2010)\
\
    - sequence of operations was:\
           st.isEmpty()  ==>  true\
           st.insert(1.0, 0.0)\
           st.range([0.0, 1.0] x [1.0, 1.0])  ==>  empty\
           st.contains((1.0, 1.0))  ==>  false\
           st.contains((1.0, 1.0))  ==>  false\
           st.range([0.0, 0.0] x [1.0, 1.0])  ==>  empty\
           st.insert(0.0, 0.0)\
           st.insert(1.0, 0.0)\
           st.contains((1.0, 0.0))  ==>  true\
           st.insert(1.0, 0.0)\
           st.range([0.0, 1.0] x [0.0, 1.0])  ==>  E R \
           st.insert(1.0, 0.0)\
           st.contains((0.0, 1.0))  ==>  false\
           st.range([0.0, 1.0] x [0.0, 1.0])  ==>  H R \
           st.insert(0.0, 0.0)\
           st.isEmpty()  ==>  false\
           st.size()  ==>  2\
           st.insert(0.0, 0.0)\
           st.insert(0.0, 1.0)\
           st.isEmpty()  ==>  false\
           st.nearest((0.0, 0.0))\
\
  * 20000 calls with general points in a 16-by-16 grid\
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)\
    java.lang.NullPointerException\
\
    edu.princeton.cs.algs4.Point2D.distanceSquaredTo(Point2D.java:193)\
    KdTree.getDistanceToNode2Rect(KdTree.java:237)\
    KdTree.nearestTraverse(KdTree.java:200)\
    KdTree.nearestNode(KdTree.java:177)\
    KdTree.nearestTraverse(KdTree.java:195)\
     ...\
    KdTree.nearestNode(KdTree.java:173)\
    KdTree.nearest(KdTree.java:165)\
    TestKdTree.checkAll(TestKdTree.java:965)\
    TestKdTree.test9c(TestKdTree.java:1887)\
    TestKdTree.main(TestKdTree.java:2010)\
\
\
  * 20000 calls with general points in a 128-by-128 grid\
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)\
    - failed on trial 124 of 20000\
    - rectangle = [0.296875, 0.3984375] x [0.140625, 0.9375]\
    - student   range():  D K R B \
    - reference range():  D K R B X \
\
  * 20000 calls with general points in a 1024-by-1024 grid\
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)\
    - failed on trial 121 of 20000\
    - rectangle = [0.0283203125, 0.19921875] x [0.728515625, 0.984375]\
    - student   range():  empty\
    - reference range():  E \
\
  * 20000 calls with general points in a 8192-by-8192 grid\
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)\
    - failed on trial 157 of 20000\
    - rectangle = [0.6500244140625, 0.7967529296875] x [0.3544921875, 0.98681640625]\
    - student   range():  E I P H H E H \
    - reference range():  E I P H H E H N \
\
  * 20000 calls with general points in a 65536-by-65536 grid\
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)\
    - failed on trial 80 of 20000\
    - rectangle = [0.1548614501953125, 0.9013214111328125] x [0.2900238037109375, 0.5825347900390625]\
    - student   range():  X N \
    - reference range():  X N N N \
\
==> FAILED\
\
Test 10: insert n random points into two different KdTree objects;\
        check that repeated calls to size(), contains(), range(),\
        and nearest() with the same arguments yield same results\
  * 10 random general points in a 4-by-4 grid\
    java.lang.NullPointerException\
\
    edu.princeton.cs.algs4.Point2D.distanceSquaredTo(Point2D.java:193)\
    KdTree.getDistanceToNode2Rect(KdTree.java:237)\
    KdTree.nearestTraverse(KdTree.java:200)\
    KdTree.nearestNode(KdTree.java:173)\
    KdTree.nearest(KdTree.java:165)\
    TestKdTree.checkImmutabilityTwoKdTreeObjects(TestKdTree.java:1345)\
    TestKdTree.test10(TestKdTree.java:1902)\
    TestKdTree.main(TestKdTree.java:2013)\
\
    - sequence of operations was:\
           KdTree st1 = new KdTree();\
           st1.insert((0.25, 0.5))\
           st1.insert((0.0, 0.0))\
           st1.insert((0.25, 0.25))\
           st1.insert((1.0, 0.5))\
           st2.insert((0.75, 0.5))\
           st2.insert((0.75, 0.5))\
           st2.insert((1.0, 0.5))\
           st2.insert((0.25, 0.0))\
           st2.insert((0.25, 0.25))\
           st2.insert((0.75, 1.0))\
           st2.size()  ==>  5\
           st2.range([0.25, 0.5] x [0.25, 0.75])  ==>  I \
           st1.nearest((0.75, 1.0))  ==>  (1.0, 0.5)\
           st1.nearest((1.0, 0.5))  ==>  (1.0, 0.5)\
           st1.contains((0.25, 0.25))  ==>  true\
           st2.contains((1.0, 0.5))  ==>  true\
           st2.range([0.0, 0.5] x [0.75, 1.0])  ==>  empty\
           st1.contains((1.0, 0.5))  ==>  true\
           st2.contains((1.0, 0.5))  ==>  true\
           st1.size()  ==>  4\
           st1.size()  ==>  4\
           st1.nearest((0.25, 0.5))\
  * 20 random general points in a 8-by-8 grid\
    java.lang.NullPointerException\
\
    edu.princeton.cs.algs4.Point2D.distanceSquaredTo(Point2D.java:193)\
    KdTree.getDistanceToNode2Rect(KdTree.java:237)\
    KdTree.nearestTraverse(KdTree.java:200)\
    KdTree.nearestNode(KdTree.java:177)\
    KdTree.nearestTraverse(KdTree.java:195)\
     ...\
    KdTree.nearestNode(KdTree.java:173)\
    KdTree.nearest(KdTree.java:165)\
    TestKdTree.checkImmutabilityTwoKdTreeObjects(TestKdTree.java:1365)\
    TestKdTree.test10(TestKdTree.java:1903)\
    TestKdTree.main(TestKdTree.java:2013)\
\
    - sequence of operations was:\
           KdTree st1 = new KdTree();\
           st1.insert((0.625, 0.75))\
           st1.insert((0.375, 0.5))\
           st1.insert((0.5, 0.5))\
           st1.insert((0.75, 0.25))\
           st1.insert((0.75, 0.0))\
           st2.insert((1.0, 0.375))\
           st2.insert((0.625, 0.25))\
           st2.insert((0.5, 0.625))\
           st2.insert((0.25, 0.25))\
           st2.insert((0.75, 0.5))\
           st2.insert((0.0, 1.0))\
           st2.insert((0.5, 0.875))\
           st2.insert((0.625, 0.0))\
           st2.insert((0.0, 0.625))\
           st2.insert((0.125, 0.25))\
           st2.insert((0.75, 0.875))\
           st2.insert((0.125, 1.0))\
           st2.insert((0.25, 0.875))\
           st2.insert((0.5, 0.75))\
           st2.insert((0.75, 0.875))\
           st1.range([0.625, 0.875] x [0.125, 0.875])  ==>  A D \
           st2.nearest((0.25, 0.25))\
  * 100 random general points in a 128-by-128 grid\
    java.lang.NullPointerException\
\
    edu.princeton.cs.algs4.Point2D.distanceSquaredTo(Point2D.java:193)\
    KdTree.getDistanceToNode2Rect(KdTree.java:237)\
    KdTree.nearestTraverse(KdTree.java:200)\
    KdTree.nearestNode(KdTree.java:177)\
    KdTree.nearestTraverse(KdTree.java:195)\
     ...\
    KdTree.nearestNode(KdTree.java:173)\
    KdTree.nearest(KdTree.java:165)\
    TestKdTree.checkImmutabilityTwoKdTreeObjects(TestKdTree.java:1345)\
    TestKdTree.test10(TestKdTree.java:1904)\
    TestKdTree.main(TestKdTree.java:2013)\
\
  * 1000 random general points in a 65536-by-65536 grid\
    java.lang.NullPointerException\
\
    edu.princeton.cs.algs4.Point2D.distanceSquaredTo(Point2D.java:193)\
    KdTree.getDistanceToNode2Rect(KdTree.java:237)\
    KdTree.nearestTraverse(KdTree.java:200)\
    KdTree.nearestNode(KdTree.java:173)\
    KdTree.nearestTraverse(KdTree.java:195)\
     ...\
    KdTree.nearestNode(KdTree.java:173)\
    KdTree.nearest(KdTree.java:165)\
    TestKdTree.checkImmutabilityTwoKdTreeObjects(TestKdTree.java:1345)\
    TestKdTree.test10(TestKdTree.java:1905)\
    TestKdTree.main(TestKdTree.java:2013)\
\
==> FAILED\
\
\
Total: 13/27 tests passed!\
\
\
================================================================\
********************************************************************************\
*  MEMORY\
********************************************************************************\
\
Analyzing memory of Point2D\
*-----------------------------------------------------------\
Memory of Point2D object = 32 bytes\
================================================================\
\
\
\
Analyzing memory of RectHV\
*-----------------------------------------------------------\
Memory of RectHV object = 48 bytes\
================================================================\
\
\
\
Analyzing memory of PointSET\
*-----------------------------------------------------------\
Running 8 total tests.\
\
Memory usage of a PointSET with n points (including Point2D and RectHV objects).\
Maximum allowed memory is 96n + 200 bytes.\
\
                 n       student (bytes)    reference (bytes)\
--------------------------------------------------------------\
=> passed        1          240                264\
=> passed        2          336                360\
=> passed        5          624                648\
=> passed       10         1104               1128\
=> passed       25         2544               2568\
=> passed      100         9744               9768\
=> passed      400        38544              38568\
=> passed      800        76944              76968\
==> 8/8 tests passed\
\
Total: 8/8 tests passed!\
\
Estimated student   memory (bytes) = 96.00 n + 144.00  (R^2 = 1.000)\
Estimated reference memory (bytes) = 96.00 n + 168.00  (R^2 = 1.000)\
================================================================\
\
\
\
Analyzing memory of KdTree\
*-----------------------------------------------------------\
Running 8 total tests.\
\
Memory usage of a KdTree with n points (including Point2D and RectHV objects).\
Maximum allowed memory is 312n + 192 bytes.\
\
                 n       student (bytes)    reference (bytes)\
--------------------------------------------------------------\
=> passed        1          160                160\
=> passed        2          288                288\
=> passed        5          672                672\
=> passed       10         1312               1312\
=> passed       25         3232               3232\
=> passed      100        12832              12832\
=> passed      400        51232              51232\
=> passed      800       102432             102432\
==> 8/8 tests passed\
\
Total: 8/8 tests passed!\
\
Estimated student   memory (bytes) = 128.00 n + 32.00  (R^2 = 1.000)\
Estimated reference memory (bytes) = 128.00 n + 32.00  (R^2 = 1.000)\
================================================================\
\
\
\
********************************************************************************\
*  TIMING\
********************************************************************************\
\
Timing PointSET\
*-----------------------------------------------------------\
Running 14 total tests.\
\
\
Inserting n points into a PointSET\
\
               n      ops per second\
----------------------------------------\
=> passed   160000    1455453         \
=> passed   320000    1498747         \
=> passed   640000    1178399         \
=> passed  1280000    1021684         \
==> 4/4 tests passed\
\
Performing contains() queries after inserting n points into a PointSET\
\
               n      ops per second\
----------------------------------------\
=> passed   160000     364460         \
=> passed   320000     327487         \
=> passed   640000     289213         \
=> passed  1280000     332234         \
==> 4/4 tests passed\
\
Performing range() queries after inserting n points into a PointSET\
\
               n      ops per second\
----------------------------------------\
=> passed    10000     129598         \
=> passed    20000     102219         \
=> passed    40000      67686         \
==> 3/3 tests passed\
\
Performing nearest() queries after inserting n points into a PointSET\
\
               n      ops per second\
----------------------------------------\
=> passed    10000       4409         \
=> passed    20000       2161         \
=> passed    40000        856         \
==> 3/3 tests passed\
\
Total: 14/14 tests passed!\
\
\
================================================================\
\
\
\
Timing KdTree\
*-----------------------------------------------------------\
Running 28 total tests.\
\
\
Test 1a-d: Insert n points into a 2d tree. The table gives the average number of calls\
           to methods in RectHV and Point per call to insert().\
\
                                                                                                Point2D\
               n      ops per second       RectHV()           x()               y()             equals()\
----------------------------------------------------------------------------------------------------------------\
=> passed   160000     677015               1.0              44.8              42.8              21.6         \
=> passed   320000     767411               1.0              45.6              43.6              22.0         \
=> passed   640000     557843               1.0              48.6              46.6              23.5         \
=> passed  1280000     482906               1.0              52.8              50.8              25.6         \
==> 4/4 tests passed\
\
\
Test 2a-h: Perform contains() queries after inserting n points into a 2d tree. The table gives\
           the average number of calls to methods in RectHV and Point per call to contains().\
\
                                                                               Point2D\
               n      ops per second       x()               y()               equals()\
-----------------------------------------------------------------------------------------------\
=> passed    10000     387474              18.5              17.5              18.0         \
=> passed    20000     393979              19.7              18.7              19.2         \
=> passed    40000     375238              21.8              20.8              21.3         \
=> passed    80000     354892              22.0              21.0              21.5         \
=> passed   160000     315850              23.2              22.2              22.7         \
=> passed   320000     261555              25.0              24.0              24.5         \
=> passed   640000     221893              25.7              24.7              25.2         \
=> passed  1280000     200859              27.2              26.2              26.7         \
==> 8/8 tests passed\
\
\
Test 3a-h: Perform range() queries after inserting n points into a 2d tree. The table gives\
           the average number of calls to methods in RectHV and Point per call to range().\
\
               n      ops per second       intersects()      contains()        x()               y()\
---------------------------------------------------------------------------------------------------------------\
=> passed    10000     234415               0.0               0.0              26.6              21.0         \
=> passed    20000     243653               0.0               0.0              28.2              23.4         \
=> passed    40000     208034               0.0               0.0              32.2              25.4         \
=> passed    80000     171149               0.0               0.0              33.5              26.5         \
=> passed   160000     143281               0.0               0.0              35.6              29.6         \
=> passed   320000     129679               0.0               0.0              32.7              26.7         \
=> passed   640000     122034               0.0               0.0              35.7              29.6         \
=> passed  1280000      97857               0.0               0.0              37.6              29.2         \
==> 8/8 tests passed\
\
\
Test 4a-h: Perform nearest() queries after inserting n points into a 2d tree. The table gives\
           the average number of calls to methods in RectHV and Point per call to nearest().\
\
                                         Point2D                 RectHV\
               n      ops per second     distanceSquaredTo()     distanceSquaredTo()        x()               y()\
------------------------------------------------------------------------------------------------------------------------\
=> passed    10000   104910                 201.5                    0.0                   169.2             169.6         \
=> passed    20000    80818                 301.9                    0.0                   253.2             253.5         \
=> passed    40000    89462                 410.7                    0.0                   343.9             344.5         \
=> passed    80000    50555                 621.0                    0.0                   519.8             518.8         \
=> FAILED   160000    38618                 820.2   (1.4x)           0.0                   685.3             685.9         \
=> FAILED   320000    22359                1186.7   (2.0x)           0.0                   991.7   (1.2x)    990.9   (1.2x)\
=> FAILED   640000    13834   (0.7x)       1414.1   (2.4x)           0.0                  1181.1   (1.5x)   1180.3   (1.5x)\
=> FAILED  1280000    13410   (0.7x)       2021.6   (3.4x)           0.0                  1687.7   (2.1x)   1688.5   (2.1x)\
==> 4/8 tests passed\
\
\
\
Total: 24/28 tests passed!\
\
\
================================================================\
\
\
\
}