{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf200
{\fonttbl\f0\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red98\green98\blue98;\red255\green255\blue255;}
{\*\expandedcolortbl;;\cssrgb\c45882\c45882\c45882;\cssrgb\c100000\c100000\c100000;}
\paperw11900\paperh16840\margl1440\margr1440\vieww21840\viewh13220\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
See the Assessment Guide for information on how to interpret this report.\
\
ASSESSMENT SUMMARY\
\
Compilation:  PASSED\
API:          PASSED\
\
Spotbugs:     PASSED\
PMD:          FAILED (1 warning)\
Checkstyle:   FAILED (0 errors, 5 warnings)\
\
Correctness:  20/35 tests passed\
Memory:       16/16 tests passed\
Timing:       42/42 tests passed\
\
Aggregate score: 74.29%\
[Compilation: 5%, API: 5%, Spotbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]\
\
ASSESSMENT DETAILS\
\
The following files were submitted:\
----------------------------------\
4.7K Jan  6 17:25 KdTree.java\
2.8K Jan  6 17:25 PointSET.java\
\
\
********************************************************************************\
*  COMPILING                                                                    \
********************************************************************************\
\
\
% javac PointSET.java\
*-----------------------------------------------------------\
\
% javac KdTree.java\
*-----------------------------------------------------------\
\
\
================================================================\
\
\
Checking the APIs of your programs.\
*-----------------------------------------------------------\
PointSET:\
\
KdTree:\
\
================================================================\
\
\
********************************************************************************\
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       \
********************************************************************************\
\
\
% spotbugs *.class\
*-----------------------------------------------------------\
\
\
================================================================\
\
\
% pmd .\
*-----------------------------------------------------------\
PointSET.java:8: The private instance (or static) variable 'points' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]\
PMD ends with 1 warning.\
\
\
================================================================\
\
\
% checkstyle *.java\
*-----------------------------------------------------------\
[WARN] KdTree.java:13:20: '=' is not preceded with whitespace. [WhitespaceAround]\
[WARN] KdTree.java:13:21: '=' is not followed by whitespace. [WhitespaceAround]\
[WARN] KdTree.java:14:20: '=' is not preceded with whitespace. [WhitespaceAround]\
[WARN] KdTree.java:14:21: '=' is not followed by whitespace. [WhitespaceAround]\
[WARN] PointSET.java:50:7: 'if' is not followed by whitespace. [WhitespaceAfter]\
Checkstyle ends with 0 errors and 5 warnings.\
\
% custom checkstyle checks for PointSET.java\
*-----------------------------------------------------------\
\
% custom checkstyle checks for KdTree.java\
*-----------------------------------------------------------\
\
\
================================================================\
\
\
********************************************************************************\
*  TESTING CORRECTNESS\
********************************************************************************\
\
Testing correctness of PointSET\
*-----------------------------------------------------------\
Running 8 total tests.\
\
A point in an m-by-m grid means that it is of the form (i/m, j/m),\
where i and j are integers between 0 and m\
\
Test 1: insert n random points; check size() and isEmpty() after each insertion\
        (size may be less than n because of duplicates)\
  * 5 random points in a 1-by-1 grid\
  * 50 random points in a 8-by-8 grid\
  * 100 random points in a 16-by-16 grid\
  * 1000 random points in a 128-by-128 grid\
  * 5000 random points in a 1024-by-1024 grid\
  * 50000 random points in a 65536-by-65536 grid\
==> passed\
\
Test 2: insert n random points; check contains() with random query points\
  * 1 random points in a 1-by-1 grid\
  * 10 random points in a 4-by-4 grid\
  * 20 random points in a 8-by-8 grid\
  * 10000 random points in a 128-by-128 grid\
  * 100000 random points in a 1024-by-1024 grid\
  * 100000 random points in a 65536-by-65536 grid\
==> passed\
\
Test 3: insert random points; check nearest() with random query points\
  * 10 random points in a 4-by-4 grid\
  * 15 random points in a 8-by-8 grid\
  * 20 random points in a 16-by-16 grid\
  * 100 random points in a 32-by-32 grid\
  * 10000 random points in a 65536-by-65536 grid\
==> passed\
\
Test 4: insert random points; check range() with random query rectangles\
  * 2 random points and random rectangles in a 2-by-2 grid\
  * 10 random points and random rectangles in a 4-by-4 grid\
  * 20 random points and random rectangles in a 8-by-8 grid\
  * 100 random points and random rectangles in a 16-by-16 grid\
  * 1000 random points and random rectangles in a 64-by-64 grid\
  * 10000 random points and random rectangles in a 128-by-128 grid\
==> passed\
\
Test 5: call methods before inserting any points\
 * size() and isEmpty()\
 * contains()\
 * nearest()\
 * range()\
==> passed\
\
Test 6: call methods with null argument\
  * insert()\
  * contains()\
  * range()\
  * nearest()\
==> passed\
\
Test 7: check intermixed sequence of calls to insert(), isEmpty(),\
        size(), contains(), range(), and nearest() with\
        probabilities (p1, p2, p3, p4, p5, p6, p7), respectively\
  * 10000 calls with random points in a 1-by-1 grid\
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)\
  * 10000 calls with random points in a 16-by-16 grid\
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)\
    - failed on trial 19 of 10000\
    - rectangle = [0.0625, 0.875] x [0.1875, 0.625]\
    - student   range():  (0.5, 0.0) (0.5, 0.375) \
    - reference range():  (0.5, 0.375) \
    - sequence of operations was:\
           set.size()     ==>  0\
           set.size()     ==>  0\
           set.insert((0.5, 0.375))\
           set.size()     ==>  1\
           set.range([0.75, 0.8125] x [0.25, 0.5])  ==>  empty\
           set.insert((0.5, 0.0))\
           set.isEmpty()  ==>  false\
           set.size()     ==>  2\
           set.nearest((0.875, 0.25))   ==>  (0.5, 0.375)\
           set.isEmpty()  ==>  false\
           set.nearest((0.125, 0.625))   ==>  (0.5, 0.375)\
           set.contains((0.75, 0.25))  ==>  false\
           set.isEmpty()  ==>  false\
           set.nearest((0.5625, 1.0))   ==>  (0.5, 0.375)\
           set.range([0.1875, 0.4375] x [0.0625, 0.625])  ==>  empty\
           set.nearest((0.5, 0.8125))   ==>  (0.5, 0.375)\
           set.range([0.625, 1.0] x [0.25, 0.9375])  ==>  empty\
           set.size()     ==>  2\
           set.range([0.0625, 0.875] x [0.1875, 0.625])  ==>  (0.5, 0.0) (0.5, 0.375) \
\
  * 10000 calls with random points in a 128-by-128 grid\
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)\
    - failed on trial 27 of 10000\
    - rectangle = [0.15625, 0.34375] x [0.0703125, 0.96875]\
    - student   range():  empty\
    - reference range():  (0.2421875, 0.8203125) (0.234375, 0.9296875) \
\
  * 10000 calls with random points in a 1024-by-1024 grid\
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)\
    - failed on trial 36 of 10000\
    - rectangle = [0.3251953125, 0.369140625] x [0.4619140625, 0.5712890625]\
    - student   range():  (0.3291015625, 0.4560546875) \
    - reference range():  empty\
\
  * 10000 calls with random points in a 8192-by-8192 grid\
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)\
    - failed on trial 77 of 10000\
    - rectangle = [0.03955078125, 0.792724609375] x [0.156005859375, 0.8978271484375]\
    - student   range():  (0.459716796875, 0.091064453125) (0.3670654296875, 0.4246826171875) (0.1231689453125, 0.428466796875) (0.0625, 0.4560546875) (0.48046875, 0.5164794921875) (0.53271484375, 0.5235595703125) (0.7666015625, 0.5379638671875) (0.1083984375, 0.6044921875) (0.6033935546875, 0.6063232421875) (0.33837890625, 0.69482421875) (0.1824951171875, 0.7481689453125) (0.7890625, 0.85302734375) (0.619140625, 0.8646240234375) (0.431884765625, 0.873779296875) (0.63037109375, 0.889892578125) \
    - reference range():  (0.3670654296875, 0.4246826171875) (0.1231689453125, 0.428466796875) (0.0625, 0.4560546875) (0.48046875, 0.5164794921875) (0.53271484375, 0.5235595703125) (0.7666015625, 0.5379638671875) (0.1083984375, 0.6044921875) (0.6033935546875, 0.6063232421875) (0.33837890625, 0.69482421875) (0.1824951171875, 0.7481689453125) (0.7890625, 0.85302734375) (0.619140625, 0.8646240234375) (0.431884765625, 0.873779296875) (0.63037109375, 0.889892578125) \
\
  * 10000 calls with random points in a 65536-by-65536 grid\
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)\
    - failed on trial 21 of 10000\
    - rectangle = [0.3486328125, 0.60723876953125] x [0.4909820556640625, 0.9310760498046875]\
    - student   range():  (0.437103271484375, 0.2612762451171875) \
    - reference range():  empty\
    - sequence of operations was:\
           set.isEmpty()  ==>  true\
           set.size()     ==>  0\
           set.isEmpty()  ==>  true\
           set.insert((0.1865081787109375, 0.2403564453125))\
           set.size()     ==>  1\
           set.contains((0.7256927490234375, 0.4979095458984375))  ==>  false\
           set.nearest((0.21234130859375, 0.7032012939453125))   ==>  (0.1865081787109375, 0.2403564453125)\
           set.nearest((0.0337066650390625, 0.007781982421875))   ==>  (0.1865081787109375, 0.2403564453125)\
           set.contains((0.2902374267578125, 0.119476318359375))  ==>  false\
           set.nearest((0.7618255615234375, 0.7169647216796875))   ==>  (0.1865081787109375, 0.2403564453125)\
           set.range([0.397674560546875, 0.64398193359375] x [0.264373779296875, 0.9393310546875])  ==>  empty\
           set.nearest((0.276702880859375, 0.4121246337890625))   ==>  (0.1865081787109375, 0.2403564453125)\
           set.insert((0.6297149658203125, 0.6947479248046875))\
           set.nearest((0.2884521484375, 0.6414337158203125))   ==>  (0.6297149658203125, 0.6947479248046875)\
           set.contains((0.663360595703125, 0.21209716796875))  ==>  false\
           set.insert((0.437103271484375, 0.2612762451171875))\
           set.range([0.705352783203125, 0.931610107421875] x [0.4148712158203125, 0.844268798828125])  ==>  empty\
           set.size()     ==>  3\
           set.nearest((0.4308929443359375, 0.807403564453125))   ==>  (0.6297149658203125, 0.6947479248046875)\
           set.range([0.2581329345703125, 0.30596923828125] x [0.1963348388671875, 0.4767608642578125])  ==>  empty\
           set.range([0.3486328125, 0.60723876953125] x [0.4909820556640625, 0.9310760498046875])  ==>  (0.437103271484375, 0.2612762451171875) \
\
==> FAILED\
\
Test 8: check that two PointSET objects can be created at the same time\
==> passed\
\
\
Total: 7/8 tests passed!\
\
\
================================================================\
Testing correctness of KdTree\
*-----------------------------------------------------------\
Running 27 total tests.\
\
In the tests below, we consider three classes of points and rectangles.\
\
  * Non-degenerate points: no two points (or rectangles) share either an\
                           x-coordinate or a y-coordinate\
\
  * Distinct points:       no two points (or rectangles) share both an\
                           x-coordinate and a y-coordinate\
\
  * General points:        no restrictions on the x-coordinates or y-coordinates\
                           of the points (or rectangles)\
\
A point in an m-by-m grid means that it is of the form (i/m, j/m),\
where i and j are integers between 0 and m (inclusive).\
\
Test 1a: insert points from file; check size() and isEmpty() after each insertion\
  * input0.txt\
  * input1.txt\
  * input5.txt\
  * input10.txt\
==> passed\
\
Test 1b: insert non-degenerate points; check size() and isEmpty() after each insertion\
  * 1 random non-degenerate points in a 1-by-1 grid\
  * 5 random non-degenerate points in a 8-by-8 grid\
  * 10 random non-degenerate points in a 16-by-16 grid\
  * 50 random non-degenerate points in a 128-by-128 grid\
  * 500 random non-degenerate points in a 1024-by-1024 grid\
  * 50000 random non-degenerate points in a 65536-by-65536 grid\
==> passed\
\
Test 1c: insert distinct points; check size() and isEmpty() after each insertion\
  * 1 random distinct points in a 1-by-1 grid\
  * 10 random distinct points in a 8-by-8 grid\
  * 20 random distinct points in a 16-by-16 grid\
  * 10000 random distinct points in a 128-by-128 grid\
  * 100000 random distinct points in a 1024-by-1024 grid\
  * 100000 random distinct points in a 65536-by-65536 grid\
==> passed\
\
Test 1d: insert general points; check size() and isEmpty() after each insertion\
  * 5 random general points in a 1-by-1 grid\
  * 10 random general points in a 4-by-4 grid\
  * 50 random general points in a 8-by-8 grid\
  * 100000 random general points in a 16-by-16 grid\
  * 100000 random general points in a 128-by-128 grid\
  * 100000 random general points in a 1024-by-1024 grid\
==> passed\
\
Test 2a: insert points from file; check contains() with random query points\
  * input0.txt\
  * input1.txt\
  * input5.txt\
  * input10.txt\
==> passed\
\
Test 2b: insert non-degenerate points; check contains() with random query points\
  * 1 random non-degenerate points in a 1-by-1 grid\
  * 5 random non-degenerate points in a 8-by-8 grid\
  * 10 random non-degenerate points in a 16-by-16 grid\
  * 20 random non-degenerate points in a 32-by-32 grid\
  * 500 random non-degenerate points in a 1024-by-1024 grid\
  * 10000 random non-degenerate points in a 65536-by-65536 grid\
==> passed\
\
Test 2c: insert distinct points; check contains() with random query points\
  * 1 random distinct points in a 1-by-1 grid\
  * 10 random distinct points in a 4-by-4 grid\
  * 20 random distinct points in a 8-by-8 grid\
  * 10000 random distinct points in a 128-by-128 grid\
  * 100000 random distinct points in a 1024-by-1024 grid\
  * 100000 random distinct points in a 65536-by-65536 grid\
==> passed\
\
Test 2d: insert general points; check contains() with random query points\
  * 10000 random general points in a 1-by-1 grid\
  * 10000 random general points in a 16-by-16 grid\
  * 10000 random general points in a 128-by-128 grid\
  * 10000 random general points in a 1024-by-1024 grid\
==> passed\
\
Test 3a: insert points from file; check range() with random query rectangles\
  * input0.txt\
  * input1.txt\
  * input5.txt\
  * input10.txt\
==> passed\
\
Test 3b: insert non-degenerate points; check range() with random query rectangles\
  * 1 random non-degenerate points and random rectangles in a 2-by-2 grid\
  * 5 random non-degenerate points and random rectangles in a 8-by-8 grid\
  * 10 random non-degenerate points and random rectangles in a 16-by-16 grid\
  * 20 random non-degenerate points and random rectangles in a 32-by-32 grid\
  * 500 random non-degenerate points and random rectangles in a 1024-by-1024 grid\
    - failed on trial 1 of 10000\
    - query rectangle = [0.408203125, 0.8427734375] x [0.404296875, 0.8330078125]\
    - student   range():  G Q A K E G T D S J K J W H M G N M D S S P A C P G ...\
    - reference range():  G Q A K E G T D S J K J W H M G N M D N S S P A C P ...\
\
  * 10000 random non-degenerate points and random rectangles in a 65536-by-65536 grid\
    - failed on trial 1 of 10000\
    - query rectangle = [0.1396026611328125, 0.666473388671875] x [0.1295166015625, 0.4954376220703125]\
    - student   range():  P F A V H H L H K Q L E D Q L P P R M E X N F P W Z ...\
    - reference range():  P F A V H H L H K W Q L E D Q L P P R M E X N F P W ...\
\
==> FAILED\
\
Test 3c: insert distinct points; check range() with random query rectangles\
  * 2 random distinct points and random rectangles in a 2-by-2 grid\
  * 10 random distinct points and random rectangles in a 4-by-4 grid\
  * 20 random distinct points and random rectangles in a 8-by-8 grid\
  * 100 random distinct points and random rectangles in a 16-by-16 grid\
  * 1000 random distinct points and random rectangles in a 64-by-64 grid\
    - failed on trial 1 of 10000\
    - query rectangle = [0.078125, 0.609375] x [0.171875, 0.25]\
    - student   range():  D E O J G V Y P P I Q K I Y Z I I T G P P H R F C E ...\
    - reference range():  D E O O J G J G V Y P P I Q K I Y Z I I T G P P H R ...\
\
  * 10000 random distinct points and random rectangles in a 128-by-128 grid\
    - failed on trial 1 of 10000\
    - query rectangle = [0.328125, 0.5546875] x [0.59375, 0.671875]\
    - student   range():  I I V X B P J F G G P Z U V C B V D N T J E B A W F ...\
    - reference range():  I I V X B P J F G G P Z U V C B V D N T J E B A W F ...\
\
==> FAILED\
\
Test 3d: insert general points; check range() with random query rectangles\
  * 5000 random general points and random rectangles in a 2-by-2 grid\
  * 5000 random general points and random rectangles in a 16-by-16 grid\
    - failed on trial 1 of 10000\
    - query rectangle = [0.25, 0.75] x [0.1875, 0.6875]\
    - student   range():  G J A I Z P F D C I L S G Y R K Y Q N Z J U K F I E ...\
    - reference range():  G J A I Z R H E T Z L A V F H W X P P F D N C I L S ...\
\
  * 5000 random general points and random rectangles in a 128-by-128 grid\
    - failed on trial 1 of 10000\
    - query rectangle = [0.4375, 0.671875] x [0.546875, 0.90625]\
    - student   range():  J V F K D Z V Q N P C R R X H E I Y N E Z Y N F Q C ...\
    - reference range():  J V F K D Z V Q N P C R R X H E I Y N E Z Y N F Q C ...\
\
  * 5000 random general points and random rectangles in a 1024-by-1024 grid\
    - failed on trial 1 of 10000\
    - query rectangle = [0.591796875, 0.6240234375] x [0.76953125, 0.853515625]\
    - student   range():  N W H A X G T B G P D L C \
    - reference range():  N W H A X G T B G P D L C R \
\
==> FAILED\
\
Test 3e: insert random points; check range() with tiny rectangles\
         enclosing each point\
  * 5 tiny rectangles and 5 general points in a 2-by-2 grid\
  * 10 tiny rectangles and 10 general points in a 4-by-4 grid\
  * 20 tiny rectangles and 20 general points in a 8-by-8 grid\
  * 5000 tiny rectangles and 5000 general points in a 128-by-128 grid\
  * 5000 tiny rectangles and 5000 general points in a 1024-by-1024 grid\
  * 5000 tiny rectangles and 5000 general points in a 65536-by-65536 grid\
==> passed\
\
Test 4a: insert points from file; check range() with random query rectangles\
         and check traversal of kd-tree\
  * input5.txt\
  * input10.txt\
    - student range() returns correct set of points\
    - student   range():  empty\
    - reference range():  empty\
    - performs incorrect traversal of kd-tree during call to range()\
    - query rectangle = [0.01, 0.47] x [0.28, 0.3]\
    - sequence of points inserted: \
      A  0.372 0.497\
      B  0.564 0.413\
      C  0.226 0.577\
      D  0.144 0.179\
      E  0.083 0.51\
      F  0.32 0.708\
      G  0.417 0.362\
      H  0.862 0.825\
      I  0.785 0.725\
      J  0.499 0.208\
    - student kd-tree nodes involved in calls to Point2D methods:\
      A C D E B G \
    - reference kd-tree nodes involved in calls to Point2D methods:\
      A C D E B G J \
    - failed on trial 5 of 1000\
\
==> FAILED\
\
Test 4b: insert non-degenerate points; check range() with random query rectangles\
         and check traversal of kd-tree\
  * 3 random non-degenerate points and 1000 random rectangles in a 4-by-4 grid\
  * 6 random non-degenerate points and 1000 random rectangles in a 8-by-8 grid\
  * 10 random non-degenerate points and 1000 random rectangles in a 16-by-16 grid\
    - student range() returns correct set of points\
    - student   range():  G \
    - reference range():  G \
    - performs incorrect traversal of kd-tree during call to range()\
    - query rectangle = [0.25, 0.6875] x [0.4375, 1.0]\
    - sequence of points inserted: \
      A  1.0 0.8125\
      B  0.0625 0.5\
      C  0.125 0.125\
      D  0.5625 0.1875\
      E  0.75 0.6875\
      F  0.5 0.0625\
      G  0.625 0.75\
      H  0.0 0.0\
      I  0.9375 0.3125\
      J  0.875 0.5625\
    - student kd-tree nodes involved in calls to Point2D methods:\
      A B C D I E G J \
    - reference kd-tree nodes involved in calls to Point2D methods:\
      A B C D I E G \
    - failed on trial 1 of 1000\
\
  * 20 random non-degenerate points and 1000 random rectangles in a 32-by-32 grid\
    - student range() returns correct set of points\
    - student   range():  C E G Q J \
    - reference range():  C E G Q J \
    - performs incorrect traversal of kd-tree during call to range()\
    - query rectangle = [0.46875, 0.78125] x [0.09375, 0.75]\
    - sequence of points inserted: \
      A  0.5 0.875\
      B  0.96875 0.84375\
      C  0.6875 0.5\
      D  0.09375 0.25\
      E  0.625 0.625\
      F  0.84375 0.375\
      G  0.59375 0.34375\
      H  0.125 1.0\
      I  0.40625 0.53125\
      J  0.75 0.1875\
      K  0.4375 0.3125\
      L  0.34375 0.71875\
      M  0.875 0.8125\
      N  0.5625 0.96875\
      O  0.8125 0.28125\
      P  0.15625 0.21875\
      Q  0.53125 0.5625\
      R  0.28125 0.4375\
      S  0.21875 0.78125\
      T  0.375 0.90625\
    - student kd-tree nodes involved in calls to Point2D methods:\
      A D P H B C E G Q F J O M \
    - reference kd-tree nodes involved in calls to Point2D methods:\
      A D P H I K L T B C E G Q F J O M \
    - failed on trial 1 of 1000\
\
  * 30 random non-degenerate points and 1000 random rectangles in a 64-by-64 grid\
    - student range() returns wrong set of points\
    - student   range():  C E F J K Q B I \
    - reference range():  C E F J K Q B I O D \
    - performs incorrect traversal of kd-tree during call to range()\
    - query rectangle = [0.03125, 0.8125] x [0.375, 0.921875]\
    - number of entries in student   solution: 15\
    - number of entries in reference solution: 17\
    - 2 missing entries in student solution, including:\
      '(0.59375, 0.90625)'\
\
    - failed on trial 3 of 1000\
\
==> FAILED\
\
Test 5a: insert points from file; check nearest() with random query points\
  * input0.txt\
  * input1.txt\
  * input5.txt\
    - failed on trial 10 of 10000\
    - sequence of points inserted: \
      A  0.7 0.2\
      B  0.5 0.4\
      C  0.2 0.3\
      D  0.4 0.7\
      E  0.9 0.6\
    - query point                   = (0.043, 0.414)\
    - student   nearest()           = (0.5, 0.4)\
    - reference nearest()           = (0.2, 0.3)\
    - student   distanceSquaredTo() = 0.209045\
    - reference distanceSquaredTo() = 0.037645\
\
  * input10.txt\
    - failed on trial 2 of 10000\
    - sequence of points inserted: \
      A  0.372 0.497\
      B  0.564 0.413\
      C  0.226 0.577\
      D  0.144 0.179\
      E  0.083 0.51\
      F  0.32 0.708\
      G  0.417 0.362\
      H  0.862 0.825\
      I  0.785 0.725\
      J  0.499 0.208\
    - query point                   = (0.159, 0.456)\
    - student   nearest()           = (0.226, 0.577)\
    - reference nearest()           = (0.083, 0.51)\
    - student   distanceSquaredTo() = 0.01913\
    - reference distanceSquaredTo() = 0.008692\
\
==> FAILED\
\
Test 5b: insert non-degenerate points; check nearest() with random query points\
  * 5 random non-degenerate points in a 8-by-8 grid\
  * 10 random non-degenerate points in a 16-by-16 grid\
    - failed on trial 3 of 10000\
    - sequence of points inserted: \
      A  0.6875 0.875\
      B  0.0 0.5625\
      C  0.0625 0.75\
      D  0.4375 0.0\
      E  0.625 0.9375\
      F  0.9375 1.0\
      G  0.1875 0.0625\
      H  0.5625 0.1875\
      I  1.0 0.375\
      J  0.875 0.625\
    - query point                   = (0.375, 0.25)\
    - student   nearest()           = (0.4375, 0.0)\
    - reference nearest()           = (0.5625, 0.1875)\
    - student   distanceSquaredTo() = 0.06640625\
    - reference distanceSquaredTo() = 0.0390625\
\
  * 20 random non-degenerate points in a 32-by-32 grid\
    - failed on trial 3 of 10000\
    - sequence of points inserted: \
      A  0.28125 0.84375\
      B  0.21875 0.46875\
      C  0.75 0.5\
      D  0.125 0.28125\
      E  0.4375 0.4375\
      F  1.0 0.71875\
      G  0.375 0.96875\
      H  0.5625 0.75\
      I  0.59375 0.125\
      J  0.53125 0.6875\
      K  0.875 0.09375\
      L  0.96875 0.25\
      M  0.34375 0.15625\
      N  0.90625 0.03125\
      O  0.40625 0.21875\
      P  0.25 0.53125\
      Q  0.5 0.625\
      R  0.46875 0.0625\
      S  0.6875 0.5625\
      T  0.84375 1.0\
    - query point                   = (0.78125, 0.0)\
    - student   nearest()           = (0.875, 0.09375)\
    - reference nearest()           = (0.90625, 0.03125)\
    - student   distanceSquaredTo() = 0.017578125\
    - reference distanceSquaredTo() = 0.0166015625\
\
  * 30 random non-degenerate points in a 64-by-64 grid\
    - failed on trial 1 of 10000\
    - query point                   = (0.59375, 0.625)\
    - student   nearest()           = (0.546875, 0.453125)\
    - reference nearest()           = (0.71875, 0.65625)\
    - student   distanceSquaredTo() = 0.03173828125\
    - reference distanceSquaredTo() = 0.0166015625\
\
  * 10000 random non-degenerate points in a 65536-by-65536 grid\
    - failed on trial 3 of 10000\
    - query point                   = (0.999237060546875, 0.6485748291015625)\
    - student   nearest()           = (0.9983367919921875, 0.6292572021484375)\
    - reference nearest()           = (0.983428955078125, 0.639801025390625)\
    - student   distanceSquaredTo() = 0.000373981194571\
    - reference distanceSquaredTo() = 0.000326875830069\
\
==> FAILED\
\
Test 5c: insert distinct points; check nearest() with random query points\
  * 10 random distinct points in a 4-by-4 grid\
    - failed on trial 2 of 10000\
    - sequence of points inserted: \
      A  0.0 1.0\
      B  0.5 0.0\
      C  0.5 0.5\
      D  1.0 0.5\
      E  0.5 1.0\
      F  0.25 0.75\
      G  0.5 0.75\
      H  1.0 0.75\
      I  0.75 0.75\
      J  1.0 0.25\
    - query point                   = (1.0, 0.0)\
    - student   nearest()           = (0.5, 0.0)\
    - reference nearest()           = (1.0, 0.25)\
    - student   distanceSquaredTo() = 0.25\
    - reference distanceSquaredTo() = 0.0625\
\
  * 15 random distinct points in a 8-by-8 grid\
    - failed on trial 5 of 10000\
    - sequence of points inserted: \
      A  0.125 0.875\
      B  0.125 0.75\
      C  0.625 0.625\
      D  0.875 0.25\
      E  0.875 0.0\
      F  0.25 0.375\
      G  0.75 0.75\
      H  0.0 0.0\
      I  0.125 0.625\
      J  0.75 0.0\
      K  0.125 0.125\
      L  0.125 0.375\
      M  0.75 0.875\
      N  0.625 1.0\
      O  0.75 0.625\
    - query point                   = (0.0, 0.75)\
    - student   nearest()           = (0.125, 0.875)\
    - reference nearest()           = (0.125, 0.75)\
    - student   distanceSquaredTo() = 0.03125\
    - reference distanceSquaredTo() = 0.015625\
\
  * 20 random distinct points in a 16-by-16 grid\
    - failed on trial 1 of 10000\
    - sequence of points inserted: \
      A  0.25 0.9375\
      B  0.4375 0.375\
      C  0.125 0.0\
      D  0.125 1.0\
      E  1.0 0.375\
      F  0.9375 0.1875\
      G  0.5625 0.875\
      H  1.0 0.0\
      I  0.125 0.75\
      J  0.625 0.75\
      K  0.6875 0.625\
      L  0.6875 0.4375\
      M  0.0 0.5\
      N  0.875 1.0\
      O  0.0 0.25\
      P  0.0625 0.875\
      Q  0.9375 0.625\
      R  0.4375 0.0\
      S  0.375 0.5\
      T  0.4375 0.1875\
    - query point                   = (0.9375, 0.5)\
    - student   nearest()           = (1.0, 0.375)\
    - reference nearest()           = (0.9375, 0.625)\
    - student   distanceSquaredTo() = 0.01953125\
    - reference distanceSquaredTo() = 0.015625\
\
  * 100 random distinct points in a 32-by-32 grid\
    - failed on trial 2 of 10000\
    - query point                   = (0.125, 0.0)\
    - student   nearest()           = (0.0625, 0.125)\
    - reference nearest()           = (0.0, 0.0)\
    - student   distanceSquaredTo() = 0.01953125\
    - reference distanceSquaredTo() = 0.015625\
\
  * 10000 random distinct points in a 65536-by-65536 grid\
    - failed on trial 1 of 10000\
    - query point                   = (0.6031951904296875, 0.848388671875)\
    - student   nearest()           = (0.6035308837890625, 0.840789794921875)\
    - reference nearest()           = (0.601409912109375, 0.84893798828125)\
    - student   distanceSquaredTo() = 0.00005785562098\
    - reference distanceSquaredTo() = 0.000003488967195\
\
==> FAILED\
\
Test 5d: insert general points; check nearest() with random query points\
  * 10000 random general points in a 16-by-16 grid\
    - failed on trial 1 of 10000\
    - query point                   = (0.125, 0.0)\
    - student   nearest()           = (0.25, 0.0)\
    - reference nearest()           = (0.125, 0.0)\
    - student   distanceSquaredTo() = 0.015625\
    - reference distanceSquaredTo() = 0\
\
  * 10000 random general points in a 128-by-128 grid\
    - failed on trial 3 of 10000\
    - query point                   = (0.8828125, 0.71875)\
    - student   nearest()           = (0.875, 0.7265625)\
    - reference nearest()           = (0.8828125, 0.71875)\
    - student   distanceSquaredTo() = 0.0001220703125\
    - reference distanceSquaredTo() = 0\
\
  * 10000 random general points in a 1024-by-1024 grid\
    - failed on trial 1 of 10000\
    - query point                   = (0.8369140625, 0.0224609375)\
    - student   nearest()           = (0.8427734375, 0.0302734375)\
    - reference nearest()           = (0.8388671875, 0.0185546875)\
    - student   distanceSquaredTo() = 0.000095367431641\
    - reference distanceSquaredTo() = 0.000019073486328\
\
==> FAILED\
\
Test 6a: insert points from file; check nearest() with random query points\
         and check traversal of kd-tree\
  * input5.txt\
    - student   nearest() = (0.9, 0.6)\
    - reference nearest() = (0.9, 0.6)\
    - performs incorrect traversal of kd-tree during call to nearest()\
    - query point = (0.96, 0.86)\
    - sequence of points inserted: \
      A  0.7 0.2\
      B  0.5 0.4\
      C  0.2 0.3\
      D  0.4 0.7\
      E  0.9 0.6\
    - student sequence of kd-tree nodes involved in calls to Point2D methods:\
      A E \
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:\
      A E B D \
    - failed on trial 1 of 1000\
\
  * input10.txt\
    - student   nearest() = (0.144, 0.179)\
    - reference nearest() = (0.144, 0.179)\
    - performs incorrect traversal of kd-tree during call to nearest()\
    - query point = (0.2, 0.26)\
    - sequence of points inserted: \
      A  0.372 0.497\
      B  0.564 0.413\
      C  0.226 0.577\
      D  0.144 0.179\
      E  0.083 0.51\
      F  0.32 0.708\
      G  0.417 0.362\
      H  0.862 0.825\
      I  0.785 0.725\
      J  0.499 0.208\
    - student sequence of kd-tree nodes involved in calls to Point2D methods:\
      A C D \
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:\
      A C D E \
    - failed on trial 2 of 1000\
\
==> FAILED\
\
Test 6b: insert non-degenerate points; check nearest() with random query points\
         and check traversal of kd-tree\
  * 5 random non-degenerate points in a 8-by-8 grid\
    - student   nearest() = (0.5, 0.75)\
    - reference nearest() = (0.125, 0.875)\
    - student   distanceSquaredTo() = 0.640625\
    - reference distanceSquaredTo() = 0.578125\
    - performs incorrect traversal of kd-tree during call to nearest()\
    - query point = (0.0, 0.125)\
    - sequence of points inserted: \
      A  1.0 0.25\
      B  0.5 0.75\
      C  0.75 0.625\
      D  0.375 1.0\
      E  0.125 0.875\
    - student sequence of kd-tree nodes involved in calls to Point2D methods:\
      A B C \
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:\
      A B C D E \
    - failed on trial 1 of 1000\
\
  * 10 random non-degenerate points in a 16-by-16 grid\
    - student   nearest() = (0.3125, 0.125)\
    - reference nearest() = (0.3125, 0.125)\
    - performs incorrect traversal of kd-tree during call to nearest()\
    - query point = (0.25, 0.0)\
    - sequence of points inserted: \
      A  0.625 0.75\
      B  0.375 0.5625\
      C  0.3125 0.125\
      D  0.4375 0.1875\
      E  0.0625 0.625\
      F  0.9375 0.875\
      G  0.5 0.375\
      H  0.875 1.0\
      I  0.125 0.0625\
      J  0.5625 0.4375\
    - student sequence of kd-tree nodes involved in calls to Point2D methods:\
      A B C I \
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:\
      A B C I D \
    - failed on trial 1 of 1000\
\
  * 20 random non-degenerate points in a 32-by-32 grid\
    - student   nearest() = (0.8125, 0.4375)\
    - reference nearest() = (0.8125, 0.4375)\
    - performs incorrect traversal of kd-tree during call to nearest()\
    - query point = (0.9375, 0.53125)\
    - sequence of points inserted: \
      A  0.34375 0.46875\
      B  0.84375 0.28125\
      C  0.3125 0.5\
      D  0.53125 0.8125\
      E  0.28125 0.1875\
      F  0.59375 0.625\
      G  0.0 0.375\
      H  0.8125 0.4375\
      I  0.6875 0.78125\
      J  0.1875 0.25\
      K  0.78125 0.84375\
      L  0.375 0.71875\
      M  0.09375 0.9375\
      N  0.15625 0.96875\
      O  0.25 0.40625\
      P  0.125 0.3125\
      Q  0.5 0.6875\
      R  0.40625 0.15625\
      S  0.90625 0.75\
      T  0.4375 0.875\
    - student sequence of kd-tree nodes involved in calls to Point2D methods:\
      A B D F H \
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:\
      A B D F H I K S \
    - failed on trial 1 of 1000\
\
  * 30 random non-degenerate points in a 64-by-64 grid\
    - student   nearest() = (0.53125, 0.609375)\
    - reference nearest() = (0.53125, 0.609375)\
    - performs incorrect traversal of kd-tree during call to nearest()\
    - number of student   entries = 6\
    - number of reference entries = 9\
    - failed on trial 2 of 1000\
\
  * 50 random non-degenerate points in a 128-by-128 grid\
    - student   nearest() = (0.2890625, 0.515625)\
    - reference nearest() = (0.2890625, 0.515625)\
    - performs incorrect traversal of kd-tree during call to nearest()\
    - number of student   entries = 6\
    - number of reference entries = 13\
    - failed on trial 1 of 1000\
\
  * 1000 random non-degenerate points in a 2048-by-2048 grid\
    - student   nearest() = (0.93017578125, 0.69482421875)\
    - reference nearest() = (0.9755859375, 0.70556640625)\
    - student   distanceSquaredTo() = 0.000628709793091\
    - reference distanceSquaredTo() = 0.000607490539551\
    - performs incorrect traversal of kd-tree during call to nearest()\
    - number of student   entries = 7\
    - number of reference entries = 31\
    - failed on trial 1 of 1000\
\
==> FAILED\
\
Test 7: check with no points\
  * size() and isEmpty()\
  * contains()\
  * nearest()\
  * range()\
==> passed\
\
Test 8: check that the specified exception is thrown with null arguments\
  * argument to insert() is null\
  * argument to contains() is null\
  * argument to range() is null\
  * argument to nearest() is null\
==> passed\
\
Test 9a: check intermixed sequence of calls to insert(), isEmpty(),\
         size(), contains(), range(), and nearest() with probabilities\
         (p1, p2, p3, p4, p5, p6), respectively\
  * 20000 calls with non-degenerate points in a 1-by-1 grid\
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)\
  * 20000 calls with non-degenerate points in a 16-by-16 grid\
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)\
    - failed on trial 9 of 20000\
    - student   nearest()  = (0.5625, 0.875)\
    - reference nearest()  = (0.75, 0.3125)\
    - student   distanceSquaredTo() = 0.5703125\
    - reference distanceSquaredTo() = 0.265625\
    - sequence of operations was:\
           st.insert(0.5625, 0.875)\
           st.insert(0.75, 0.3125)\
           st.isEmpty()  ==>  false\
           st.contains((0.1875, 0.625))  ==>  false\
           st.isEmpty()  ==>  false\
           st.nearest((0.0625, 0.5))   ==>  (0.5625, 0.875)\
           st.nearest((0.0625, 0.6875))   ==>  (0.5625, 0.875)\
           st.contains((0.0, 0.0))  ==>  false\
           st.nearest((0.25, 0.1875))   ==>  (0.5625, 0.875)\
\
  * 20000 calls with non-degenerate points in a 128-by-128 grid\
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)\
    - failed on trial 29 of 20000\
    - student   nearest()  = (0.9453125, 0.1484375)\
    - reference nearest()  = (0.46875, 0.8125)\
    - student   distanceSquaredTo() = 0.5499267578125\
    - reference distanceSquaredTo() = 0.07275390625\
\
  * 20000 calls with non-degenerate points in a 1024-by-1024 grid\
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)\
    - failed on trial 21 of 20000\
    - student   nearest()  = (0.447265625, 0.3427734375)\
    - reference nearest()  = (0.650390625, 0.76171875)\
    - student   distanceSquaredTo() = 0.31500244140625\
    - reference distanceSquaredTo() = 0.14357852935791\
    - sequence of operations was:\
           st.insert(0.10546875, 0.1005859375)\
           st.size()  ==>  1\
           st.insert(0.716796875, 0.1318359375)\
           st.contains((0.9140625, 0.8994140625))  ==>  false\
           st.nearest((0.220703125, 0.107421875))   ==>  (0.10546875, 0.1005859375)\
           st.range([0.0732421875, 0.6005859375] x [0.3720703125, 0.671875])  ==>  empty\
           st.nearest((0.1201171875, 0.544921875))   ==>  (0.10546875, 0.1005859375)\
           st.contains((0.279296875, 0.390625))  ==>  false\
           st.insert(0.447265625, 0.3427734375)\
           st.insert(0.365234375, 0.0361328125)\
           st.insert(0.2265625, 0.2373046875)\
           st.insert(0.615234375, 0.310546875)\
           st.contains((0.548828125, 0.0947265625))  ==>  false\
           st.nearest((0.6181640625, 0.341796875))   ==>  (0.615234375, 0.310546875)\
           st.contains((0.70703125, 0.7568359375))  ==>  false\
           st.range([0.2734375, 0.9267578125] x [0.19921875, 0.439453125])  ==>  I I \
           st.nearest((0.634765625, 0.435546875))   ==>  (0.615234375, 0.310546875)\
           st.range([0.328125, 0.408203125] x [0.4443359375, 0.6591796875])  ==>  empty\
           st.insert(0.650390625, 0.76171875)\
           st.contains((0.6591796875, 0.8330078125))  ==>  false\
           st.nearest((0.291015625, 0.8818359375))   ==>  (0.447265625, 0.3427734375)\
\
  * 20000 calls with non-degenerate points in a 8192-by-8192 grid\
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)\
    - failed on trial 32 of 20000\
    - student   nearest()  = (0.4697265625, 0.7835693359375)\
    - reference nearest()  = (0.1788330078125, 0.9874267578125)\
    - student   distanceSquaredTo() = 0.085470974445343\
    - reference distanceSquaredTo() = 0.006281211972237\
\
  * 20000 calls with non-degenerate points in a 65536-by-65536 grid\
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)\
    - failed on trial 24 of 20000\
    - student   nearest()  = (0.2199859619140625, 0.5887603759765625)\
    - reference nearest()  = (0.8134918212890625, 0.0829315185546875)\
    - student   distanceSquaredTo() = 0.496438969857991\
    - reference distanceSquaredTo() = 0.039582850411534\
    - sequence of operations was:\
           st.insert(0.763458251953125, 0.974517822265625)\
           st.insert(0.949798583984375, 0.932159423828125)\
           st.range([0.2701263427734375, 0.9864044189453125] x [0.3282012939453125, 0.710052490234375])  ==>  empty\
           st.insert(0.2199859619140625, 0.5887603759765625)\
           st.contains((0.259979248046875, 0.6209259033203125))  ==>  false\
           st.nearest((0.5318603515625, 0.5767822265625))   ==>  (0.2199859619140625, 0.5887603759765625)\
           st.contains((0.2907562255859375, 0.5230865478515625))  ==>  false\
           st.insert(0.280792236328125, 0.7657012939453125)\
           st.contains((0.23577880859375, 0.73919677734375))  ==>  false\
           st.contains((0.1363525390625, 0.8372344970703125))  ==>  false\
           st.range([0.4543914794921875, 0.753570556640625] x [0.343902587890625, 0.3599090576171875])  ==>  empty\
           st.contains((0.7608489990234375, 0.0204925537109375))  ==>  false\
           st.contains((0.0267181396484375, 0.2865753173828125))  ==>  false\
           st.nearest((0.97991943359375, 0.772491455078125))   ==>  (0.949798583984375, 0.932159423828125)\
           st.nearest((0.3159942626953125, 0.03973388671875))   ==>  (0.2199859619140625, 0.5887603759765625)\
           st.range([0.063812255859375, 0.7197723388671875] x [0.3436126708984375, 0.9092864990234375])  ==>  K B \
           st.nearest((0.85894775390625, 0.3333282470703125))   ==>  (0.949798583984375, 0.932159423828125)\
           st.contains((0.6305694580078125, 0.2508544921875))  ==>  false\
           st.insert(0.209991455078125, 0.7227325439453125)\
           st.isEmpty()  ==>  false\
           st.nearest((0.9935760498046875, 0.709808349609375))   ==>  (0.949798583984375, 0.932159423828125)\
           st.insert(0.8134918212890625, 0.0829315185546875)\
           st.insert(0.8244781494140625, 0.5580596923828125)\
           st.nearest((0.6269989013671875, 0.0136260986328125))   ==>  (0.2199859619140625, 0.5887603759765625)\
\
==> FAILED\
\
Test 9b: check intermixed sequence of calls to insert(), isEmpty(),\
         size(), contains(), range(), and nearest() with probabilities\
         (p1, p2, p3, p4, p5, p6), respectively\
  * 20000 calls with distinct points in a 1-by-1 grid\
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)\
  * 20000 calls with distinct points in a 16-by-16 grid\
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)\
    - failed on trial 3 of 20000\
    - student   nearest()  = (0.625, 1.0)\
    - reference nearest()  = (0.625, 0.125)\
    - student   distanceSquaredTo() = 0.9765625\
    - reference distanceSquaredTo() = 0.1015625\
    - sequence of operations was:\
           st.insert(0.625, 1.0)\
           st.insert(0.625, 0.125)\
           st.nearest((0.3125, 0.0625))   ==>  (0.625, 1.0)\
\
  * 20000 calls with distinct points in a 128-by-128 grid\
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)\
    - failed on trial 96 of 20000\
    - rectangle = [0.0546875, 0.3984375] x [0.0390625, 0.46875]\
    - student   range():  T V \
    - reference range():  T V I \
\
  * 20000 calls with distinct points in a 1024-by-1024 grid\
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)\
    - failed on trial 21 of 20000\
    - student   nearest()  = (0.3857421875, 0.185546875)\
    - reference nearest()  = (0.59375, 0.7626953125)\
    - student   distanceSquaredTo() = 0.633186340332031\
    - reference distanceSquaredTo() = 0.333734512329102\
    - sequence of operations was:\
           st.isEmpty()  ==>  true\
           st.isEmpty()  ==>  true\
           st.isEmpty()  ==>  true\
           st.insert(0.3857421875, 0.185546875)\
           st.insert(0.931640625, 0.40234375)\
           st.range([0.3232421875, 0.951171875] x [0.1240234375, 0.29296875])  ==>  H \
           st.contains((0.6201171875, 0.984375))  ==>  false\
           st.nearest((0.5498046875, 0.240234375))   ==>  (0.3857421875, 0.185546875)\
           st.range([0.271484375, 0.6904296875] x [0.87109375, 0.8779296875])  ==>  empty\
           st.insert(0.80078125, 0.8466796875)\
           st.size()  ==>  3\
           st.nearest((0.78515625, 0.955078125))   ==>  (0.80078125, 0.8466796875)\
           st.contains((0.5361328125, 0.0107421875))  ==>  false\
           st.insert(0.0751953125, 0.0390625)\
           st.contains((0.2470703125, 0.6220703125))  ==>  false\
           st.contains((0.58984375, 0.13671875))  ==>  false\
           st.contains((0.4345703125, 0.37109375))  ==>  false\
           st.range([0.17578125, 0.4482421875] x [0.154296875, 0.9775390625])  ==>  H \
           st.insert(0.7880859375, 0.6005859375)\
           st.insert(0.59375, 0.7626953125)\
           st.nearest((0.0322265625, 0.8984375))   ==>  (0.3857421875, 0.185546875)\
\
  * 20000 calls with distinct points in a 8192-by-8192 grid\
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)\
    - failed on trial 7 of 20000\
    - student   nearest()  = (0.8651123046875, 0.991455078125)\
    - reference nearest()  = (0.320556640625, 0.38720703125)\
    - student   distanceSquaredTo() = 0.563018992543221\
    - reference distanceSquaredTo() = 0.372559130191803\
    - sequence of operations was:\
           st.size()  ==>  0\
           st.insert(0.8651123046875, 0.991455078125)\
           st.size()  ==>  1\
           st.insert(0.314453125, 0.916748046875)\
           st.range([0.18408203125, 0.7357177734375] x [0.2926025390625, 0.7362060546875])  ==>  empty\
           st.insert(0.320556640625, 0.38720703125)\
           st.nearest((0.91357421875, 0.24267578125))   ==>  (0.8651123046875, 0.991455078125)\
\
  * 20000 calls with distinct points in a 65536-by-65536 grid\
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)\
    - failed on trial 33 of 20000\
    - rectangle = [0.15020751953125, 0.570953369140625] x [0.658599853515625, 0.8334503173828125]\
    - student   range():  V \
    - reference range():  V A \
\
==> FAILED\
\
Test 9c: check intermixed sequence of calls to insert(), isEmpty(),\
         size(), contains(), range(), and nearest() with probabilities\
         (p1, p2, p3, p4, p5, p6), respectively\
  * 20000 calls with general points in a 1-by-1 grid\
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)\
    - failed on trial 50 of 20000\
    - student   nearest()  = (0.0, 0.0)\
    - reference nearest()  = (0.0, 1.0)\
    - student   distanceSquaredTo() = 1\
    - reference distanceSquaredTo() = 0\
\
  * 20000 calls with general points in a 16-by-16 grid\
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)\
    - failed on trial 36 of 20000\
    - student   nearest()  = (0.375, 1.0)\
    - reference nearest()  = (0.6875, 0.875)\
    - student   distanceSquaredTo() = 0.05078125\
    - reference distanceSquaredTo() = 0.015625\
\
  * 20000 calls with general points in a 128-by-128 grid\
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)\
    - failed on trial 9 of 20000\
    - student   nearest()  = (0.0390625, 0.8515625)\
    - reference nearest()  = (0.03125, 0.4765625)\
    - student   distanceSquaredTo() = 0.203125\
    - reference distanceSquaredTo() = 0.16217041015625\
    - sequence of operations was:\
           st.insert(0.0390625, 0.8515625)\
           st.insert(0.671875, 0.1015625)\
           st.range([0.3828125, 0.828125] x [0.078125, 0.296875])  ==>  I \
           st.insert(0.0546875, 0.0)\
           st.contains((0.4375, 0.46875))  ==>  false\
           st.insert(0.03125, 0.4765625)\
           st.nearest((0.6171875, 0.0234375))   ==>  (0.671875, 0.1015625)\
           st.contains((0.4296875, 0.0625))  ==>  false\
           st.nearest((0.4140625, 0.6015625))   ==>  (0.0390625, 0.8515625)\
\
  * 20000 calls with general points in a 1024-by-1024 grid\
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)\
    - failed on trial 20 of 20000\
    - rectangle = [0.5087890625, 0.998046875] x [0.3779296875, 0.802734375]\
    - student   range():  L \
    - reference range():  L Q \
    - sequence of operations was:\
           st.isEmpty()  ==>  true\
           st.isEmpty()  ==>  true\
           st.insert(0.619140625, 0.505859375)\
           st.insert(0.8466796875, 0.8203125)\
           st.range([0.8720703125, 0.8896484375] x [0.1953125, 0.490234375])  ==>  empty\
           st.insert(0.974609375, 0.2236328125)\
           st.nearest((0.1494140625, 0.7314453125))   ==>  (0.619140625, 0.505859375)\
           st.size()  ==>  3\
           st.size()  ==>  3\
           st.insert(0.0322265625, 0.5546875)\
           st.contains((0.8330078125, 0.7265625))  ==>  false\
           st.contains((0.513671875, 0.2451171875))  ==>  false\
           st.insert(0.908203125, 0.646484375)\
           st.nearest((0.748046875, 0.4150390625))   ==>  (0.619140625, 0.505859375)\
           st.nearest((0.04296875, 0.12890625))   ==>  (0.0322265625, 0.5546875)\
           st.range([0.466796875, 0.9033203125] x [0.35546875, 0.3662109375])  ==>  empty\
           st.range([0.7880859375, 0.7939453125] x [0.076171875, 0.142578125])  ==>  empty\
           st.nearest((0.3447265625, 0.826171875))   ==>  (0.0322265625, 0.5546875)\
           st.contains((0.2822265625, 0.669921875))  ==>  false\
           st.range([0.5087890625, 0.998046875] x [0.3779296875, 0.802734375])  ==>  L \
\
  * 20000 calls with general points in a 8192-by-8192 grid\
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)\
    - failed on trial 39 of 20000\
    - student   nearest()  = (0.85205078125, 0.5008544921875)\
    - reference nearest()  = (0.8035888671875, 0.5435791015625)\
    - student   distanceSquaredTo() = 0.01771368086338\
    - reference distanceSquaredTo() = 0.010282665491104\
\
  * 20000 calls with general points in a 65536-by-65536 grid\
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)\
    - failed on trial 77 of 20000\
    - rectangle = [0.3700714111328125, 0.8510894775390625] x [0.0303802490234375, 0.8294830322265625]\
    - student   range():  A W Y \
    - reference range():  A C R Y W J W Y \
\
==> FAILED\
\
Test 10: insert n random points into two different KdTree objects;\
        check that repeated calls to size(), contains(), range(),\
        and nearest() with the same arguments yield same results\
  * 10 random general points in a 4-by-4 grid\
  * 20 random general points in a 8-by-8 grid\
  * 100 random general points in a 128-by-128 grid\
  * 1000 random general points in a 65536-by-65536 grid\
==> passed\
\
\
Total: 13/27 tests passed!\
\
\
================================================================\
********************************************************************************\
*  MEMORY\
********************************************************************************\
\
Analyzing memory of Point2D\
*-----------------------------------------------------------\
Memory of Point2D object = 32 bytes\
================================================================\
\
\
\
Analyzing memory of RectHV\
*-----------------------------------------------------------\
Memory of RectHV object = 48 bytes\
================================================================\
\
\
\
Analyzing memory of PointSET\
*-----------------------------------------------------------\
Running 8 total tests.\
\
Memory usage of a PointSET with n points (including Point2D and RectHV objects).\
Maximum allowed memory is 96n + 200 bytes.\
\
                 n       student (bytes)    reference (bytes)\
--------------------------------------------------------------\
=> passed        1          240                264\
=> passed        2          336                360\
=> passed        5          624                648\
=> passed       10         1104               1128\
=> passed       25         2544               2568\
=> passed      100         9744               9768\
=> passed      400        38544              38568\
=> passed      800        76944              76968\
==> 8/8 tests passed\
\
Total: 8/8 tests passed!\
\
Estimated student   memory (bytes) = 96.00 n + 144.00  (R^2 = 1.000)\
Estimated reference memory (bytes) = 96.00 n + 168.00  (R^2 = 1.000)\
================================================================\
\
\
\
Analyzing memory of KdTree\
*-----------------------------------------------------------\
Running 8 total tests.\
\
Memory usage of a KdTree with n points (including Point2D and RectHV objects).\
Maximum allowed memory is 312n + 192 bytes.\
\
                 n       student (bytes)    reference (bytes)\
--------------------------------------------------------------\
=> passed        1          104                160\
=> passed        2          176                288\
=> passed        5          392                672\
=> passed       10          752               1312\
=> passed       25         1832               3232\
=> passed      100         7232              12832\
=> passed      400        28832              51232\
=> passed      800        57632             102432\
==> 8/8 tests passed\
\
Total: 8/8 tests passed!\
\
Estimated student   memory (bytes) = 72.00 n + 32.00  (R^2 = 1.000)\
Estimated reference memory (bytes) = 128.00 n + 32.00  (R^2 = 1.000)\
================================================================\
\
\
\
********************************************************************************\
*  TIMING\
********************************************************************************\
\
Timing PointSET\
*-----------------------------------------------------------\
Running 14 total tests.\
\
\
Inserting n points into a PointSET\
\
               n      ops per second\
----------------------------------------\
=> passed   160000    1344019         \
=> passed   320000    1446831         \
=> passed   640000    1193344         \
=> passed  1280000     988725         \
==> 4/4 tests passed\
\
Performing contains() queries after inserting n points into a PointSET\
\
               n      ops per second\
----------------------------------------\
=> passed   160000     355185         \
=> passed   320000     344006         \
=> passed   640000     290090         \
=> passed  1280000     327252         \
==> 4/4 tests passed\
\
Performing range() queries after inserting n points into a PointSET\
\
               n      ops per second\
----------------------------------------\
=> passed    10000     123990         \
=> passed    20000      93088         \
=> passed    40000      65409         \
==> 3/3 tests passed\
\
Performing nearest() queries after inserting n points into a PointSET\
\
               n      ops per second\
----------------------------------------\
=> passed    10000       4616         \
=> passed    20000       2147         \
=> passed    40000        859         \
==> 3/3 tests passed\
\
Total: 14/14 tests passed!\
\
\
================================================================\
\
\
\
Timing KdTree\
*-----------------------------------------------------------\
Running 28 total tests.\
\
\
Test 1a-d: Insert n points into a 2d tree. The table gives the average number of calls\
           to methods in RectHV and Point per call to insert().\
\
                                                                                                Point2D\
               n      ops per second       RectHV()           x()               y()             equals()\
----------------------------------------------------------------------------------------------------------------\
=> passed   160000     854679               0.0              44.3              42.3              21.6         \
=> passed   320000    1019007               0.0              45.1              43.1              22.0         \
=> passed   640000     717860               0.0              48.1              46.1              23.5         \
=> passed  1280000     669520               0.0              52.3              50.3              25.6         \
==> 4/4 tests passed\
\
\
Test 2a-h: Perform contains() queries after inserting n points into a 2d tree. The table gives\
           the average number of calls to methods in RectHV and Point per call to contains().\
\
                                                                               Point2D\
               n      ops per second       x()               y()               equals()\
-----------------------------------------------------------------------------------------------\
=> passed    10000     387439              18.5              17.5              18.0         \
=> passed    20000     397109              19.7              18.7              19.2         \
=> passed    40000     372968              21.8              20.8              21.3         \
=> passed    80000     373309              22.0              21.0              21.5         \
=> passed   160000     343098              23.2              22.2              22.7         \
=> passed   320000     309698              25.0              24.0              24.5         \
=> passed   640000     285979              25.7              24.7              25.2         \
=> passed  1280000     254805              27.2              26.2              26.7         \
==> 8/8 tests passed\
\
\
Test 3a-h: Perform range() queries after inserting n points into a 2d tree. The table gives\
           the average number of calls to methods in RectHV and Point per call to range().\
\
               n      ops per second       intersects()      contains()        x()               y()\
---------------------------------------------------------------------------------------------------------------\
=> passed    10000     257781               0.0               0.0              26.6              21.0         \
=> passed    20000     303862               0.0               0.0              28.2              23.4         \
=> passed    40000     248279               0.0               0.0              32.2              25.4         \
=> passed    80000     234157               0.0               0.0              33.5              26.5         \
=> passed   160000     195812               0.0               0.0              35.6              29.6         \
=> passed   320000     178892               0.0               0.0              32.7              26.7         \
=> passed   640000     155053               0.0               0.0              35.7              29.6         \
=> passed  1280000     111189               0.0               0.0              37.6              29.2         \
==> 8/8 tests passed\
\
\
Test 4a-h: Perform nearest() queries after inserting n points into a 2d tree. The table gives\
           the average number of calls to methods in RectHV and Point per call to nearest().\
\
                                         Point2D                 RectHV\
               n      ops per second     distanceSquaredTo()     distanceSquaredTo()        x()               y()\
------------------------------------------------------------------------------------------------------------------------\
=> passed    10000   315454                  33.0                    0.0                    17.0              16.0         \
=> passed    20000   323290                  36.4                    0.0                    18.7              17.7         \
=> passed    40000   368330                  42.4                    0.0                    21.7              20.7         \
=> passed    80000   346542                  43.9                    0.0                    22.4              21.4         \
=> passed   160000   328540                  47.5                    0.0                    24.3              23.3         \
=> passed   320000   316064                  50.1                    0.0                    25.6              24.6         \
=> passed   640000   276166                  51.2                    0.0                    26.1              25.1         \
=> passed  1280000   230327                  57.6                    0.0                    29.3              28.3         \
==> 8/8 tests passed\
\
\
\
Total: 28/28 tests passed!\
\
\
================================================================\
\
\
\
}