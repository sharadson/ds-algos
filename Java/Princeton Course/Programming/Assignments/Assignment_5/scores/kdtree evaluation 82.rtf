{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf200
{\fonttbl\f0\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red98\green98\blue98;\red255\green255\blue255;}
{\*\expandedcolortbl;;\cssrgb\c45882\c45882\c45882;\cssrgb\c100000\c100000\c100000;}
\paperw11900\paperh16840\margl1440\margr1440\vieww25360\viewh15340\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
See the Assessment Guide for information on how to interpret this report.\
\
ASSESSMENT SUMMARY\
\
Compilation:  PASSED\
API:          PASSED\
\
Spotbugs:     FAILED (1 warning)\
PMD:          FAILED (1 warning)\
Checkstyle:   PASSED\
\
Correctness:  24/35 tests passed\
Memory:       16/16 tests passed\
Timing:       42/42 tests passed\
\
Aggregate score: 81.14%\
[Compilation: 5%, API: 5%, Spotbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]\
\
ASSESSMENT DETAILS\
\
The following files were submitted:\
----------------------------------\
7.2K Jan  7 23:45 KdTree.java\
2.8K Jan  7 23:45 PointSET.java\
\
\
********************************************************************************\
*  COMPILING                                                                    \
********************************************************************************\
\
\
% javac PointSET.java\
*-----------------------------------------------------------\
\
% javac KdTree.java\
*-----------------------------------------------------------\
\
\
================================================================\
\
\
Checking the APIs of your programs.\
*-----------------------------------------------------------\
PointSET:\
\
KdTree:\
\
================================================================\
\
\
********************************************************************************\
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       \
********************************************************************************\
\
\
% spotbugs *.class\
*-----------------------------------------------------------\
L P UPM_UNCALLED_PRIVATE_METHOD UPM: The private method 'getDistanceToNode2Rect()' is never called.  At KdTree.java:[lines 219-242]\
Warnings generated: 1\
\
\
================================================================\
\
\
% pmd .\
*-----------------------------------------------------------\
KdTree.java:218: Avoid unused private methods, such as 'getDistanceToNode2Rect(Point2D,Node)'. [UnusedPrivateMethod]\
PMD ends with 1 warning.\
\
\
================================================================\
\
\
% checkstyle *.java\
*-----------------------------------------------------------\
\
% custom checkstyle checks for PointSET.java\
*-----------------------------------------------------------\
\
% custom checkstyle checks for KdTree.java\
*-----------------------------------------------------------\
\
\
================================================================\
\
\
********************************************************************************\
*  TESTING CORRECTNESS\
********************************************************************************\
\
Testing correctness of PointSET\
*-----------------------------------------------------------\
Running 8 total tests.\
\
A point in an m-by-m grid means that it is of the form (i/m, j/m),\
where i and j are integers between 0 and m\
\
Test 1: insert n random points; check size() and isEmpty() after each insertion\
        (size may be less than n because of duplicates)\
  * 5 random points in a 1-by-1 grid\
  * 50 random points in a 8-by-8 grid\
  * 100 random points in a 16-by-16 grid\
  * 1000 random points in a 128-by-128 grid\
  * 5000 random points in a 1024-by-1024 grid\
  * 50000 random points in a 65536-by-65536 grid\
==> passed\
\
Test 2: insert n random points; check contains() with random query points\
  * 1 random points in a 1-by-1 grid\
  * 10 random points in a 4-by-4 grid\
  * 20 random points in a 8-by-8 grid\
  * 10000 random points in a 128-by-128 grid\
  * 100000 random points in a 1024-by-1024 grid\
  * 100000 random points in a 65536-by-65536 grid\
==> passed\
\
Test 3: insert random points; check nearest() with random query points\
  * 10 random points in a 4-by-4 grid\
  * 15 random points in a 8-by-8 grid\
  * 20 random points in a 16-by-16 grid\
  * 100 random points in a 32-by-32 grid\
  * 10000 random points in a 65536-by-65536 grid\
==> passed\
\
Test 4: insert random points; check range() with random query rectangles\
  * 2 random points and random rectangles in a 2-by-2 grid\
  * 10 random points and random rectangles in a 4-by-4 grid\
  * 20 random points and random rectangles in a 8-by-8 grid\
  * 100 random points and random rectangles in a 16-by-16 grid\
  * 1000 random points and random rectangles in a 64-by-64 grid\
  * 10000 random points and random rectangles in a 128-by-128 grid\
==> passed\
\
Test 5: call methods before inserting any points\
 * size() and isEmpty()\
 * contains()\
 * nearest()\
 * range()\
==> passed\
\
Test 6: call methods with null argument\
  * insert()\
  * contains()\
  * range()\
  * nearest()\
==> passed\
\
Test 7: check intermixed sequence of calls to insert(), isEmpty(),\
        size(), contains(), range(), and nearest() with\
        probabilities (p1, p2, p3, p4, p5, p6, p7), respectively\
  * 10000 calls with random points in a 1-by-1 grid\
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)\
    - failed on trial 31 of 10000\
    - rectangle = [0.0, 1.0] x [1.0, 1.0]\
    - student   range():  (1.0, 0.0) (1.0, 1.0) \
    - reference range():  (1.0, 1.0) \
\
  * 10000 calls with random points in a 16-by-16 grid\
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)\
    - failed on trial 44 of 10000\
    - rectangle = [0.0, 0.875] x [0.6875, 0.875]\
    - student   range():  (0.25, 0.5) (0.5625, 0.8125) (0.625, 0.875) \
    - reference range():  (0.5625, 0.8125) (0.625, 0.875) \
\
  * 10000 calls with random points in a 128-by-128 grid\
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)\
    - failed on trial 6 of 10000\
    - rectangle = [0.1953125, 0.5859375] x [0.2265625, 0.53125]\
    - student   range():  (0.5078125, 0.203125) \
    - reference range():  empty\
    - sequence of operations was:\
           set.insert((0.5078125, 0.203125))\
           set.nearest((0.890625, 0.84375))   ==>  (0.5078125, 0.203125)\
           set.nearest((0.265625, 0.015625))   ==>  (0.5078125, 0.203125)\
           set.range([0.34375, 0.4140625] x [0.359375, 0.7578125])  ==>  empty\
           set.size()     ==>  1\
           set.range([0.1953125, 0.5859375] x [0.2265625, 0.53125])  ==>  (0.5078125, 0.203125) \
\
  * 10000 calls with random points in a 1024-by-1024 grid\
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)\
    - failed on trial 22 of 10000\
    - rectangle = [0.541015625, 0.8994140625] x [0.0458984375, 0.9697265625]\
    - student   range():  empty\
    - reference range():  (0.744140625, 0.1005859375) (0.802734375, 0.326171875) (0.7275390625, 0.9091796875) \
    - sequence of operations was:\
           set.size()     ==>  0\
           set.isEmpty()  ==>  true\
           set.isEmpty()  ==>  true\
           set.size()     ==>  0\
           set.insert((0.1845703125, 0.466796875))\
           set.range([0.21484375, 0.3701171875] x [0.068359375, 0.892578125])  ==>  empty\
           set.insert((0.7275390625, 0.9091796875))\
           set.nearest((0.3212890625, 0.34375))   ==>  (0.1845703125, 0.466796875)\
           set.range([0.88671875, 0.9814453125] x [0.142578125, 0.263671875])  ==>  empty\
           set.insert((0.0400390625, 0.3408203125))\
           set.insert((0.1044921875, 0.63671875))\
           set.nearest((0.228515625, 0.673828125))   ==>  (0.1044921875, 0.63671875)\
           set.insert((0.802734375, 0.326171875))\
           set.insert((0.009765625, 0.384765625))\
           set.size()     ==>  6\
           set.insert((0.744140625, 0.1005859375))\
           set.range([0.4091796875, 0.7080078125] x [0.107421875, 0.3359375])  ==>  empty\
           set.insert((0.2734375, 0.75390625))\
           set.isEmpty()  ==>  false\
           set.insert((0.9462890625, 0.775390625))\
           set.range([0.8662109375, 0.91796875] x [0.73046875, 0.88671875])  ==>  empty\
           set.range([0.541015625, 0.8994140625] x [0.0458984375, 0.9697265625])  ==>  empty\
\
  * 10000 calls with random points in a 8192-by-8192 grid\
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)\
    - failed on trial 45 of 10000\
    - rectangle = [0.382080078125, 0.922607421875] x [0.2132568359375, 0.864013671875]\
    - student   range():  (0.8046875, 0.2010498046875) (0.5643310546875, 0.2716064453125) (0.6907958984375, 0.3480224609375) (0.7967529296875, 0.427001953125) (0.6451416015625, 0.4542236328125) (0.659912109375, 0.7392578125) \
    - reference range():  (0.5643310546875, 0.2716064453125) (0.6907958984375, 0.3480224609375) (0.7967529296875, 0.427001953125) (0.6451416015625, 0.4542236328125) (0.659912109375, 0.7392578125) \
\
  * 10000 calls with random points in a 65536-by-65536 grid\
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)\
    - failed on trial 9 of 10000\
    - rectangle = [0.0036773681640625, 0.9174346923828125] x [0.549102783203125, 0.9239959716796875]\
    - student   range():  (0.836395263671875, 0.4392852783203125) \
    - reference range():  empty\
    - sequence of operations was:\
           set.insert((0.836395263671875, 0.4392852783203125))\
           set.insert((0.477813720703125, 0.9822235107421875))\
           set.nearest((0.9071197509765625, 0.13800048828125))   ==>  (0.836395263671875, 0.4392852783203125)\
           set.contains((0.4079437255859375, 0.66217041015625))  ==>  false\
           set.range([0.01861572265625, 0.136962890625] x [0.2567901611328125, 0.7344207763671875])  ==>  empty\
           set.nearest((0.1907958984375, 0.5073394775390625))   ==>  (0.477813720703125, 0.9822235107421875)\
           set.contains((0.5118560791015625, 0.9769287109375))  ==>  false\
           set.nearest((0.2128753662109375, 0.109619140625))   ==>  (0.836395263671875, 0.4392852783203125)\
           set.range([0.0036773681640625, 0.9174346923828125] x [0.549102783203125, 0.9239959716796875])  ==>  (0.836395263671875, 0.4392852783203125) \
\
==> FAILED\
\
Test 8: check that two PointSET objects can be created at the same time\
==> passed\
\
\
Total: 7/8 tests passed!\
\
\
================================================================\
Testing correctness of KdTree\
*-----------------------------------------------------------\
Running 27 total tests.\
\
In the tests below, we consider three classes of points and rectangles.\
\
  * Non-degenerate points: no two points (or rectangles) share either an\
                           x-coordinate or a y-coordinate\
\
  * Distinct points:       no two points (or rectangles) share both an\
                           x-coordinate and a y-coordinate\
\
  * General points:        no restrictions on the x-coordinates or y-coordinates\
                           of the points (or rectangles)\
\
A point in an m-by-m grid means that it is of the form (i/m, j/m),\
where i and j are integers between 0 and m (inclusive).\
\
Test 1a: insert points from file; check size() and isEmpty() after each insertion\
  * input0.txt\
  * input1.txt\
  * input5.txt\
  * input10.txt\
==> passed\
\
Test 1b: insert non-degenerate points; check size() and isEmpty() after each insertion\
  * 1 random non-degenerate points in a 1-by-1 grid\
  * 5 random non-degenerate points in a 8-by-8 grid\
  * 10 random non-degenerate points in a 16-by-16 grid\
  * 50 random non-degenerate points in a 128-by-128 grid\
  * 500 random non-degenerate points in a 1024-by-1024 grid\
  * 50000 random non-degenerate points in a 65536-by-65536 grid\
==> passed\
\
Test 1c: insert distinct points; check size() and isEmpty() after each insertion\
  * 1 random distinct points in a 1-by-1 grid\
  * 10 random distinct points in a 8-by-8 grid\
  * 20 random distinct points in a 16-by-16 grid\
  * 10000 random distinct points in a 128-by-128 grid\
  * 100000 random distinct points in a 1024-by-1024 grid\
  * 100000 random distinct points in a 65536-by-65536 grid\
==> passed\
\
Test 1d: insert general points; check size() and isEmpty() after each insertion\
  * 5 random general points in a 1-by-1 grid\
  * 10 random general points in a 4-by-4 grid\
  * 50 random general points in a 8-by-8 grid\
  * 100000 random general points in a 16-by-16 grid\
  * 100000 random general points in a 128-by-128 grid\
  * 100000 random general points in a 1024-by-1024 grid\
==> passed\
\
Test 2a: insert points from file; check contains() with random query points\
  * input0.txt\
  * input1.txt\
  * input5.txt\
  * input10.txt\
==> passed\
\
Test 2b: insert non-degenerate points; check contains() with random query points\
  * 1 random non-degenerate points in a 1-by-1 grid\
  * 5 random non-degenerate points in a 8-by-8 grid\
  * 10 random non-degenerate points in a 16-by-16 grid\
  * 20 random non-degenerate points in a 32-by-32 grid\
  * 500 random non-degenerate points in a 1024-by-1024 grid\
  * 10000 random non-degenerate points in a 65536-by-65536 grid\
==> passed\
\
Test 2c: insert distinct points; check contains() with random query points\
  * 1 random distinct points in a 1-by-1 grid\
  * 10 random distinct points in a 4-by-4 grid\
  * 20 random distinct points in a 8-by-8 grid\
  * 10000 random distinct points in a 128-by-128 grid\
  * 100000 random distinct points in a 1024-by-1024 grid\
  * 100000 random distinct points in a 65536-by-65536 grid\
==> passed\
\
Test 2d: insert general points; check contains() with random query points\
  * 10000 random general points in a 1-by-1 grid\
  * 10000 random general points in a 16-by-16 grid\
  * 10000 random general points in a 128-by-128 grid\
  * 10000 random general points in a 1024-by-1024 grid\
==> passed\
\
Test 3a: insert points from file; check range() with random query rectangles\
  * input0.txt\
  * input1.txt\
  * input5.txt\
  * input10.txt\
==> passed\
\
Test 3b: insert non-degenerate points; check range() with random query rectangles\
  * 1 random non-degenerate points and random rectangles in a 2-by-2 grid\
  * 5 random non-degenerate points and random rectangles in a 8-by-8 grid\
  * 10 random non-degenerate points and random rectangles in a 16-by-16 grid\
  * 20 random non-degenerate points and random rectangles in a 32-by-32 grid\
  * 500 random non-degenerate points and random rectangles in a 1024-by-1024 grid\
    - failed on trial 1 of 10000\
    - query rectangle = [0.0966796875, 0.525390625] x [0.705078125, 0.984375]\
    - student   range():  B I S I A G B T F W P I Y S E O M X S R F U R G I V ...\
    - reference range():  B I S I A G B B T F W P I Y S E O M X S R F U R C T ...\
\
  * 10000 random non-degenerate points and random rectangles in a 65536-by-65536 grid\
    - failed on trial 1 of 10000\
    - query rectangle = [0.283111572265625, 0.4557342529296875] x [0.1165618896484375, 0.161956787109375]\
    - student   range():  X F G S X O H O U M Y O J G B W S E M Q N V Y N L B ...\
    - reference range():  X F G S X O H O U M Y L O J G B W S Y P B G E M Q N ...\
\
==> FAILED\
\
Test 3c: insert distinct points; check range() with random query rectangles\
  * 2 random distinct points and random rectangles in a 2-by-2 grid\
  * 10 random distinct points and random rectangles in a 4-by-4 grid\
  * 20 random distinct points and random rectangles in a 8-by-8 grid\
  * 100 random distinct points and random rectangles in a 16-by-16 grid\
    - failed on trial 1 of 10000\
    - query rectangle = [0.5625, 0.8125] x [0.0625, 1.0]\
    - student   range():  E E S M I T D L K Z O B U R A R E H V G U E Q V \
    - reference range():  E E S M I T D L K Z O B U R A R E H V T G K O U E Q ...\
\
  * 1000 random distinct points and random rectangles in a 64-by-64 grid\
    - failed on trial 1 of 10000\
    - query rectangle = [0.234375, 0.328125] x [0.28125, 0.84375]\
    - student   range():  A \
    - reference range():  A A D C G C L L W D O G J U A A C V L L W Z G X E S ...\
\
  * 10000 random distinct points and random rectangles in a 128-by-128 grid\
    - failed on trial 1 of 10000\
    - query rectangle = [0.078125, 0.546875] x [0.3046875, 0.8046875]\
    - student   range():  A G O I S N O C K W N T Q Q V K D R N K T J Q G M P ...\
    - reference range():  A U F L N X S Z R P E V B V W U S O J G F Q Z X X K ...\
\
==> FAILED\
\
Test 3d: insert general points; check range() with random query rectangles\
  * 5000 random general points and random rectangles in a 2-by-2 grid\
  * 5000 random general points and random rectangles in a 16-by-16 grid\
    - failed on trial 1 of 10000\
    - query rectangle = [0.125, 0.3125] x [0.0625, 1.0]\
    - student   range():  V O M T M A T D R D R B H J \
    - reference range():  V O M T M A T D R D R B H J H L W S T O A T P D Y Y ...\
\
  * 5000 random general points and random rectangles in a 128-by-128 grid\
    - failed on trial 1 of 10000\
    - query rectangle = [0.09375, 0.7109375] x [0.515625, 0.7578125]\
    - student   range():  U M O I K A G K T N W H Z O S J S R I V B Y T O C H ...\
    - reference range():  U M O I K A G K T N W H Z O S J S R I V B Y T O C H ...\
\
  * 5000 random general points and random rectangles in a 1024-by-1024 grid\
    - failed on trial 1 of 10000\
    - query rectangle = [0.296875, 0.8173828125] x [0.0234375, 0.5732421875]\
    - student   range():  A X S C N I J D F W T J F J S X A R A J K B O R G J ...\
    - reference range():  A X S C N I J D F W T J F J S X A R J S A J B V G O ...\
\
==> FAILED\
\
Test 3e: insert random points; check range() with tiny rectangles\
         enclosing each point\
  * 5 tiny rectangles and 5 general points in a 2-by-2 grid\
  * 10 tiny rectangles and 10 general points in a 4-by-4 grid\
  * 20 tiny rectangles and 20 general points in a 8-by-8 grid\
  * 5000 tiny rectangles and 5000 general points in a 128-by-128 grid\
  * 5000 tiny rectangles and 5000 general points in a 1024-by-1024 grid\
  * 5000 tiny rectangles and 5000 general points in a 65536-by-65536 grid\
==> passed\
\
Test 4a: insert points from file; check range() with random query rectangles\
         and check traversal of kd-tree\
  * input5.txt\
  * input10.txt\
    - student range() returns correct set of points\
    - student   range():  D \
    - reference range():  D \
    - performs incorrect traversal of kd-tree during call to range()\
    - query rectangle = [0.07, 0.38] x [0.17, 0.47]\
    - sequence of points inserted: \
      A  0.372 0.497\
      B  0.564 0.413\
      C  0.226 0.577\
      D  0.144 0.179\
      E  0.083 0.51\
      F  0.32 0.708\
      G  0.417 0.362\
      H  0.862 0.825\
      I  0.785 0.725\
      J  0.499 0.208\
    - student kd-tree nodes involved in calls to Point2D methods:\
      A C D E B G \
    - reference kd-tree nodes involved in calls to Point2D methods:\
      A C D E B G H I \
    - failed on trial 2 of 1000\
\
==> FAILED\
\
Test 4b: insert non-degenerate points; check range() with random query rectangles\
         and check traversal of kd-tree\
  * 3 random non-degenerate points and 1000 random rectangles in a 4-by-4 grid\
  * 6 random non-degenerate points and 1000 random rectangles in a 8-by-8 grid\
  * 10 random non-degenerate points and 1000 random rectangles in a 16-by-16 grid\
    - student range() returns wrong set of points\
    - student   range():  D \
    - reference range():  D F \
    - performs incorrect traversal of kd-tree during call to range()\
    - query rectangle = [0.25, 0.625] x [0.3125, 0.8125]\
    - sequence of points inserted: \
      A  0.8125 0.0\
      B  1.0 1.0\
      C  0.4375 0.9375\
      D  0.5 0.4375\
      E  0.6875 0.375\
      F  0.5625 0.5625\
      G  0.875 0.6875\
      H  0.1875 0.125\
      I  0.125 0.0625\
      J  0.9375 0.5\
    - student kd-tree nodes involved in calls to Point2D methods:\
      A C D H E \
    - reference kd-tree nodes involved in calls to Point2D methods:\
      A C D H E F \
    - failed on trial 1 of 1000\
\
  * 20 random non-degenerate points and 1000 random rectangles in a 32-by-32 grid\
    - student range() returns correct set of points\
    - student   range():  N Q \
    - reference range():  N Q \
    - performs incorrect traversal of kd-tree during call to range()\
    - query rectangle = [0.46875, 0.78125] x [0.03125, 0.53125]\
    - sequence of points inserted: \
      A  0.375 0.65625\
      B  0.1875 0.34375\
      C  0.09375 0.1875\
      D  0.3125 0.5625\
      E  0.25 0.46875\
      F  1.0 0.8125\
      G  0.125 0.9375\
      H  0.4375 0.90625\
      I  0.9375 0.4375\
      J  0.21875 0.28125\
      K  0.28125 0.0625\
      L  0.90625 0.84375\
      M  0.5625 1.0\
      N  0.625 0.5\
      O  0.59375 0.59375\
      P  0.0 0.875\
      Q  0.71875 0.15625\
      R  0.75 0.6875\
      S  0.0625 0.40625\
      T  0.5 0.625\
    - student kd-tree nodes involved in calls to Point2D methods:\
      A F I N Q O T \
    - reference kd-tree nodes involved in calls to Point2D methods:\
      A F I N Q O T R \
    - failed on trial 3 of 1000\
\
  * 30 random non-degenerate points and 1000 random rectangles in a 64-by-64 grid\
    - student range() returns correct set of points\
    - student   range():  A D M Y T \
    - reference range():  A D M Y T \
    - performs incorrect traversal of kd-tree during call to range()\
    - query rectangle = [0.28125, 0.5] x [0.3125, 0.890625]\
    - number of entries in student   solution: 19\
    - number of entries in reference solution: 20\
    - 1 missing entry in student solution:\
      '(0.34375, 0.140625)'\
\
    - failed on trial 2 of 1000\
\
==> FAILED\
\
Test 5a: insert points from file; check nearest() with random query points\
  * input0.txt\
  * input1.txt\
  * input5.txt\
  * input10.txt\
==> passed\
\
Test 5b: insert non-degenerate points; check nearest() with random query points\
  * 5 random non-degenerate points in a 8-by-8 grid\
  * 10 random non-degenerate points in a 16-by-16 grid\
  * 20 random non-degenerate points in a 32-by-32 grid\
  * 30 random non-degenerate points in a 64-by-64 grid\
  * 10000 random non-degenerate points in a 65536-by-65536 grid\
==> passed\
\
Test 5c: insert distinct points; check nearest() with random query points\
  * 10 random distinct points in a 4-by-4 grid\
  * 15 random distinct points in a 8-by-8 grid\
  * 20 random distinct points in a 16-by-16 grid\
  * 100 random distinct points in a 32-by-32 grid\
  * 10000 random distinct points in a 65536-by-65536 grid\
==> passed\
\
Test 5d: insert general points; check nearest() with random query points\
  * 10000 random general points in a 16-by-16 grid\
  * 10000 random general points in a 128-by-128 grid\
  * 10000 random general points in a 1024-by-1024 grid\
==> passed\
\
Test 6a: insert points from file; check nearest() with random query points\
         and check traversal of kd-tree\
  * input5.txt\
    - student   nearest() = (0.7, 0.2)\
    - reference nearest() = (0.7, 0.2)\
    - performs incorrect traversal of kd-tree during call to nearest()\
    - query point = (0.75, 0.02)\
    - sequence of points inserted: \
      A  0.7 0.2\
      B  0.5 0.4\
      C  0.2 0.3\
      D  0.4 0.7\
      E  0.9 0.6\
    - student sequence of kd-tree nodes involved in calls to Point2D methods:\
      A E B D C \
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:\
      A E B C \
    - failed on trial 2 of 1000\
\
  * input10.txt\
    - student   nearest() = (0.32, 0.708)\
    - reference nearest() = (0.32, 0.708)\
    - performs incorrect traversal of kd-tree during call to nearest()\
    - query point = (0.13, 0.96)\
    - sequence of points inserted: \
      A  0.372 0.497\
      B  0.564 0.413\
      C  0.226 0.577\
      D  0.144 0.179\
      E  0.083 0.51\
      F  0.32 0.708\
      G  0.417 0.362\
      H  0.862 0.825\
      I  0.785 0.725\
      J  0.499 0.208\
    - student sequence of kd-tree nodes involved in calls to Point2D methods:\
      A C F B H I G J \
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:\
      A C F B H I \
    - failed on trial 7 of 1000\
\
==> FAILED\
\
Test 6b: insert non-degenerate points; check nearest() with random query points\
         and check traversal of kd-tree\
  * 5 random non-degenerate points in a 8-by-8 grid\
    - student   nearest() = (1.0, 0.375)\
    - reference nearest() = (1.0, 0.375)\
    - performs incorrect traversal of kd-tree during call to nearest()\
    - do not compute the distance between the query point and the point in a node\
      if the closest point discovered so far is closer than the distance between\
      the query point and the rectangle corresponding to the node\
    - failed on trial 4 of 1000\
\
  * 10 random non-degenerate points in a 16-by-16 grid\
    - student   nearest() = (0.875, 0.3125)\
    - reference nearest() = (0.875, 0.3125)\
    - performs incorrect traversal of kd-tree during call to nearest()\
    - query point = (0.75, 0.0625)\
    - sequence of points inserted: \
      A  0.875 0.3125\
      B  0.25 0.1875\
      C  0.4375 1.0\
      D  0.1875 0.5625\
      E  0.375 0.75\
      F  1.0 0.375\
      G  0.8125 0.8125\
      H  0.0 0.125\
      I  0.3125 0.25\
      J  0.6875 0.6875\
    - student sequence of kd-tree nodes involved in calls to Point2D methods:\
      A B H C D E I G J F \
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:\
      A B H C G J F \
    - failed on trial 2 of 1000\
\
  * 20 random non-degenerate points in a 32-by-32 grid\
    - student   nearest() = (0.78125, 0.0)\
    - reference nearest() = (0.78125, 0.0)\
    - performs incorrect traversal of kd-tree during call to nearest()\
    - query point = (0.96875, 0.09375)\
    - sequence of points inserted: \
      A  0.8125 0.4375\
      B  0.25 0.90625\
      C  0.40625 0.71875\
      D  0.4375 0.8125\
      E  0.09375 0.84375\
      F  1.0 0.5\
      G  0.21875 1.0\
      H  0.1875 0.375\
      I  0.0 0.46875\
      J  0.5 0.3125\
      K  0.78125 0.0\
      L  0.59375 0.1875\
      M  0.03125 0.03125\
      N  0.375 0.65625\
      O  0.46875 0.59375\
      P  0.6875 0.125\
      Q  0.90625 0.9375\
      R  0.15625 0.0625\
      S  0.125 0.96875\
      T  0.84375 0.5625\
    - student sequence of kd-tree nodes involved in calls to Point2D methods:\
      A F Q T B G S C E H I M R N D J O K L P \
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:\
      A F B C D J K L P \
    - failed on trial 1 of 1000\
\
  * 30 random non-degenerate points in a 64-by-64 grid\
    - student   nearest() = (0.03125, 0.78125)\
    - reference nearest() = (0.03125, 0.78125)\
    - performs incorrect traversal of kd-tree during call to nearest()\
    - number of student   entries = 24\
    - number of reference entries = 18\
    - entry 9 of the two sequences are not equal\
    - student   entry 9 = (0.34375, 0.125)\
    - reference entry 9 = (0.203125, 0.421875)\
    - failed on trial 4 of 1000\
\
  * 50 random non-degenerate points in a 128-by-128 grid\
    - student   nearest() = (0.703125, 0.84375)\
    - reference nearest() = (0.703125, 0.84375)\
    - performs incorrect traversal of kd-tree during call to nearest()\
    - number of student   entries = 15\
    - number of reference entries = 14\
    - entry 11 of the two sequences are not equal\
    - student   entry 11 = (0.875, 0.4921875)\
    - reference entry 11 = (0.703125, 0.84375)\
    - failed on trial 1 of 1000\
\
  * 1000 random non-degenerate points in a 2048-by-2048 grid\
    - student   nearest() = (0.8212890625, 0.13427734375)\
    - reference nearest() = (0.8212890625, 0.13427734375)\
    - performs incorrect traversal of kd-tree during call to nearest()\
    - number of student   entries = 16\
    - number of reference entries = 14\
    - entry 13 of the two sequences are not equal\
    - student   entry 13 = (0.7646484375, 0.1240234375)\
    - reference entry 13 = (0.845703125, 0.18505859375)\
    - failed on trial 3 of 1000\
\
==> FAILED\
\
Test 7: check with no points\
  * size() and isEmpty()\
  * contains()\
  * nearest()\
  * range()\
==> passed\
\
Test 8: check that the specified exception is thrown with null arguments\
  * argument to insert() is null\
  * argument to contains() is null\
  * argument to range() is null\
  * argument to nearest() is null\
==> passed\
\
Test 9a: check intermixed sequence of calls to insert(), isEmpty(),\
         size(), contains(), range(), and nearest() with probabilities\
         (p1, p2, p3, p4, p5, p6), respectively\
  * 20000 calls with non-degenerate points in a 1-by-1 grid\
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)\
  * 20000 calls with non-degenerate points in a 16-by-16 grid\
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)\
  * 20000 calls with non-degenerate points in a 128-by-128 grid\
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)\
    - failed on trial 147 of 20000\
    - rectangle = [0.0859375, 0.9921875] x [0.5859375, 0.7578125]\
    - student   range():  T V Y K Z S \
    - reference range():  T V Y K Z S W G \
\
  * 20000 calls with non-degenerate points in a 1024-by-1024 grid\
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)\
    - failed on trial 98 of 20000\
    - rectangle = [0.759765625, 0.888671875] x [0.18359375, 0.4345703125]\
    - student   range():  empty\
    - reference range():  C \
\
  * 20000 calls with non-degenerate points in a 8192-by-8192 grid\
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)\
    - failed on trial 48 of 20000\
    - rectangle = [0.159912109375, 0.8743896484375] x [0.2314453125, 0.694580078125]\
    - student   range():  V \
    - reference range():  V H D T L \
\
  * 20000 calls with non-degenerate points in a 65536-by-65536 grid\
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)\
    - failed on trial 113 of 20000\
    - rectangle = [0.2805023193359375, 0.417572021484375] x [0.4267120361328125, 0.6587982177734375]\
    - student   range():  empty\
    - reference range():  X \
\
==> FAILED\
\
Test 9b: check intermixed sequence of calls to insert(), isEmpty(),\
         size(), contains(), range(), and nearest() with probabilities\
         (p1, p2, p3, p4, p5, p6), respectively\
  * 20000 calls with distinct points in a 1-by-1 grid\
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)\
  * 20000 calls with distinct points in a 16-by-16 grid\
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)\
    - failed on trial 83 of 20000\
    - rectangle = [0.125, 0.75] x [0.0, 0.625]\
    - student   range():  K D I D Q N G J C Y \
    - reference range():  K D I D Q N P G J C Y F \
\
  * 20000 calls with distinct points in a 128-by-128 grid\
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)\
    - failed on trial 46 of 20000\
    - rectangle = [0.3046875, 0.9765625] x [0.3359375, 0.8515625]\
    - student   range():  H F D \
    - reference range():  H F D G \
\
  * 20000 calls with distinct points in a 1024-by-1024 grid\
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)\
    - failed on trial 111 of 20000\
    - rectangle = [0.150390625, 0.650390625] x [0.03515625, 0.412109375]\
    - student   range():  T D \
    - reference range():  T D N U P C Y \
\
  * 20000 calls with distinct points in a 8192-by-8192 grid\
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)\
    - failed on trial 113 of 20000\
    - rectangle = [0.039794921875, 0.6695556640625] x [0.2052001953125, 0.902587890625]\
    - student   range():  A J J S T C O P Y \
    - reference range():  A J J S D T C R O P Y O \
\
  * 20000 calls with distinct points in a 65536-by-65536 grid\
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)\
    - failed on trial 59 of 20000\
    - rectangle = [0.085968017578125, 0.85009765625] x [0.52740478515625, 0.63385009765625]\
    - student   range():  empty\
    - reference range():  O \
\
==> FAILED\
\
Test 9c: check intermixed sequence of calls to insert(), isEmpty(),\
         size(), contains(), range(), and nearest() with probabilities\
         (p1, p2, p3, p4, p5, p6), respectively\
  * 20000 calls with general points in a 1-by-1 grid\
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)\
  * 20000 calls with general points in a 16-by-16 grid\
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)\
    - failed on trial 97 of 20000\
    - rectangle = [0.1875, 0.3125] x [0.1875, 0.875]\
    - student   range():  Z \
    - reference range():  Z W E S \
\
  * 20000 calls with general points in a 128-by-128 grid\
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)\
    - failed on trial 102 of 20000\
    - rectangle = [0.015625, 0.5625] x [0.078125, 0.3828125]\
    - student   range():  P B I Z \
    - reference range():  P B I Z R \
\
  * 20000 calls with general points in a 1024-by-1024 grid\
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)\
    - failed on trial 61 of 20000\
    - rectangle = [0.3466796875, 0.88671875] x [0.28125, 0.7001953125]\
    - student   range():  Q H H \
    - reference range():  Q I H H \
\
  * 20000 calls with general points in a 8192-by-8192 grid\
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)\
    - failed on trial 132 of 20000\
    - rectangle = [0.03759765625, 0.4842529296875] x [0.0555419921875, 0.2298583984375]\
    - student   range():  U A \
    - reference range():  U A Z \
\
  * 20000 calls with general points in a 65536-by-65536 grid\
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)\
    - failed on trial 108 of 20000\
    - rectangle = [0.621063232421875, 0.8254852294921875] x [0.32861328125, 0.834991455078125]\
    - student   range():  N V U \
    - reference range():  N V U L \
\
==> FAILED\
\
Test 10: insert n random points into two different KdTree objects;\
        check that repeated calls to size(), contains(), range(),\
        and nearest() with the same arguments yield same results\
  * 10 random general points in a 4-by-4 grid\
  * 20 random general points in a 8-by-8 grid\
  * 100 random general points in a 128-by-128 grid\
  * 1000 random general points in a 65536-by-65536 grid\
==> passed\
\
\
Total: 17/27 tests passed!\
\
\
================================================================\
********************************************************************************\
*  MEMORY\
********************************************************************************\
\
Analyzing memory of Point2D\
*-----------------------------------------------------------\
Memory of Point2D object = 32 bytes\
================================================================\
\
\
\
Analyzing memory of RectHV\
*-----------------------------------------------------------\
Memory of RectHV object = 48 bytes\
================================================================\
\
\
\
Analyzing memory of PointSET\
*-----------------------------------------------------------\
Running 8 total tests.\
\
Memory usage of a PointSET with n points (including Point2D and RectHV objects).\
Maximum allowed memory is 96n + 200 bytes.\
\
                 n       student (bytes)    reference (bytes)\
--------------------------------------------------------------\
=> passed        1          240                264\
=> passed        2          336                360\
=> passed        5          624                648\
=> passed       10         1104               1128\
=> passed       25         2544               2568\
=> passed      100         9744               9768\
=> passed      400        38544              38568\
=> passed      800        76944              76968\
==> 8/8 tests passed\
\
Total: 8/8 tests passed!\
\
Estimated student   memory (bytes) = 96.00 n + 144.00  (R^2 = 1.000)\
Estimated reference memory (bytes) = 96.00 n + 168.00  (R^2 = 1.000)\
================================================================\
\
\
\
Analyzing memory of KdTree\
*-----------------------------------------------------------\
Running 8 total tests.\
\
Memory usage of a KdTree with n points (including Point2D and RectHV objects).\
Maximum allowed memory is 312n + 192 bytes.\
\
                 n       student (bytes)    reference (bytes)\
--------------------------------------------------------------\
=> passed        1          160                160\
=> passed        2          288                288\
=> passed        5          672                672\
=> passed       10         1312               1312\
=> passed       25         3232               3232\
=> passed      100        12832              12832\
=> passed      400        51232              51232\
=> passed      800       102432             102432\
==> 8/8 tests passed\
\
Total: 8/8 tests passed!\
\
Estimated student   memory (bytes) = 128.00 n + 32.00  (R^2 = 1.000)\
Estimated reference memory (bytes) = 128.00 n + 32.00  (R^2 = 1.000)\
================================================================\
\
\
\
********************************************************************************\
*  TIMING\
********************************************************************************\
\
Timing PointSET\
*-----------------------------------------------------------\
Running 14 total tests.\
\
\
Inserting n points into a PointSET\
\
               n      ops per second\
----------------------------------------\
=> passed   160000    1170572         \
=> passed   320000    1149685         \
=> passed   640000    1035706         \
=> passed  1280000     835431         \
==> 4/4 tests passed\
\
Performing contains() queries after inserting n points into a PointSET\
\
               n      ops per second\
----------------------------------------\
=> passed   160000     306219         \
=> passed   320000     285052         \
=> passed   640000     233086         \
=> passed  1280000     234651         \
==> 4/4 tests passed\
\
Performing range() queries after inserting n points into a PointSET\
\
               n      ops per second\
----------------------------------------\
=> passed    10000     145921         \
=> passed    20000      79408         \
=> passed    40000      63104         \
==> 3/3 tests passed\
\
Performing nearest() queries after inserting n points into a PointSET\
\
               n      ops per second\
----------------------------------------\
=> passed    10000       4509         \
=> passed    20000       2047         \
=> passed    40000        852         \
==> 3/3 tests passed\
\
Total: 14/14 tests passed!\
\
\
================================================================\
\
\
\
Timing KdTree\
*-----------------------------------------------------------\
Running 28 total tests.\
\
\
Test 1a-d: Insert n points into a 2d tree. The table gives the average number of calls\
           to methods in RectHV and Point per call to insert().\
\
                                                                                                Point2D\
               n      ops per second       RectHV()           x()               y()             equals()\
----------------------------------------------------------------------------------------------------------------\
=> passed   160000     701378               1.0              44.8              42.8              21.6         \
=> passed   320000     829848               1.0              45.6              43.6              22.0         \
=> passed   640000     617069               1.0              48.6              46.6              23.5         \
=> passed  1280000     549272               1.0              52.8              50.8              25.6         \
==> 4/4 tests passed\
\
\
Test 2a-h: Perform contains() queries after inserting n points into a 2d tree. The table gives\
           the average number of calls to methods in RectHV and Point per call to contains().\
\
                                                                               Point2D\
               n      ops per second       x()               y()               equals()\
-----------------------------------------------------------------------------------------------\
=> passed    10000     390150              18.5              17.5              18.0         \
=> passed    20000     391369              19.7              18.7              19.2         \
=> passed    40000     379983              21.8              20.8              21.3         \
=> passed    80000     364156              22.0              21.0              21.5         \
=> passed   160000     345441              23.2              22.2              22.7         \
=> passed   320000     307868              25.0              24.0              24.5         \
=> passed   640000     274118              25.7              24.7              25.2         \
=> passed  1280000     248190              27.2              26.2              26.7         \
==> 8/8 tests passed\
\
\
Test 3a-h: Perform range() queries after inserting n points into a 2d tree. The table gives\
           the average number of calls to methods in RectHV and Point per call to range().\
\
               n      ops per second       intersects()      contains()        x()               y()\
---------------------------------------------------------------------------------------------------------------\
=> passed    10000     239858               0.0               0.0              23.9              18.9         \
=> passed    20000     251022               0.0               0.0              25.1              20.7         \
=> passed    40000     219396               0.0               0.0              28.1              22.5         \
=> passed    80000     213145               0.0               0.0              29.0              23.3         \
=> passed   160000     196905               0.0               0.0              30.7              25.5         \
=> passed   320000     171751               0.0               0.0              28.8              23.6         \
=> passed   640000     149372               0.0               0.0              30.7              25.6         \
=> passed  1280000     120569               0.0               0.0              32.1              25.5         \
==> 8/8 tests passed\
\
\
Test 4a-h: Perform nearest() queries after inserting n points into a 2d tree. The table gives\
           the average number of calls to methods in RectHV and Point per call to nearest().\
\
                                         Point2D                 RectHV\
               n      ops per second     distanceSquaredTo()     distanceSquaredTo()        x()               y()\
------------------------------------------------------------------------------------------------------------------------\
=> passed    10000   220742                 104.2                   26.8                   103.1             101.5         \
=> passed    20000   200612                 119.7                   30.8                   118.5             116.5         \
=> passed    40000   161635                 146.8                   37.7                   145.4             143.0         \
=> passed    80000   146363                 158.2                   40.5                   155.0             154.7         \
=> passed   160000   130087                 179.6                   45.8                   178.0             174.5         \
=> passed   320000    92901                 182.3                   47.0                   179.9             178.4         \
=> passed   640000    56806                 205.2                   52.1                   201.1             199.7         \
=> passed  1280000    53348                 237.3                   60.2                   233.2             229.8         \
==> 8/8 tests passed\
\
\
\
Total: 28/28 tests passed!\
\
\
================================================================\
\
\
\
}