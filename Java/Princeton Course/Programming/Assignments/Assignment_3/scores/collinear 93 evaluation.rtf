{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf600
{\fonttbl\f0\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red98\green98\blue98;\red255\green255\blue255;}
{\*\expandedcolortbl;;\cssrgb\c45882\c45882\c45882;\cssrgb\c100000\c100000\c100000;}
\paperw11900\paperh16840\margl1440\margr1440\vieww38200\viewh21600\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
See the Assessment Guide for information on how to interpret this report.\
\
ASSESSMENT SUMMARY\
\
Compilation:  PASSED\
API:          PASSED\
\
Spotbugs:     FAILED (2 warnings)\
PMD:          FAILED (2 warnings)\
Checkstyle:   FAILED (0 errors, 79 warnings)\
\
Correctness:  39/41 tests passed\
Memory:       1/1 tests passed\
Timing:       31/41 tests passed\
\
Aggregate score: 92.20%\
[Compilation: 5%, API: 5%, Spotbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]\
\
ASSESSMENT DETAILS\
\
The following files were submitted:\
----------------------------------\
3.1K Dec 27 01:17 BruteCollinearPoints.java\
3.4K Dec 27 01:17 FastCollinearPoints.java\
3.9K Dec 27 01:17 Point.java\
\
\
********************************************************************************\
*  COMPILING                                                                    \
********************************************************************************\
\
\
% javac Point.java\
*-----------------------------------------------------------\
\
% javac BruteCollinearPoints.java\
*-----------------------------------------------------------\
\
% javac FastCollinearPoints.java\
*-----------------------------------------------------------\
\
\
================================================================\
\
\
Checking the APIs of your programs.\
*-----------------------------------------------------------\
Point:\
\
BruteCollinearPoints:\
\
FastCollinearPoints:\
\
================================================================\
\
\
********************************************************************************\
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       \
********************************************************************************\
\
\
% spotbugs *.class\
*-----------------------------------------------------------\
L D FE_FLOATING_POINT_EQUALITY FE: Tests for exact floating-point equality. Because floating-point calculations may involve rounding, the calculated values may be imprecise.  At BruteCollinearPoints.java:[line 60]\
L D FE_FLOATING_POINT_EQUALITY FE: Tests for exact floating-point equality. Because floating-point calculations may involve rounding, the calculated values may be imprecise.  At FastCollinearPoints.java:[line 42]\
Warnings generated: 2\
\
\
================================================================\
\
\
% pmd .\
*-----------------------------------------------------------\
BruteCollinearPoints.java:5: The private instance (or static) variable 'lineSegments' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]\
FastCollinearPoints.java:6: The private instance (or static) variable 'lineSegments' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]\
PMD ends with 2 warnings.\
\
\
================================================================\
\
\
% checkstyle *.java\
*-----------------------------------------------------------\
[WARN] BruteCollinearPoints.java:12:20: '==' is not preceded with whitespace. [WhitespaceAround]\
[WARN] BruteCollinearPoints.java:12:22: '==' is not followed by whitespace. [WhitespaceAround]\
[WARN] BruteCollinearPoints.java:17:18: '=' is not preceded with whitespace. [WhitespaceAround]\
[WARN] BruteCollinearPoints.java:17:19: '=' is not followed by whitespace. [WhitespaceAround]\
[WARN] BruteCollinearPoints.java:19:39: '==' is not preceded with whitespace. [WhitespaceAround]\
[WARN] BruteCollinearPoints.java:19:41: '==' is not followed by whitespace. [WhitespaceAround]\
[WARN] BruteCollinearPoints.java:22:18: '==' is not preceded with whitespace. [WhitespaceAround]\
[WARN] BruteCollinearPoints.java:22:20: '==' is not followed by whitespace. [WhitespaceAround]\
[WARN] BruteCollinearPoints.java:39:75: ',' is not followed by whitespace. [WhitespaceAfter]\
[WARN] BruteCollinearPoints.java:51:38: '<' is not preceded with whitespace. [WhitespaceAround]\
[WARN] BruteCollinearPoints.java:51:39: '<' is not followed by whitespace. [WhitespaceAround]\
[WARN] BruteCollinearPoints.java:51:74: '<' is not preceded with whitespace. [WhitespaceAround]\
[WARN] BruteCollinearPoints.java:51:75: '<' is not followed by whitespace. [WhitespaceAround]\
[WARN] BruteCollinearPoints.java:51:110: '<' is not preceded with whitespace. [WhitespaceAround]\
[WARN] BruteCollinearPoints.java:51:111: '<' is not followed by whitespace. [WhitespaceAround]\
[WARN] BruteCollinearPoints.java:55:14: '=' is not preceded with whitespace. [WhitespaceAround]\
[WARN] BruteCollinearPoints.java:55:15: '=' is not followed by whitespace. [WhitespaceAround]\
[WARN] BruteCollinearPoints.java:56:21: '=' is not preceded with whitespace. [WhitespaceAround]\
[WARN] BruteCollinearPoints.java:56:22: '=' is not followed by whitespace. [WhitespaceAround]\
[WARN] BruteCollinearPoints.java:60:18: '==' is not preceded with whitespace. [WhitespaceAround]\
[WARN] BruteCollinearPoints.java:60:20: '==' is not followed by whitespace. [WhitespaceAround]\
[WARN] BruteCollinearPoints.java:64:18: '=' is not preceded with whitespace. [WhitespaceAround]\
[WARN] BruteCollinearPoints.java:64:19: '=' is not followed by whitespace. [WhitespaceAround]\
[WARN] BruteCollinearPoints.java:65:14: '=' is not preceded with whitespace. [WhitespaceAround]\
[WARN] BruteCollinearPoints.java:65:15: '=' is not followed by whitespace. [WhitespaceAround]\
[WARN] BruteCollinearPoints.java:67:17: '>=' is not preceded with whitespace. [WhitespaceAround]\
[WARN] BruteCollinearPoints.java:67:19: '>=' is not followed by whitespace. [WhitespaceAround]\
[WARN] BruteCollinearPoints.java:80:5: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]\
[WARN] FastCollinearPoints.java:13:18: '==' is not preceded with whitespace. [WhitespaceAround]\
[WARN] FastCollinearPoints.java:13:20: '==' is not followed by whitespace. [WhitespaceAround]\
[WARN] FastCollinearPoints.java:18:18: '=' is not preceded with whitespace. [WhitespaceAround]\
[WARN] FastCollinearPoints.java:18:19: '=' is not followed by whitespace. [WhitespaceAround]\
[WARN] FastCollinearPoints.java:20:39: '==' is not preceded with whitespace. [WhitespaceAround]\
[WARN] FastCollinearPoints.java:20:41: '==' is not followed by whitespace. [WhitespaceAround]\
[WARN] FastCollinearPoints.java:23:18: '==' is not preceded with whitespace. [WhitespaceAround]\
[WARN] FastCollinearPoints.java:23:20: '==' is not followed by whitespace. [WhitespaceAround]\
[WARN] FastCollinearPoints.java:29:20: '==' is not preceded with whitespace. [WhitespaceAround]\
[WARN] FastCollinearPoints.java:29:22: '==' is not followed by whitespace. [WhitespaceAround]\
[WARN] FastCollinearPoints.java:34:18: '=' is not preceded with whitespace. [WhitespaceAround]\
...\
Checkstyle ends with 0 errors and 79 warnings.\
\
% custom checkstyle checks for Point.java\
*-----------------------------------------------------------\
\
% custom checkstyle checks for BruteCollinearPoints.java\
*-----------------------------------------------------------\
\
% custom checkstyle checks for FastCollinearPoints.java\
*-----------------------------------------------------------\
\
\
================================================================\
\
\
********************************************************************************\
*  TESTING CORRECTNESS\
********************************************************************************\
\
Testing correctness of Point\
*-----------------------------------------------------------\
Running 3 total tests.\
\
Test 1: p.slopeTo(q)\
  * positive infinite slope, where p and q have coordinates in [0, 500)\
  * positive infinite slope, where p and q have coordinates in [0, 32768)\
  * negative infinite slope, where p and q have coordinates in [0, 500)\
  * negative infinite slope, where p and q have coordinates in [0, 32768)\
  * positive zero     slope, where p and q have coordinates in [0, 500)\
  * positive zero     slope, where p and q have coordinates in [0, 32768)\
  * symmetric for random points p and q with coordinates in [0, 500)\
  * symmetric for random points p and q with coordinates in [0, 32768)\
  * transitive for random points p, q, and r with coordinates in [0, 500)\
  * transitive for random points p, q, and r with coordinates in [0, 32768)\
  * slopeTo(), where p and q have coordinates in [0, 500)\
  * slopeTo(), where p and q have coordinates in [0, 32768)\
  * slopeTo(), where p and q have coordinates in [0, 10)\
  * throw a java.lang.NullPointerException if argument is null\
==> passed\
\
Test 2: p.compareTo(q)\
  * reflexive, where p and q have coordinates in [0, 500)\
  * reflexive, where p and q have coordinates in [0, 32768)\
  * antisymmetric, where p and q have coordinates in [0, 500)\
  * antisymmetric, where p and q have coordinates in [0, 32768)\
  * transitive, where p, q, and r have coordinates in [0, 500)\
  * transitive, where p, q, and r have coordinates in [0, 32768)\
  * sign of compareTo(), where p and q have coordinates in [0, 500)\
  * sign of compareTo(), where p and q have coordinates in [0, 32768)\
  * sign of compareTo(), where p and q have coordinates in [0, 10)\
  * throw java.lang.NullPointerException exception if argument is null\
==> passed\
\
Test 3: p.slopeOrder().compare(q, r)\
  * reflexive, where p and q have coordinates in [0, 500)\
  * reflexive, where p and q have coordinates in [0, 32768)\
  * antisymmetric, where p, q, and r have coordinates in [0, 500)\
  * antisymmetric, where p, q, and r have coordinates in [0, 32768)\
  * transitive, where p, q, r, and s have coordinates in [0, 500)\
  * transitive, where p, q, r, and s have coordinates in [0, 32768)\
  * sign of compare(), where p, q, and r have coordinates in [0, 500)\
  * sign of compare(), where p, q, and r have coordinates in [0, 32768)\
  * sign of compare(), where p, q, and r have coordinates in [0, 10)\
  * throw java.lang.NullPointerException if either argument is null\
==> passed\
\
\
Total: 3/3 tests passed!\
\
\
================================================================\
********************************************************************************\
*  TESTING CORRECTNESS (substituting reference Point and LineSegment)\
********************************************************************************\
\
Testing correctness of BruteCollinearPoints\
*-----------------------------------------------------------\
Running 17 total tests.\
\
The inputs satisfy the following conditions:\
  - no duplicate points\
  - no 5 (or more) points are collinear\
  - all x- and y-coordinates between 0 and 32,767\
\
Test 1: points from a file\
  * filename = input8.txt\
  * filename = equidistant.txt\
  * filename = input40.txt\
  * filename = input48.txt\
==> passed\
\
Test 2a: points from a file with horizontal line segments\
  * filename = horizontal5.txt\
  * filename = horizontal25.txt\
==> passed\
\
Test 2b: random horizontal line segments\
  *  1 random horizontal line segment\
  *  5 random horizontal line segments\
  * 10 random horizontal line segments\
  * 15 random horizontal line segments\
==> passed\
\
Test 3a: points from a file with vertical line segments\
  * filename = vertical5.txt\
  * filename = vertical25.txt\
==> passed\
\
Test 3b: random vertical line segments\
  *  1 random vertical line segment\
  *  5 random vertical line segments\
  * 10 random vertical line segments\
  * 15 random vertical line segments\
==> passed\
\
Test 4a: points from a file with no line segments\
  * filename = random23.txt\
  * filename = random38.txt\
==> passed\
\
Test 4b: random points with no line segments\
  *  5 random points\
  * 10 random points\
  * 20 random points\
  * 50 random points\
==> passed\
\
Test 5: points from a file with fewer than 4 points\
  * filename = input1.txt\
  * filename = input2.txt\
  * filename = input3.txt\
==> passed\
\
Test 6: check for dependence on either compareTo() or compare()\
        returning \{ -1, +1, 0 \} instead of \{ negative integer,\
        positive integer, zero \}\
  * filename = equidistant.txt\
  * filename = input40.txt\
  * filename = input48.txt\
==> passed\
\
Test 7: check for fragile dependence on return value of toString()\
  * filename = equidistant.txt\
  * filename = input40.txt\
  * filename = input48.txt\
==> passed\
\
Test 8: random line segments, none vertical or horizontal\
  *  1 random line segment\
  *  5 random line segments\
  * 10 random line segments\
  * 15 random line segments\
    \
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::\
        OperationCountLimitExceededException\
        Number of calls to methods in Point exceeds limit: 1000000000\
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::\
\
    - failed on trial 3 of 50\
\
==> FAILED\
\
Test 9: random line segments\
  *  1 random line segment\
  *  5 random line segments\
  * 10 random line segments\
  * 15 random line segments\
    \
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::\
        OperationCountLimitExceededException\
        Number of calls to methods in Point exceeds limit: 1000000000\
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::\
\
    - failed on trial 3 of 50\
\
==> FAILED\
\
Test 10: check that data type is immutable by testing whether each method\
         returns the same value, regardless of any intervening operations\
  * input8.txt\
  * equidistant.txt\
==> passed\
\
Test 11: check that data type does not mutate the constructor argument\
  * input8.txt\
  * equidistant.txt\
==> passed\
\
Test 12: numberOfSegments() is consistent with segments()\
  * filename = input8.txt\
  * filename = equidistant.txt\
  * filename = input40.txt\
  * filename = input48.txt\
  * filename = horizontal5.txt\
  * filename = vertical5.txt\
  * filename = random23.txt\
==> passed\
\
Test 13: throws an exception if either the constructor argument is null\
         or any entry in array is null\
  * argument is null\
  * Point[] of length 10, number of null entries = 1\
  * Point[] of length 10, number of null entries = 10\
  * Point[] of length 4, number of null entries = 1\
  * Point[] of length 3, number of null entries = 1\
  * Point[] of length 2, number of null entries = 1\
  * Point[] of length 1, number of null entries = 1\
==> passed\
\
Test 14: check that the constructor throws an exception if duplicate points\
  * 50 points\
  * 25 points\
  * 5 points\
  * 4 points\
  * 3 points\
  * 2 points\
==> passed\
\
\
Total: 15/17 tests passed!\
\
\
================================================================\
Testing correctness of FastCollinearPoints\
*-----------------------------------------------------------\
Running 21 total tests.\
\
The inputs satisfy the following conditions:\
  - no duplicate points\
  - all x- and y-coordinates between 0 and 32,767\
\
Test 1: points from a file\
  * filename = input8.txt\
  * filename = equidistant.txt\
  * filename = input40.txt\
  * filename = input48.txt\
  * filename = input299.txt\
==> passed\
\
Test 2a: points from a file with horizontal line segments\
  * filename = horizontal5.txt\
  * filename = horizontal25.txt\
  * filename = horizontal50.txt\
  * filename = horizontal75.txt\
  * filename = horizontal100.txt\
==> passed\
\
Test 2b: random horizontal line segments\
  *  1 random horizontal line segment\
  *  5 random horizontal line segments\
  * 10 random horizontal line segments\
  * 15 random horizontal line segments\
==> passed\
\
Test 3a: points from a file with vertical line segments\
  * filename = vertical5.txt\
  * filename = vertical25.txt\
  * filename = vertical50.txt\
  * filename = vertical75.txt\
  * filename = vertical100.txt\
==> passed\
\
Test 3b: random vertical line segments\
  *  1 random vertical line segment\
  *  5 random vertical line segments\
  * 10 random vertical line segments\
  * 15 random vertical line segments\
==> passed\
\
Test 4a: points from a file with no line segments\
  * filename = random23.txt\
  * filename = random38.txt\
  * filename = random91.txt\
  * filename = random152.txt\
==> passed\
\
Test 4b: random points with no line segments\
  *  5 random points\
  * 10 random points\
  * 20 random points\
  * 50 random points\
==> passed\
\
Test 5a: points from a file with 5 or more on some line segments\
  * filename = input9.txt\
  * filename = input10.txt\
  * filename = input20.txt\
  * filename = input50.txt\
  * filename = input80.txt\
  * filename = input300.txt\
  * filename = inarow.txt\
==> passed\
\
Test 5b: points from a file with 5 or more on some line segments\
  * filename = kw1260.txt\
  * filename = rs1423.txt\
==> passed\
\
Test 6: points from a file with fewer than 4 points\
  * filename = input1.txt\
  * filename = input2.txt\
  * filename = input3.txt\
==> passed\
\
Test 7: check for dependence on either compareTo() or compare()\
        returning \{ -1, +1, 0 \} instead of \{ negative integer,\
        positive integer, zero \}\
  * filename = equidistant.txt\
  * filename = input40.txt\
  * filename = input48.txt\
  * filename = input299.txt\
==> passed\
\
Test 8: check for fragile dependence on return value of toString()\
  * filename = equidistant.txt\
  * filename = input40.txt\
  * filename = input48.txt\
==> passed\
\
Test 9: random line segments, none vertical or horizontal\
  *  1 random line segment\
  *  5 random line segments\
  * 25 random line segments\
  * 50 random line segments\
  * 100 random line segments\
==> passed\
\
Test 10: random line segments\
  *  1 random line segment\
  *  5 random line segments\
  * 25 random line segments\
  * 50 random line segments\
  * 100 random line segments\
==> passed\
\
Test 11: random distinct points in a given range\
  * 5 random points in a 10-by-10 grid\
  * 10 random points in a 10-by-10 grid\
  * 50 random points in a 10-by-10 grid\
  * 90 random points in a 10-by-10 grid\
  * 200 random points in a 50-by-50 grid\
==> passed\
\
Test 12: m*n points on an m-by-n grid\
  * 3-by-3 grid\
  * 4-by-4 grid\
  * 5-by-5 grid\
  * 10-by-10 grid\
  * 20-by-20 grid\
  * 5-by-4 grid\
  * 6-by-4 grid\
  * 10-by-4 grid\
  * 15-by-4 grid\
  * 25-by-4 grid\
==> passed\
\
Test 13: check that data type is immutable by testing whether each method\
         returns the same value, regardless of any intervening operations\
  * input8.txt\
  * equidistant.txt\
==> passed\
\
Test 14: check that data type does not mutate the constructor argument\
  * input8.txt\
  * equidistant.txt\
==> passed\
\
Test 15: numberOfSegments() is consistent with segments()\
  * filename = input8.txt\
  * filename = equidistant.txt\
  * filename = input40.txt\
  * filename = input48.txt\
  * filename = horizontal5.txt\
  * filename = vertical5.txt\
  * filename = random23.txt\
==> passed\
\
Test 16: throws an exception if either constructor argument is null\
         or any entry in array is null\
  * argument is null\
  * Point[] of length 10, number of null entries = 1\
  * Point[] of length 10, number of null entries = 10\
  * Point[] of length 4, number of null entries = 1\
  * Point[] of length 3, number of null entries = 1\
  * Point[] of length 2, number of null entries = 1\
  * Point[] of length 1, number of null entries = 1\
==> passed\
\
Test 17: check that the constructor throws an exception if duplicate points\
  * 50 points\
  * 25 points\
  * 5 points\
  * 4 points\
  * 3 points\
  * 2 points\
==> passed\
\
\
Total: 21/21 tests passed!\
\
\
================================================================\
********************************************************************************\
*  MEMORY\
********************************************************************************\
\
Analyzing memory of Point\
*-----------------------------------------------------------\
Running 1 total tests.\
\
The maximum amount of memory per Point object is 32 bytes.\
\
Student memory = 24 bytes (passed)\
\
Total: 1/1 tests passed!\
\
================================================================\
\
\
\
********************************************************************************\
*  TIMING\
********************************************************************************\
\
Timing BruteCollinearPoints\
*-----------------------------------------------------------\
Running 10 total tests.\
\
Test 1a-1e: Find collinear points among n random distinct points\
\
\
                                                      slopeTo()\
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()\
-----------------------------------------------------------------------------------------------\
=> passed    16   0.01      196608           0         196608                  632         \
=> passed    32   0.03     3145728           0        3145728                 2544         \
=> passed    64   0.40    50331648           0       50331648                10208         \
=> passed   128   3.88   805306368           0      805306368                40896         \
=> passed   256  78.39 12884901888           0    12884901888               163712         \
Aborting: time limit of 10 seconds exceeded\
Test 2a-2e: Find collinear points among n/4 arbitrary line segments\
\
\
                                                      slopeTo()\
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()\
-----------------------------------------------------------------------------------------------\
=> passed    16   0.01      196608           0         196608                 1256         \
=> passed    32   0.05     3145728           0        3145728                 3792         \
=> passed    64   0.43    50331648           0       50331648                12704         \
=> passed   128   6.35   805306368           0      805306368                45888         \
\
\
WARNING: the time limit of 180 seconds was exceeded, so not all tests could be completed.\
\
\
Total: 0/10 tests passed: Could not complete tests, which results in a reported score of 0.\
================================================================\
\
\
\
Timing FastCollinearPoints\
*-----------------------------------------------------------\
Running 31 total tests.\
\
Test 1a-1g: Find collinear points among n random distinct points\
\
\
                                                      slopeTo()\
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()\
-----------------------------------------------------------------------------------------------\
=> passed    64   0.01        4096       18804          41704                 4096         \
=> passed   128   0.01       16384       88672         193728                16384         \
=> passed   256   0.03       65536      415845         897226                65536         \
=> passed   512   0.20      262144     1879889        4021922               262144         \
=> passed  1024   0.43     1048576     8520024       18088624              1048576         \
=> passed  2048   0.91     4194304    37911832       80017968              4194304         \
==> 6/6 tests passed\
\
lg ratio(slopeTo() + 2*compare()) = lg (80017968 / 18088624) = 2.15\
=> passed\
\
==> 7/7 tests passed\
\
Test 2a-2g: Find collinear points among the n points on an n-by-1 grid\
\
                                                      slopeTo()\
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()\
-----------------------------------------------------------------------------------------------\
=> passed    64   0.00        4096        4764          13624                 4499         \
=> passed   128   0.00       16384       17796          51976                17245         \
=> passed   256   0.00       65536       68717         202970                67274         \
=> passed   512   0.01      262144      269399         800942               265874         \
=> passed  1024   0.05     1048576     1065026        3178628              1056305         \
=> passed  2048   0.08     4194304     4231214       12656732              4214957         \
=> passed  4096   0.21    16777216    16859163       50495542             16819434         \
==> 7/7 tests passed\
\
lg ratio(slopeTo() + 2*compare()) = lg (50495542 / 12656732) = 2.00\
=> passed\
\
==> 8/8 tests passed\
\
Test 3a-3g: Find collinear points among the n points on an n/4-by-4 grid\
\
                                                      slopeTo()\
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()\
-----------------------------------------------------------------------------------------------\
=> passed    64   0.00        4096       17578          39252                 5299         \
=> passed   128   0.00       16384       72159         160702                20977         \
=> passed   256   0.01       65536      282315         630166                83336         \
=> passed   512   0.03      262144     1114955        2492054               329923         \
=> passed  1024   0.16     1048576     4408435        9865446              1320135         \
=> passed  2048   0.36     4194304    17559010       39312324              5273205         \
=> passed  4096   1.33    16777216    69963881      156704978             21078944         \
==> 7/7 tests passed\
\
lg ratio(slopeTo() + 2*compare()) = lg (156704978 / 39312324) = 1.99\
=> passed\
\
==> 8/8 tests passed\
\
Test 4a-4g: Find collinear points among the n points on an n/8-by-8 grid\
\
                                                      slopeTo()\
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()\
-----------------------------------------------------------------------------------------------\
=> passed    64   0.00        4096       18497          41090                 5309         \
=> passed   128   0.00       16384       86680         189744                20906         \
=> passed   256   0.01       65536      383897         833330                83322         \
=> passed   512   0.04      262144     1621349        3504842               330856         \
=> passed  1024   0.16     1048576     6752478       14553532              1320723         \
=> passed  2048   0.74     4194304    27733594       59661492              5283135         \
=> passed  4096   2.51    16777216   112880191      242537598             21123426         \
==> 7/7 tests passed\
\
lg ratio(slopeTo() + 2*compare()) = lg (242537598 / 59661492) = 2.02\
=> passed\
\
==> 8/8 tests passed\
\
Total: 31/31 tests passed!\
\
\
================================================================\
\
\
\
}