{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf600
{\fonttbl\f0\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red98\green98\blue98;\red255\green255\blue255;}
{\*\expandedcolortbl;;\cssrgb\c45882\c45882\c45882;\cssrgb\c100000\c100000\c100000;}
\paperw11900\paperh16840\margl1440\margr1440\vieww38200\viewh21120\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
See the Assessment Guide for information on how to interpret this report.\
\
ASSESSMENT SUMMARY\
\
Compilation:  PASSED\
API:          PASSED\
\
Spotbugs:     FAILED (2 warnings)\
PMD:          FAILED (2 warnings)\
Checkstyle:   FAILED (0 errors, 81 warnings)\
\
Correctness:  41/41 tests passed\
Memory:       1/1 tests passed\
Timing:       41/41 tests passed\
\
Aggregate score: 100.00%\
[Compilation: 5%, API: 5%, Spotbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]\
\
ASSESSMENT DETAILS\
\
The following files were submitted:\
----------------------------------\
3.0K Dec 27 03:33 BruteCollinearPoints.java\
3.4K Dec 27 03:33 FastCollinearPoints.java\
3.9K Dec 27 03:33 Point.java\
\
\
********************************************************************************\
*  COMPILING                                                                    \
********************************************************************************\
\
\
% javac Point.java\
*-----------------------------------------------------------\
\
% javac BruteCollinearPoints.java\
*-----------------------------------------------------------\
\
% javac FastCollinearPoints.java\
*-----------------------------------------------------------\
\
\
================================================================\
\
\
Checking the APIs of your programs.\
*-----------------------------------------------------------\
Point:\
\
BruteCollinearPoints:\
\
FastCollinearPoints:\
\
================================================================\
\
\
********************************************************************************\
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       \
********************************************************************************\
\
\
% spotbugs *.class\
*-----------------------------------------------------------\
L D FE_FLOATING_POINT_EQUALITY FE: Tests for exact floating-point equality. Because floating-point calculations may involve rounding, the calculated values may be imprecise.  At BruteCollinearPoints.java:[line 60]\
L D FE_FLOATING_POINT_EQUALITY FE: Tests for exact floating-point equality. Because floating-point calculations may involve rounding, the calculated values may be imprecise.  At FastCollinearPoints.java:[line 42]\
Warnings generated: 2\
\
\
================================================================\
\
\
% pmd .\
*-----------------------------------------------------------\
BruteCollinearPoints.java:5: The private instance (or static) variable 'lineSegments' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]\
FastCollinearPoints.java:6: The private instance (or static) variable 'lineSegments' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]\
PMD ends with 2 warnings.\
\
\
================================================================\
\
\
% checkstyle *.java\
*-----------------------------------------------------------\
[WARN] BruteCollinearPoints.java:12:20: '==' is not preceded with whitespace. [WhitespaceAround]\
[WARN] BruteCollinearPoints.java:12:22: '==' is not followed by whitespace. [WhitespaceAround]\
[WARN] BruteCollinearPoints.java:17:18: '=' is not preceded with whitespace. [WhitespaceAround]\
[WARN] BruteCollinearPoints.java:17:19: '=' is not followed by whitespace. [WhitespaceAround]\
[WARN] BruteCollinearPoints.java:19:39: '==' is not preceded with whitespace. [WhitespaceAround]\
[WARN] BruteCollinearPoints.java:19:41: '==' is not followed by whitespace. [WhitespaceAround]\
[WARN] BruteCollinearPoints.java:22:18: '>=' is not preceded with whitespace. [WhitespaceAround]\
[WARN] BruteCollinearPoints.java:22:20: '>=' is not followed by whitespace. [WhitespaceAround]\
[WARN] BruteCollinearPoints.java:33:48: ',' is not followed by whitespace. [WhitespaceAfter]\
[WARN] BruteCollinearPoints.java:37:52: ',' is not followed by whitespace. [WhitespaceAfter]\
[WARN] BruteCollinearPoints.java:50:38: '<' is not preceded with whitespace. [WhitespaceAround]\
[WARN] BruteCollinearPoints.java:50:39: '<' is not followed by whitespace. [WhitespaceAround]\
[WARN] BruteCollinearPoints.java:50:74: '<' is not preceded with whitespace. [WhitespaceAround]\
[WARN] BruteCollinearPoints.java:50:75: '<' is not followed by whitespace. [WhitespaceAround]\
[WARN] BruteCollinearPoints.java:50:110: '<' is not preceded with whitespace. [WhitespaceAround]\
[WARN] BruteCollinearPoints.java:50:111: '<' is not followed by whitespace. [WhitespaceAround]\
[WARN] BruteCollinearPoints.java:54:21: '=' is not preceded with whitespace. [WhitespaceAround]\
[WARN] BruteCollinearPoints.java:54:22: '=' is not followed by whitespace. [WhitespaceAround]\
[WARN] BruteCollinearPoints.java:56:15: '=' is not preceded with whitespace. [WhitespaceAround]\
[WARN] BruteCollinearPoints.java:56:16: '=' is not followed by whitespace. [WhitespaceAround]\
[WARN] BruteCollinearPoints.java:56:20: '<=' is not preceded with whitespace. [WhitespaceAround]\
[WARN] BruteCollinearPoints.java:56:22: '<=' is not followed by whitespace. [WhitespaceAround]\
[WARN] BruteCollinearPoints.java:56:26: ';' is not followed by whitespace. [WhitespaceAfter]\
[WARN] BruteCollinearPoints.java:60:14: '==' is not preceded with whitespace. [WhitespaceAround]\
[WARN] BruteCollinearPoints.java:60:16: '==' is not followed by whitespace. [WhitespaceAround]\
[WARN] BruteCollinearPoints.java:60:26: '==' is not preceded with whitespace. [WhitespaceAround]\
[WARN] BruteCollinearPoints.java:60:28: '==' is not followed by whitespace. [WhitespaceAround]\
[WARN] BruteCollinearPoints.java:61:20: '=' is not preceded with whitespace. [WhitespaceAround]\
[WARN] BruteCollinearPoints.java:61:21: '=' is not followed by whitespace. [WhitespaceAround]\
[WARN] BruteCollinearPoints.java:81:5: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]\
[WARN] FastCollinearPoints.java:13:18: '==' is not preceded with whitespace. [WhitespaceAround]\
[WARN] FastCollinearPoints.java:13:20: '==' is not followed by whitespace. [WhitespaceAround]\
[WARN] FastCollinearPoints.java:18:18: '=' is not preceded with whitespace. [WhitespaceAround]\
[WARN] FastCollinearPoints.java:18:19: '=' is not followed by whitespace. [WhitespaceAround]\
[WARN] FastCollinearPoints.java:20:39: '==' is not preceded with whitespace. [WhitespaceAround]\
[WARN] FastCollinearPoints.java:20:41: '==' is not followed by whitespace. [WhitespaceAround]\
[WARN] FastCollinearPoints.java:23:18: '>=' is not preceded with whitespace. [WhitespaceAround]\
[WARN] FastCollinearPoints.java:23:20: '>=' is not followed by whitespace. [WhitespaceAround]\
[WARN] FastCollinearPoints.java:29:20: '==' is not preceded with whitespace. [WhitespaceAround]\
...\
Checkstyle ends with 0 errors and 81 warning.\
\
% custom checkstyle checks for Point.java\
*-----------------------------------------------------------\
\
% custom checkstyle checks for BruteCollinearPoints.java\
*-----------------------------------------------------------\
\
% custom checkstyle checks for FastCollinearPoints.java\
*-----------------------------------------------------------\
\
\
================================================================\
\
\
********************************************************************************\
*  TESTING CORRECTNESS\
********************************************************************************\
\
Testing correctness of Point\
*-----------------------------------------------------------\
Running 3 total tests.\
\
Test 1: p.slopeTo(q)\
  * positive infinite slope, where p and q have coordinates in [0, 500)\
  * positive infinite slope, where p and q have coordinates in [0, 32768)\
  * negative infinite slope, where p and q have coordinates in [0, 500)\
  * negative infinite slope, where p and q have coordinates in [0, 32768)\
  * positive zero     slope, where p and q have coordinates in [0, 500)\
  * positive zero     slope, where p and q have coordinates in [0, 32768)\
  * symmetric for random points p and q with coordinates in [0, 500)\
  * symmetric for random points p and q with coordinates in [0, 32768)\
  * transitive for random points p, q, and r with coordinates in [0, 500)\
  * transitive for random points p, q, and r with coordinates in [0, 32768)\
  * slopeTo(), where p and q have coordinates in [0, 500)\
  * slopeTo(), where p and q have coordinates in [0, 32768)\
  * slopeTo(), where p and q have coordinates in [0, 10)\
  * throw a java.lang.NullPointerException if argument is null\
==> passed\
\
Test 2: p.compareTo(q)\
  * reflexive, where p and q have coordinates in [0, 500)\
  * reflexive, where p and q have coordinates in [0, 32768)\
  * antisymmetric, where p and q have coordinates in [0, 500)\
  * antisymmetric, where p and q have coordinates in [0, 32768)\
  * transitive, where p, q, and r have coordinates in [0, 500)\
  * transitive, where p, q, and r have coordinates in [0, 32768)\
  * sign of compareTo(), where p and q have coordinates in [0, 500)\
  * sign of compareTo(), where p and q have coordinates in [0, 32768)\
  * sign of compareTo(), where p and q have coordinates in [0, 10)\
  * throw java.lang.NullPointerException exception if argument is null\
==> passed\
\
Test 3: p.slopeOrder().compare(q, r)\
  * reflexive, where p and q have coordinates in [0, 500)\
  * reflexive, where p and q have coordinates in [0, 32768)\
  * antisymmetric, where p, q, and r have coordinates in [0, 500)\
  * antisymmetric, where p, q, and r have coordinates in [0, 32768)\
  * transitive, where p, q, r, and s have coordinates in [0, 500)\
  * transitive, where p, q, r, and s have coordinates in [0, 32768)\
  * sign of compare(), where p, q, and r have coordinates in [0, 500)\
  * sign of compare(), where p, q, and r have coordinates in [0, 32768)\
  * sign of compare(), where p, q, and r have coordinates in [0, 10)\
  * throw java.lang.NullPointerException if either argument is null\
==> passed\
\
\
Total: 3/3 tests passed!\
\
\
================================================================\
********************************************************************************\
*  TESTING CORRECTNESS (substituting reference Point and LineSegment)\
********************************************************************************\
\
Testing correctness of BruteCollinearPoints\
*-----------------------------------------------------------\
Running 17 total tests.\
\
The inputs satisfy the following conditions:\
  - no duplicate points\
  - no 5 (or more) points are collinear\
  - all x- and y-coordinates between 0 and 32,767\
\
Test 1: points from a file\
  * filename = input8.txt\
  * filename = equidistant.txt\
  * filename = input40.txt\
  * filename = input48.txt\
==> passed\
\
Test 2a: points from a file with horizontal line segments\
  * filename = horizontal5.txt\
  * filename = horizontal25.txt\
==> passed\
\
Test 2b: random horizontal line segments\
  *  1 random horizontal line segment\
  *  5 random horizontal line segments\
  * 10 random horizontal line segments\
  * 15 random horizontal line segments\
==> passed\
\
Test 3a: points from a file with vertical line segments\
  * filename = vertical5.txt\
  * filename = vertical25.txt\
==> passed\
\
Test 3b: random vertical line segments\
  *  1 random vertical line segment\
  *  5 random vertical line segments\
  * 10 random vertical line segments\
  * 15 random vertical line segments\
==> passed\
\
Test 4a: points from a file with no line segments\
  * filename = random23.txt\
  * filename = random38.txt\
==> passed\
\
Test 4b: random points with no line segments\
  *  5 random points\
  * 10 random points\
  * 20 random points\
  * 50 random points\
==> passed\
\
Test 5: points from a file with fewer than 4 points\
  * filename = input1.txt\
  * filename = input2.txt\
  * filename = input3.txt\
==> passed\
\
Test 6: check for dependence on either compareTo() or compare()\
        returning \{ -1, +1, 0 \} instead of \{ negative integer,\
        positive integer, zero \}\
  * filename = equidistant.txt\
  * filename = input40.txt\
  * filename = input48.txt\
==> passed\
\
Test 7: check for fragile dependence on return value of toString()\
  * filename = equidistant.txt\
  * filename = input40.txt\
  * filename = input48.txt\
==> passed\
\
Test 8: random line segments, none vertical or horizontal\
  *  1 random line segment\
  *  5 random line segments\
  * 10 random line segments\
  * 15 random line segments\
==> passed\
\
Test 9: random line segments\
  *  1 random line segment\
  *  5 random line segments\
  * 10 random line segments\
  * 15 random line segments\
==> passed\
\
Test 10: check that data type is immutable by testing whether each method\
         returns the same value, regardless of any intervening operations\
  * input8.txt\
  * equidistant.txt\
==> passed\
\
Test 11: check that data type does not mutate the constructor argument\
  * input8.txt\
  * equidistant.txt\
==> passed\
\
Test 12: numberOfSegments() is consistent with segments()\
  * filename = input8.txt\
  * filename = equidistant.txt\
  * filename = input40.txt\
  * filename = input48.txt\
  * filename = horizontal5.txt\
  * filename = vertical5.txt\
  * filename = random23.txt\
==> passed\
\
Test 13: throws an exception if either the constructor argument is null\
         or any entry in array is null\
  * argument is null\
  * Point[] of length 10, number of null entries = 1\
  * Point[] of length 10, number of null entries = 10\
  * Point[] of length 4, number of null entries = 1\
  * Point[] of length 3, number of null entries = 1\
  * Point[] of length 2, number of null entries = 1\
  * Point[] of length 1, number of null entries = 1\
==> passed\
\
Test 14: check that the constructor throws an exception if duplicate points\
  * 50 points\
  * 25 points\
  * 5 points\
  * 4 points\
  * 3 points\
  * 2 points\
==> passed\
\
\
Total: 17/17 tests passed!\
\
\
================================================================\
Testing correctness of FastCollinearPoints\
*-----------------------------------------------------------\
Running 21 total tests.\
\
The inputs satisfy the following conditions:\
  - no duplicate points\
  - all x- and y-coordinates between 0 and 32,767\
\
Test 1: points from a file\
  * filename = input8.txt\
  * filename = equidistant.txt\
  * filename = input40.txt\
  * filename = input48.txt\
  * filename = input299.txt\
==> passed\
\
Test 2a: points from a file with horizontal line segments\
  * filename = horizontal5.txt\
  * filename = horizontal25.txt\
  * filename = horizontal50.txt\
  * filename = horizontal75.txt\
  * filename = horizontal100.txt\
==> passed\
\
Test 2b: random horizontal line segments\
  *  1 random horizontal line segment\
  *  5 random horizontal line segments\
  * 10 random horizontal line segments\
  * 15 random horizontal line segments\
==> passed\
\
Test 3a: points from a file with vertical line segments\
  * filename = vertical5.txt\
  * filename = vertical25.txt\
  * filename = vertical50.txt\
  * filename = vertical75.txt\
  * filename = vertical100.txt\
==> passed\
\
Test 3b: random vertical line segments\
  *  1 random vertical line segment\
  *  5 random vertical line segments\
  * 10 random vertical line segments\
  * 15 random vertical line segments\
==> passed\
\
Test 4a: points from a file with no line segments\
  * filename = random23.txt\
  * filename = random38.txt\
  * filename = random91.txt\
  * filename = random152.txt\
==> passed\
\
Test 4b: random points with no line segments\
  *  5 random points\
  * 10 random points\
  * 20 random points\
  * 50 random points\
==> passed\
\
Test 5a: points from a file with 5 or more on some line segments\
  * filename = input9.txt\
  * filename = input10.txt\
  * filename = input20.txt\
  * filename = input50.txt\
  * filename = input80.txt\
  * filename = input300.txt\
  * filename = inarow.txt\
==> passed\
\
Test 5b: points from a file with 5 or more on some line segments\
  * filename = kw1260.txt\
  * filename = rs1423.txt\
==> passed\
\
Test 6: points from a file with fewer than 4 points\
  * filename = input1.txt\
  * filename = input2.txt\
  * filename = input3.txt\
==> passed\
\
Test 7: check for dependence on either compareTo() or compare()\
        returning \{ -1, +1, 0 \} instead of \{ negative integer,\
        positive integer, zero \}\
  * filename = equidistant.txt\
  * filename = input40.txt\
  * filename = input48.txt\
  * filename = input299.txt\
==> passed\
\
Test 8: check for fragile dependence on return value of toString()\
  * filename = equidistant.txt\
  * filename = input40.txt\
  * filename = input48.txt\
==> passed\
\
Test 9: random line segments, none vertical or horizontal\
  *  1 random line segment\
  *  5 random line segments\
  * 25 random line segments\
  * 50 random line segments\
  * 100 random line segments\
==> passed\
\
Test 10: random line segments\
  *  1 random line segment\
  *  5 random line segments\
  * 25 random line segments\
  * 50 random line segments\
  * 100 random line segments\
==> passed\
\
Test 11: random distinct points in a given range\
  * 5 random points in a 10-by-10 grid\
  * 10 random points in a 10-by-10 grid\
  * 50 random points in a 10-by-10 grid\
  * 90 random points in a 10-by-10 grid\
  * 200 random points in a 50-by-50 grid\
==> passed\
\
Test 12: m*n points on an m-by-n grid\
  * 3-by-3 grid\
  * 4-by-4 grid\
  * 5-by-5 grid\
  * 10-by-10 grid\
  * 20-by-20 grid\
  * 5-by-4 grid\
  * 6-by-4 grid\
  * 10-by-4 grid\
  * 15-by-4 grid\
  * 25-by-4 grid\
==> passed\
\
Test 13: check that data type is immutable by testing whether each method\
         returns the same value, regardless of any intervening operations\
  * input8.txt\
  * equidistant.txt\
==> passed\
\
Test 14: check that data type does not mutate the constructor argument\
  * input8.txt\
  * equidistant.txt\
==> passed\
\
Test 15: numberOfSegments() is consistent with segments()\
  * filename = input8.txt\
  * filename = equidistant.txt\
  * filename = input40.txt\
  * filename = input48.txt\
  * filename = horizontal5.txt\
  * filename = vertical5.txt\
  * filename = random23.txt\
==> passed\
\
Test 16: throws an exception if either constructor argument is null\
         or any entry in array is null\
  * argument is null\
  * Point[] of length 10, number of null entries = 1\
  * Point[] of length 10, number of null entries = 10\
  * Point[] of length 4, number of null entries = 1\
  * Point[] of length 3, number of null entries = 1\
  * Point[] of length 2, number of null entries = 1\
  * Point[] of length 1, number of null entries = 1\
==> passed\
\
Test 17: check that the constructor throws an exception if duplicate points\
  * 50 points\
  * 25 points\
  * 5 points\
  * 4 points\
  * 3 points\
  * 2 points\
==> passed\
\
\
Total: 21/21 tests passed!\
\
\
================================================================\
********************************************************************************\
*  MEMORY\
********************************************************************************\
\
Analyzing memory of Point\
*-----------------------------------------------------------\
Running 1 total tests.\
\
The maximum amount of memory per Point object is 32 bytes.\
\
Student memory = 24 bytes (passed)\
\
Total: 1/1 tests passed!\
\
================================================================\
\
\
\
********************************************************************************\
*  TIMING\
********************************************************************************\
\
Timing BruteCollinearPoints\
*-----------------------------------------------------------\
Running 10 total tests.\
\
Test 1a-1e: Find collinear points among n random distinct points\
\
\
                                                      slopeTo()\
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()\
-----------------------------------------------------------------------------------------------\
=> passed    16   0.01       19456           0          19456                  616         \
=> passed    32   0.00      159744           0         159744                 2512         \
=> passed    64   0.02     1294336           0        1294336                10144         \
=> passed   128   0.11    10420224           0       10420224                40768         \
=> passed   256   0.53    83623936           0       83623936               163456         \
==> 5/5 tests passed\
\
Test 2a-2e: Find collinear points among n/4 arbitrary line segments\
\
\
                                                      slopeTo()\
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()\
-----------------------------------------------------------------------------------------------\
=> passed    16   0.00       24064           0          24064                 1240         \
=> passed    32   0.00      178176           0         178176                 3760         \
=> passed    64   0.01     1368064           0        1368064                12640         \
=> passed   128   0.07    10715136           0       10715136                45760         \
=> passed   256   0.49    84808192           0       84808192               173469         \
==> 5/5 tests passed\
\
Total: 10/10 tests passed!\
\
\
================================================================\
\
\
\
Timing FastCollinearPoints\
*-----------------------------------------------------------\
Running 31 total tests.\
\
Test 1a-1g: Find collinear points among n random distinct points\
\
\
                                                      slopeTo()\
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()\
-----------------------------------------------------------------------------------------------\
=> passed    64   0.01        4096       18687          41470                 4096         \
=> passed   128   0.01       16384       88777         193938                16384         \
=> passed   256   0.03       65536      414074         893684                65536         \
=> passed   512   0.17      262144     1885675        4033494               262144         \
=> passed  1024   0.35     1048576     8500082       18048740              1048576         \
=> passed  2048   0.93     4194304    37823408       79841120              4194304         \
==> 6/6 tests passed\
\
lg ratio(slopeTo() + 2*compare()) = lg (79841120 / 18048740) = 2.15\
=> passed\
\
==> 7/7 tests passed\
\
Test 2a-2g: Find collinear points among the n points on an n-by-1 grid\
\
                                                      slopeTo()\
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()\
-----------------------------------------------------------------------------------------------\
=> passed    64   0.00        4096        4764          13624                 4453         \
=> passed   128   0.00       16384       17796          51976                17142         \
=> passed   256   0.00       65536       68717         202970                67389         \
=> passed   512   0.01      262144      269399         800942               265855         \
=> passed  1024   0.04     1048576     1065026        3178628              1057227         \
=> passed  2048   0.06     4194304     4231214       12656732              4213082         \
=> passed  4096   0.21    16777216    16859163       50495542             16814385         \
==> 7/7 tests passed\
\
lg ratio(slopeTo() + 2*compare()) = lg (50495542 / 12656732) = 2.00\
=> passed\
\
==> 8/8 tests passed\
\
Test 3a-3g: Find collinear points among the n points on an n/4-by-4 grid\
\
                                                      slopeTo()\
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()\
-----------------------------------------------------------------------------------------------\
=> passed    64   0.00        4096       17565          39226                 5318         \
=> passed   128   0.00       16384       71913         160210                20896         \
=> passed   256   0.01       65536      281794         629124                82967         \
=> passed   512   0.04      262144     1114762        2491668               328988         \
=> passed  1024   0.11     1048576     4415650        9879876              1318076         \
=> passed  2048   0.36     4194304    17533480       39261264              5270901         \
=> passed  4096   1.35    16777216    69913102      156603420             21084867         \
==> 7/7 tests passed\
\
lg ratio(slopeTo() + 2*compare()) = lg (156603420 / 39261264) = 2.00\
=> passed\
\
==> 8/8 tests passed\
\
Test 4a-4g: Find collinear points among the n points on an n/8-by-8 grid\
\
                                                      slopeTo()\
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()\
-----------------------------------------------------------------------------------------------\
=> passed    64   0.00        4096       18363          40822                 5316         \
=> passed   128   0.00       16384       87455         191294                21014         \
=> passed   256   0.01       65536      385093         835722                83122         \
=> passed   512   0.04      262144     1618014        3498172               331337         \
=> passed  1024   0.16     1048576     6751974       14552524              1322553         \
=> passed  2048   0.62     4194304    27735422       59665148              5281890         \
=> passed  4096   2.42    16777216   112973126      242723468             21108592         \
==> 7/7 tests passed\
\
lg ratio(slopeTo() + 2*compare()) = lg (242723468 / 59665148) = 2.02\
=> passed\
\
==> 8/8 tests passed\
\
Total: 31/31 tests passed!\
\
\
================================================================\
\
\
\
}