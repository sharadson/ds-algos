{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf600
{\fonttbl\f0\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red98\green98\blue98;\red255\green255\blue255;}
{\*\expandedcolortbl;;\cssrgb\c45882\c45882\c45882;\cssrgb\c100000\c100000\c100000;}
\paperw11900\paperh16840\margl1440\margr1440\vieww32220\viewh18000\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
See the Assessment Guide for information on how to interpret this report.\
\
ASSESSMENT SUMMARY\
\
Compilation:  PASSED\
API:          PASSED\
\
Spotbugs:     FAILED (1 warning)\
PMD:          FAILED (7 warnings)\
Checkstyle:   FAILED (0 errors, 203 warnings)\
\
Correctness:  24/51 tests passed\
Memory:       22/22 tests passed\
Timing:       125/125 tests passed\
\
Aggregate score: 68.24%\
[Compilation: 5%, API: 5%, Spotbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]\
\
ASSESSMENT DETAILS\
\
The following files were submitted:\
----------------------------------\
4.4K Dec 31 15:35 Board.java\
2.1K Dec 31 15:35 Solver.java\
\
\
********************************************************************************\
*  COMPILING                                                                    \
********************************************************************************\
\
\
% javac Board.java\
*-----------------------------------------------------------\
\
% javac Solver.java\
*-----------------------------------------------------------\
\
\
================================================================\
\
\
Checking the APIs of your programs.\
*-----------------------------------------------------------\
Board:\
\
Solver:\
\
================================================================\
\
\
********************************************************************************\
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       \
********************************************************************************\
\
\
% spotbugs *.class\
*-----------------------------------------------------------\
M V EI_EXPOSE_REP2 EI2: Stores a reference to an externally mutable object in the instance variable 'blocks', exposing the internal representation of the class 'Board'. Instead, create a defensive copy of the object referenced by the parameter variable 'inputBlocks' and store that copy in the instance variable 'blocks'.  At Board.java:[line 7]\
Warnings generated: 1\
\
\
================================================================\
\
\
% pmd .\
*-----------------------------------------------------------\
Board.java:4: The private instance (or static) variable 'blocks' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]\
Board.java:5: The private instance (or static) variable 'dimension' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]\
Board.java:6: The user-supplied array 'inputBlocks' is stored directly. [ArrayIsStoredDirectly]\
Board.java:23: Avoid using assignment statements in expressions; this can make code harder to read. [AssignmentInOperand]\
Board.java:37: Avoid using assignment statements in expressions; this can make code harder to read. [AssignmentInOperand]\
Board.java:62: Avoid using assignment statements in expressions; this can make code harder to read. [AssignmentInOperand]\
Solver.java:5: The private instance (or static) variable 'min' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]\
PMD ends with 7 warnings.\
\
\
================================================================\
\
\
% checkstyle *.java\
*-----------------------------------------------------------\
[WARN] Board.java:6:36: '\{' is not preceded with whitespace. [WhitespaceAround]\
[WARN] Board.java:12:25: '\{' is not preceded with whitespace. [WhitespaceAround]\
[WARN] Board.java:16:23: '\{' is not preceded with whitespace. [WhitespaceAround]\
[WARN] Board.java:18:19: '=' is not preceded with whitespace. [WhitespaceAround]\
[WARN] Board.java:18:20: '=' is not followed by whitespace. [WhitespaceAround]\
[WARN] Board.java:20:8: 'for' is not followed by whitespace. [WhitespaceAfter]\
[WARN] Board.java:20:14: '=' is not preceded with whitespace. [WhitespaceAround]\
[WARN] Board.java:20:15: '=' is not followed by whitespace. [WhitespaceAround]\
[WARN] Board.java:20:17: ';' is not followed by whitespace. [WhitespaceAfter]\
[WARN] Board.java:20:18: '<' is not preceded with whitespace. [WhitespaceAround]\
[WARN] Board.java:20:19: '<' is not followed by whitespace. [WhitespaceAround]\
[WARN] Board.java:20:29: ';' is not followed by whitespace. [WhitespaceAfter]\
[WARN] Board.java:20:33: '\{' is not preceded with whitespace. [WhitespaceAround]\
[WARN] Board.java:21:10: 'for' is not followed by whitespace. [WhitespaceAfter]\
[WARN] Board.java:21:16: '=' is not preceded with whitespace. [WhitespaceAround]\
[WARN] Board.java:21:17: '=' is not followed by whitespace. [WhitespaceAround]\
[WARN] Board.java:21:19: ';' is not followed by whitespace. [WhitespaceAfter]\
[WARN] Board.java:21:20: '<' is not preceded with whitespace. [WhitespaceAround]\
[WARN] Board.java:21:21: '<' is not followed by whitespace. [WhitespaceAround]\
[WARN] Board.java:21:31: ';' is not followed by whitespace. [WhitespaceAfter]\
[WARN] Board.java:21:35: '\{' is not preceded with whitespace. [WhitespaceAround]\
[WARN] Board.java:23:11: 'if' is not followed by whitespace. [WhitespaceAfter]\
[WARN] Board.java:23:37: '>' is not preceded with whitespace. [WhitespaceAround]\
[WARN] Board.java:23:38: '>' is not followed by whitespace. [WhitespaceAround]\
[WARN] Board.java:23:40: '\{' is not preceded with whitespace. [WhitespaceAround]\
[WARN] Board.java:33:17: '=' is not preceded with whitespace. [WhitespaceAround]\
[WARN] Board.java:33:18: '=' is not followed by whitespace. [WhitespaceAround]\
[WARN] Board.java:34:8: 'for' is not followed by whitespace. [WhitespaceAfter]\
[WARN] Board.java:34:16: '=' is not preceded with whitespace. [WhitespaceAround]\
[WARN] Board.java:34:17: '=' is not followed by whitespace. [WhitespaceAround]\
[WARN] Board.java:34:19: ';' is not followed by whitespace. [WhitespaceAfter]\
[WARN] Board.java:34:22: '<' is not preceded with whitespace. [WhitespaceAround]\
[WARN] Board.java:34:23: '<' is not followed by whitespace. [WhitespaceAround]\
[WARN] Board.java:34:33: ';' is not followed by whitespace. [WhitespaceAfter]\
[WARN] Board.java:34:39: '\{' is not preceded with whitespace. [WhitespaceAround]\
[WARN] Board.java:35:10: 'for' is not followed by whitespace. [WhitespaceAfter]\
[WARN] Board.java:35:21: '=' is not preceded with whitespace. [WhitespaceAround]\
[WARN] Board.java:35:22: '=' is not followed by whitespace. [WhitespaceAround]\
[WARN] Board.java:35:24: ';' is not followed by whitespace. [WhitespaceAfter]\
...\
Checkstyle ends with 0 errors and 203 warnings.\
\
% custom checkstyle checks for Board.java\
*-----------------------------------------------------------\
\
% custom checkstyle checks for Solver.java\
*-----------------------------------------------------------\
\
\
================================================================\
\
\
********************************************************************************\
*  TESTING CORRECTNESS\
********************************************************************************\
\
Testing correctness of Board\
*-----------------------------------------------------------\
Running 26 total tests.\
\
Tests 4-7 and 14-17 rely upon toString() returning results in prescribed format.\
\
Test 1a: check hamming() with file inputs\
  * puzzle04.txt\
  * puzzle00.txt\
  * puzzle07.txt\
  * puzzle17.txt\
  * puzzle27.txt\
  * puzzle2x2-unsolvable1.txt\
==> passed\
\
Test 1b: check hamming() with random n-by-n boards\
  * 2-by-2\
  * 3-by-3\
  * 4-by-4\
  * 5-by-5\
  * 9-by-9\
  * 10-by-10\
  * 127-by-127\
==> passed\
\
Test 2a: check manhattan() with file inputs\
  * puzzle04.txt\
  * puzzle00.txt\
  * puzzle07.txt\
  * puzzle17.txt\
  * puzzle27.txt\
  * puzzle2x2-unsolvable1.txt\
==> passed\
\
Test 2b: check manhattan() with random n-by-n boards\
  * 2-by-2\
  * 3-by-3\
  * 4-by-4\
  * 5-by-5\
  * 9-by-9\
  * 10-by-10\
  * 127-by-127\
==> passed\
\
Test 3: check dimension() with random n-by-n boards\
  * 2-by-2\
  * 3-by-3\
  * 4-by-4\
  * 5-by-5\
  * 6-by-6\
==> passed\
\
Test 4a: check toString() with file inputs\
  * puzzle04.txt\
  * puzzle00.txt\
  * puzzle06.txt\
  * puzzle09.txt\
  * puzzle23.txt\
  * puzzle2x2-unsolvable1.txt\
==> passed\
\
Test 4b: check toString() with random n-by-n boards\
  * 2-by-2\
  * 3-by-3\
  * 4-by-4\
  * 5-by-5\
  * 9-by-9\
  * 10-by-10\
  * 127-by-127\
==> passed\
\
Test 5a: check neighbors() with file inputs\
  * puzzle04.txt\
  * puzzle00.txt\
  * puzzle06.txt\
  * puzzle09.txt\
  * puzzle23.txt\
  * puzzle2x2-unsolvable1.txt\
==> passed\
\
Test 5b: check neighbors() with random n-by-n boards\
  * 2-by-2\
  * 3-by-3\
  * 4-by-4\
  * 5-by-5\
  * 9-by-9\
  * 10-by-10\
  * 127-by-127\
==> passed\
\
Test 6a: check neighbors() of neighbors() with file inputs\
  * puzzle04.txt\
  * puzzle00.txt\
  * puzzle06.txt\
  * puzzle09.txt\
  * puzzle23.txt\
  * puzzle2x2-unsolvable1.txt\
==> passed\
\
Test 6b: check neighbors() of neighbors() with random n-by-n boards\
  * 2-by-2\
  * 3-by-3\
  * 4-by-4\
  * 5-by-5\
  * 9-by-9\
  * 10-by-10\
==> passed\
\
Test 7a: check twin() with file inputs\
  * puzzle04.txt\
    - twin() doesn't return a twin\
        3\
         0 2 3\
         7 8 5\
         4 1 6\
\
\
  * puzzle00.txt\
    - twin() doesn't return a twin\
        10\
         11 12 13 14 15 16 17 18 19 10\
         21 22 23 24 25 26 27 28 29 20\
         31 32 33 34 35 36 37 38 39 30\
         41 42 43 44 45 46 47 48 49 40\
         51 52 53 54 55 56 57 58 59 50\
         61 62 63 64 65 66 67 68 69 60\
         71 72 73 74 75 76 77 78 79 70\
         81 82 83 84 85 86 87 88 89 80\
         91 92 93 94 95 96 97 98 99 90\
         1 2 3 4 5 6 7 8 9 0\
\
\
  * puzzle06.txt\
    - twin() doesn't return a twin\
        4\
         0 6 7 3\
         9 10 11 4\
         13 14 15 8\
         5 1 2 12\
\
\
  * puzzle09.txt\
    - twin() doesn't return a twin\
        4\
         1 0 6 4\
         5 9 7 8\
         13 14 11 12\
         2 10 3 15\
\
\
  * puzzle23.txt\
    - twin() doesn't return a twin\
        3\
         2 0 4\
         7 1 8\
         5 3 6\
\
\
  * puzzle2x2-unsolvable1.txt\
==> FAILED\
\
Test 7b: check twin() with random n-by-n boards\
  * 2-by-2\
    - twin() doesn't return a twin\
        2\
         0 3\
         1 2\
\
\
    - failed on trial 1 of 1000\
\
  * 3-by-3\
    - twin() doesn't return a twin\
        3\
         2 8 5\
         7 3 4\
         0 1 6\
\
\
    - failed on trial 1 of 1000\
\
  * 4-by-4\
    - twin() doesn't return a twin\
        4\
         4 6 15 2\
         13 12 9 7\
         0 10 5 11\
         3 8 1 14\
\
\
    - failed on trial 1 of 1000\
\
  * 5-by-5\
    - twin() doesn't return a twin\
        5\
         6 7 3 23 0\
         12 13 17 15 4\
         10 21 16 8 24\
         20 18 19 11 1\
         22 5 2 9 14\
\
\
    - failed on trial 1 of 1000\
\
  * 9-by-9\
    - twin() doesn't return a twin\
        9\
         60 34 43 22 62 79 5 1 51\
         33 70 66 13 21 38 0 7 64\
         4 41 61 71 26 36 54 47 19\
         52 48 69 24 16 12 35 44 25\
         23 58 6 10 50 30 42 15 53\
         28 76 49 3 59 73 55 29 27\
         78 65 57 68 17 11 75 2 46\
         56 31 9 80 45 72 74 18 14\
         39 20 37 63 32 40 77 8 67\
\
\
    - failed on trial 1 of 100\
\
  * 10-by-10\
    - twin() doesn't return a twin\
        10\
         2 26 92 13 65 8 72 61 37 31\
         69 42 18 25 53 30 55 73 91 46\
         68 71 56 83 49 19 35 51 87 94\
         81 21 22 12 27 45 79 82 34 48\
         39 29 80 3 90 67 60 77 50 62\
         59 4 32 78 36 93 44 84 11 96\
         98 24 97 52 38 28 16 75 1 10\
         33 74 85 54 41 66 5 70 23 58\
         88 99 47 63 95 89 15 43 6 40\
         64 7 86 20 17 57 9 76 14 0\
\
\
    - failed on trial 1 of 10\
\
==> FAILED\
\
Test 8a: check isGoal() with file inputs\
  * puzzle00.txt\
  * puzzle04.txt\
  * puzzle16.txt\
  * puzzle06.txt\
  * puzzle09.txt\
  * puzzle23.txt\
  * puzzle2x2-unsolvable1.txt\
  * puzzle3x3-unsolvable1.txt\
  * puzzle3x3-00.txt\
  * puzzle4x4-00.txt\
==> passed\
\
Test 8b: check isGoal() on n-by-n goal boards\
  * 2-by-2\
  * 3-by-3\
  * 4-by-4\
  * 5-by-5\
  * 6-by-6\
  * 100-by-100\
==> passed\
\
Test 9: check that two Board objects can be created at the same time\
  * random 3-by-3 and 3-by-3 boards\
  * random 4-by-4 and 4-by-4 boards\
  * random 2-by-2 and 2-by-2 boards\
  * random 3-by-3 and 4-by-4 boards\
  * random 4-by-4 and 3-by-3 boards\
==> passed\
\
Test 10a: check equals()\
  * reflexive\
  * symmetric\
  * transitive\
  * argument is null\
  * argument is of type String\
  * argument is of type UncastableString\
  * Board object stored in a variable of type Object\
==> passed\
\
Test 10b: check correctness of equals() on random n-by-n boards\
  * n = 2\
  * n = 3\
  * n = 4\
  * 5 <= n < 10\
==> passed\
\
Test 10c: check equals() when board sizes m and n are different\
  * m = 4, n = 5\
  * m = 2, n = 5\
  * m = 5, n = 3\
  * m = 2, n = 3\
  * m = 3, n = 2\
==> passed\
\
Test 11: check that Board is immutable by changing argument array after\
         construction and making sure Board does not mutate\
==> passed\
\
Test 12: check that Board is immutable by testing whether methods\
         return the same value, regardless of order in which called\
  * puzzle10.txt\
  * puzzle20.txt\
  * puzzle30.txt\
  * 2-by-2\
  * 3-by-3\
  * 4-by-4\
==> passed\
\
Test 13: check dimension() on a board that is kth neighbor of a board\
  * 0th neighbor of puzzle27.txt\
  * 1st neighbor of puzzle27.txt\
  * 2nd neighbor of puzzle27.txt\
  * 13th neighbor of puzzle27.txt\
  * 13th neighbor of puzzle00.txt\
  * 13th neighbor of puzzle2x2-unsolvable1.txt\
==> passed\
\
Test 14: check hamming() on a board that is kth neighbor of a board\
  * 0th neighbor of puzzle27.txt\
  * 1st neighbor of puzzle27.txt\
  * 2nd neighbor of puzzle27.txt\
  * 13th neighbor of puzzle27.txt\
  * 13th neighbor of puzzle00.txt\
  * 13th neighbor of puzzle2x2-unsolvable1.txt\
==> passed\
\
Test 15: check manhattan() on a board that is a kth neighbor of a board\
  * 0th neighbor of puzzle27.txt\
  * 1st neighbor of puzzle27.txt\
  * 2nd neighbor of puzzle27.txt\
  * 13th neighbor of puzzle27.txt\
  * 13th neighbor of puzzle00.txt\
  * 13th neighbor of puzzle2x2-unsolvable1.txt\
==> passed\
\
Test 16: check hamming() on a board that is a kth twin of a board\
  * 0th twin of puzzle27.txt\
  * 1st twin of puzzle27.txt\
  * 2nd twin of puzzle27.txt\
  * 13th twin of puzzle27.txt\
  * 13th twin of puzzle00.txt\
  * 13th twin of puzzle2x2-unsolvable1.txt\
==> passed\
\
Test 17: check manhattan() on a board that is a kth twin of a board\
  * 0th twin of puzzle27.txt\
  * 1st twin of puzzle27.txt\
  * 2nd twin of puzzle27.txt\
  * 13th twin of puzzle27.txt\
  * 13th twin of puzzle00.txt\
  * 13th twin of puzzle2x2-unsolvable1.txt\
==> passed\
\
\
Total: 24/26 tests passed!\
\
\
================================================================\
********************************************************************************\
*  MEMORY\
********************************************************************************\
\
Analyzing memory of Board\
*-----------------------------------------------------------\
Running 10 total tests.\
\
Memory usage of an n-by-n board\
[ must be at most 4n^2 + 32n + 64 bytes ]\
\
\
              n       student (bytes)    reference (bytes)\
----------------------------------------------------------\
=> passed     2           136                  128\
=> passed     3           200                  192\
=> passed     4           248                  240\
=> passed     8           568                  560\
=> passed    12          1016                 1008\
=> passed    16          1592                 1584\
=> passed    20          2296                 2288\
=> passed    37          6864                 6856\
=> passed    72         23096                23088\
=> passed   120         61496                61488\
==> 10/10 tests passed\
\
Total: 10/10 tests passed!\
\
Student   memory = 4.00 n^2 + 32.00 n + 56.00   (R^2 = 1.000)\
Reference memory = 4.00 n^2 + 32.00 n + 48.00   (R^2 = 1.000)\
\
================================================================\
\
\
\
********************************************************************************\
*  TESTING CORRECTNESS (substituting reference Board)\
********************************************************************************\
\
Testing correctness of Solver\
*-----------------------------------------------------------\
Running 25 total tests.\
\
Test 1a: check moves() with file inputs\
  * puzzle00.txt\
  * puzzle01.txt\
  * puzzle02.txt\
  * puzzle03.txt\
  * puzzle04.txt\
  * puzzle05.txt\
  * puzzle06.txt\
  * puzzle07.txt\
  * puzzle08.txt\
  * puzzle09.txt\
  * puzzle10.txt\
  * puzzle11.txt\
  * puzzle12.txt\
  * puzzle13.txt\
==> passed\
\
Test 1b: check solution() with file inputs\
  * puzzle00.txt\
  * puzzle01.txt\
  * puzzle02.txt\
  * puzzle03.txt\
  * puzzle04.txt\
  * puzzle05.txt\
  * puzzle06.txt\
  * puzzle07.txt\
  * puzzle08.txt\
  * puzzle09.txt\
  * puzzle10.txt\
  * puzzle11.txt\
  * puzzle12.txt\
  * puzzle13.txt\
==> passed\
\
Test 2a: check moves() with more file inputs\
  * puzzle14.txt\
  * puzzle15.txt\
  * puzzle16.txt\
  * puzzle17.txt\
  * puzzle18.txt\
  * puzzle19.txt\
  * puzzle20.txt\
  * puzzle21.txt\
  * puzzle22.txt\
  * puzzle23.txt\
  * puzzle24.txt\
  * puzzle25.txt\
  * puzzle26.txt\
  * puzzle27.txt\
  * puzzle28.txt\
  * puzzle29.txt\
  * puzzle30.txt\
  * puzzle31.txt\
==> passed\
\
Test 2b: check solution() with more file inputs\
  * puzzle14.txt\
  * puzzle15.txt\
  * puzzle16.txt\
  * puzzle17.txt\
  * puzzle18.txt\
  * puzzle19.txt\
  * puzzle20.txt\
  * puzzle21.txt\
  * puzzle22.txt\
  * puzzle23.txt\
  * puzzle24.txt\
  * puzzle25.txt\
  * puzzle26.txt\
  * puzzle27.txt\
  * puzzle28.txt\
  * puzzle29.txt\
  * puzzle30.txt\
  * puzzle31.txt\
==> passed\
\
Test 3a: check moves() with random solvable n-by-n boards\
  * 1000 random 3-by-3 boards that are exactly 1 move from goal\
  * 1000 random 3-by-3 boards that are exactly 2 moves from goal\
  * 1000 random 3-by-3 boards that are exactly 3 moves from goal\
  * 1000 random 3-by-3 boards that are exactly 4 moves from goal\
  * 1000 random 3-by-3 boards that are exactly 5 moves from goal\
  * 1000 random 3-by-3 boards that are exactly 6 moves from goal\
  * 1000 random 3-by-3 boards that are exactly 7 moves from goal\
  * 1000 random 3-by-3 boards that are exactly 8 moves from goal\
  * 1000 random 3-by-3 boards that are exactly 9 moves from goal\
  * 1000 random 3-by-3 boards that are exactly 10 moves from goal\
  * 1000 random 3-by-3 boards that are exactly 11 moves from goal\
  * 1000 random 3-by-3 boards that are exactly 12 moves from goal\
==> passed\
\
Test 3b: check solution() with random solvable n-by-n boards\
  * 1000 random 3-by-3 boards that are exactly 1 move from goal\
  * 1000 random 3-by-3 boards that are exactly 2 moves from goal\
  * 1000 random 3-by-3 boards that are exactly 3 moves from goal\
  * 1000 random 3-by-3 boards that are exactly 4 moves from goal\
  * 1000 random 3-by-3 boards that are exactly 5 moves from goal\
  * 1000 random 3-by-3 boards that are exactly 6 moves from goal\
  * 1000 random 3-by-3 boards that are exactly 7 moves from goal\
  * 1000 random 3-by-3 boards that are exactly 8 moves from goal\
  * 1000 random 3-by-3 boards that are exactly 9 moves from goal\
  * 1000 random 3-by-3 boards that are exactly 10 moves from goal\
  * 1000 random 3-by-3 boards that are exactly 11 moves from goal\
  * 1000 random 3-by-3 boards that are exactly 12 moves from goal\
==> passed\
\
Test 4: create two Solver objects at the same time\
  * puzzle04.txt and puzzle04.txt\
  * puzzle00.txt and puzzle04.txt\
  * puzzle04.txt and puzzle00.txt\
==> passed\
\
Test 5a: call isSolvable() with file inputs\
  * puzzle01.txt\
    java.lang.UnsupportedOperationException\
\
    Solver.isSolvable(Solver.java:27)\
    TestSolver.checkIsSolvable(TestSolver.java:425)\
    TestSolver.checkIsSolvable(TestSolver.java:400)\
    TestSolver.test5a(TestSolver.java:777)\
    TestSolver.main(TestSolver.java:1019)\
\
  * puzzle03.txt\
    java.lang.UnsupportedOperationException\
\
    Solver.isSolvable(Solver.java:27)\
    TestSolver.checkIsSolvable(TestSolver.java:425)\
    TestSolver.checkIsSolvable(TestSolver.java:400)\
    TestSolver.test5a(TestSolver.java:778)\
    TestSolver.main(TestSolver.java:1019)\
\
  * puzzle04.txt\
    java.lang.UnsupportedOperationException\
\
    Solver.isSolvable(Solver.java:27)\
    TestSolver.checkIsSolvable(TestSolver.java:425)\
    TestSolver.checkIsSolvable(TestSolver.java:400)\
    TestSolver.test5a(TestSolver.java:779)\
    TestSolver.main(TestSolver.java:1019)\
\
  * puzzle17.txt\
    java.lang.UnsupportedOperationException\
\
    Solver.isSolvable(Solver.java:27)\
    TestSolver.checkIsSolvable(TestSolver.java:425)\
    TestSolver.checkIsSolvable(TestSolver.java:400)\
    TestSolver.test5a(TestSolver.java:780)\
    TestSolver.main(TestSolver.java:1019)\
\
  * puzzle3x3-unsolvable1.txt\
    \
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::\
        OperationCountLimitExceededException\
        Number of calls to methods in MinPQ exceeds limit: 10000000\
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::\
\
==> FAILED\
\
Test 5b: call isSolvable() on random n-by-n boards\
  * 100 random 2-by-2 boards\
    java.lang.UnsupportedOperationException\
\
    Solver.isSolvable(Solver.java:27)\
    TestSolver.checkIsSolvable(TestSolver.java:425)\
    TestSolver.checkIsSolvable(TestSolver.java:410)\
    TestSolver.test5b(TestSolver.java:791)\
    TestSolver.main(TestSolver.java:1022)\
\
    - failed on trial 1 of 100\
\
==> FAILED\
\
Test 6: check moves() on unsolvable puzzles\
  * puzzle2x2-unsolvable1.txt\
\
\
Total: 0/25 tests passed: Could not complete tests, which results in a reported score of 0.\
================================================================\
********************************************************************************\
*  MEMORY (substituting reference Board)\
********************************************************************************\
\
Analyzing memory of Solver\
*-----------------------------------------------------------\
Running 12 total tests.\
\
Maximum allowed time per puzzle is 5.0 seconds.\
Maximum allowed memory per puzzle = 200000000 bytes.\
\
Test 1: Measure memory of Solver.\
\
               filename   moves   memory\
---------------------------------------------\
=> passed  puzzle10.txt      10     4776         \
=> passed  puzzle15.txt      15     5784         \
=> passed  puzzle20.txt      20     3048         \
=> passed  puzzle25.txt      25     3768         \
=> passed  puzzle30.txt      30     4488         \
=> passed  puzzle35.txt      35     6072         \
==> 6/6 tests passed\
\
\
\
Test 2: Measure memory of MinPQ.\
\
                              deep              max           ending\
               filename     memory             size             size\
--------------------------------------------------------------------\
=> passed  puzzle10.txt      12008               17               16         \
=> passed  puzzle15.txt      15104               26               25         \
=> passed  puzzle20.txt     107288              290              289         \
=> passed  puzzle25.txt     773304             2091             2090         \
=> passed  puzzle30.txt    3245016             8596             8595         \
=> passed  puzzle35.txt   46397400           135154           135153         \
==> 6/6 tests passed\
\
\
Total: 12/12 tests passed!\
\
================================================================\
\
\
\
********************************************************************************\
*  TIMING (substituting reference Board)\
********************************************************************************\
\
Timing Solver\
*-----------------------------------------------------------\
Running 125 total tests.\
\
Maximum allowed time per puzzle is 5.0 seconds.\
\
Test 1: Measure CPU time and check correctness\
\
               filename   moves    n  seconds\
---------------------------------------------\
=> passed  puzzle20.txt      20    3     0.02 \
=> passed  puzzle22.txt      22    3     0.01 \
=> passed  puzzle21.txt      21    3     0.01 \
=> passed  puzzle23.txt      23    3     0.01 \
=> passed  puzzle24.txt      24    3     0.01 \
=> passed  puzzle25.txt      25    3     0.01 \
=> passed  puzzle27.txt      27    3     0.01 \
=> passed  puzzle29.txt      29    3     0.01 \
=> passed  puzzle26.txt      26    3     0.01 \
=> passed  puzzle28.txt      28    3     0.02 \
=> passed  puzzle30.txt      30    3     0.03 \
=> passed  puzzle31.txt      31    3     0.02 \
=> passed  puzzle39.txt      39    4     0.04 \
=> passed  puzzle41.txt      41    5     0.07 \
=> passed  puzzle34.txt      34    4     0.07 \
=> passed  puzzle37.txt      37    4     0.08 \
=> passed  puzzle44.txt      44    5     0.20 \
=> passed  puzzle32.txt      32    4     0.23 \
=> passed  puzzle35.txt      35    4     0.14 \
=> passed  puzzle33.txt      33    4     0.16 \
=> passed  puzzle43.txt      43    4     0.27 \
=> passed  puzzle46.txt      46    4     0.35 \
=> passed  puzzle40.txt      40    4     0.52 \
=> passed  puzzle36.txt      36    4     0.57 \
=> passed  puzzle45.txt      45    4     0.63 \
==> 25/25 tests passed\
\
\
\
Test 2: Count MinPQ operations\
\
               filename   insert()         delMin()\
---------------------------------------------------\
=> passed  puzzle20.txt        716              427         \
=> passed  puzzle22.txt       1738             1036         \
=> passed  puzzle21.txt       1767             1041         \
=> passed  puzzle23.txt       2654             1575         \
=> passed  puzzle24.txt       2713             1630         \
=> passed  puzzle25.txt       5142             3052         \
=> passed  puzzle27.txt       5603             3371         \
=> passed  puzzle29.txt       5757             3539         \
=> passed  puzzle26.txt       5917             3550         \
=> passed  puzzle28.txt      13496             8116         \
=> passed  puzzle30.txt      21624            13029         \
=> passed  puzzle31.txt      22840            13903         \
=> passed  puzzle39.txt      35634            17523         \
=> passed  puzzle41.txt      58354            25005         \
=> passed  puzzle34.txt      75654            36580         \
=> passed  puzzle37.txt      83518            40043         \
=> passed  puzzle44.txt     139602            61583         \
=> passed  puzzle32.txt     259712           124748         \
=> passed  puzzle35.txt     263802           128649         \
=> passed  puzzle33.txt     312942           149442         \
=> passed  puzzle43.txt     529360           254417         \
=> passed  puzzle46.txt     525924           258371         \
=> passed  puzzle40.txt     553787           270734         \
=> passed  puzzle36.txt    1038848           505743         \
=> passed  puzzle45.txt    1218876           594877         \
==> 25/25 tests passed\
\
\
\
Test 3: Count Board operations (that should not get called)\
\
               filename    hamming()   toString()\
-------------------------------------------------\
=> passed  puzzle20.txt            0            0         \
=> passed  puzzle22.txt            0            0         \
=> passed  puzzle21.txt            0            0         \
=> passed  puzzle23.txt            0            0         \
=> passed  puzzle24.txt            0            0         \
=> passed  puzzle25.txt            0            0         \
=> passed  puzzle27.txt            0            0         \
=> passed  puzzle29.txt            0            0         \
=> passed  puzzle26.txt            0            0         \
=> passed  puzzle28.txt            0            0         \
=> passed  puzzle30.txt            0            0         \
=> passed  puzzle31.txt            0            0         \
=> passed  puzzle39.txt            0            0         \
=> passed  puzzle41.txt            0            0         \
=> passed  puzzle34.txt            0            0         \
=> passed  puzzle37.txt            0            0         \
=> passed  puzzle44.txt            0            0         \
=> passed  puzzle32.txt            0            0         \
=> passed  puzzle35.txt            0            0         \
=> passed  puzzle33.txt            0            0         \
=> passed  puzzle43.txt            0            0         \
=> passed  puzzle46.txt            0            0         \
=> passed  puzzle40.txt            0            0         \
=> passed  puzzle36.txt            0            0         \
=> passed  puzzle45.txt            0            0         \
==> 25/25 tests passed\
\
\
\
Test 4a: Count Board operations (that should get called)\
\
               filename    Board()            equals()         manhattan()\
--------------------------------------------------------------------------\
=> passed  puzzle20.txt       1141                1136                1143         \
=> passed  puzzle22.txt       2772                2769                2774         \
=> passed  puzzle21.txt       2806                2802                2808         \
=> passed  puzzle23.txt       4227                4223                4229         \
=> passed  puzzle24.txt       4341                4336                4343         \
=> passed  puzzle25.txt       8192                8188                8194         \
=> passed  puzzle27.txt       8972                8968                8974         \
=> passed  puzzle29.txt       9294                9290                9296         \
=> passed  puzzle26.txt       9465                9462                9467         \
=> passed  puzzle28.txt      21610               21605               21612         \
=> passed  puzzle30.txt      34651               34648               34653         \
=> passed  puzzle31.txt      36741               36737               36743         \
=> passed  puzzle39.txt      53155               53151               53157         \
=> passed  puzzle41.txt      83357               83352               83359         \
=> passed  puzzle34.txt     112232              112229              112234         \
=> passed  puzzle37.txt     123559              123555              123561         \
=> passed  puzzle44.txt     201183              201178              201185         \
=> passed  puzzle32.txt     384458              384453              384460         \
=> passed  puzzle35.txt     392449              392444              392451         \
=> passed  puzzle33.txt     462382              462378              462384         \
=> passed  puzzle43.txt     783775              783771              783777         \
=> passed  puzzle46.txt     784293              784289              784295         \
=> passed  puzzle40.txt     824519              824516              824521         \
=> passed  puzzle36.txt    1544589             1544584             1544591         \
=> passed  puzzle45.txt    1813751             1813747             1813753         \
==> 25/25 tests passed\
\
\
\
Test 4b: count Board operations (that should get called),\
         rejecting if doesn't adhere to stricter caching limits\
\
               filename    Board()            equals()         manhattan()\
--------------------------------------------------------------------------\
=> passed  puzzle20.txt       1141                1136                1143         \
=> passed  puzzle22.txt       2772                2769                2774         \
=> passed  puzzle21.txt       2806                2802                2808         \
=> passed  puzzle23.txt       4227                4223                4229         \
=> passed  puzzle24.txt       4341                4336                4343         \
=> passed  puzzle25.txt       8192                8188                8194         \
=> passed  puzzle27.txt       8972                8968                8974         \
=> passed  puzzle29.txt       9294                9290                9296         \
=> passed  puzzle26.txt       9465                9462                9467         \
=> passed  puzzle28.txt      21610               21605               21612         \
=> passed  puzzle30.txt      34651               34648               34653         \
=> passed  puzzle31.txt      36741               36737               36743         \
=> passed  puzzle39.txt      53155               53151               53157         \
=> passed  puzzle41.txt      83357               83352               83359         \
=> passed  puzzle34.txt     112232              112229              112234         \
=> passed  puzzle37.txt     123559              123555              123561         \
=> passed  puzzle44.txt     201183              201178              201185         \
=> passed  puzzle32.txt     384458              384453              384460         \
=> passed  puzzle35.txt     392449              392444              392451         \
=> passed  puzzle33.txt     462382              462378              462384         \
=> passed  puzzle43.txt     783775              783771              783777         \
=> passed  puzzle46.txt     784293              784289              784295         \
=> passed  puzzle40.txt     824519              824516              824521         \
=> passed  puzzle36.txt    1544589             1544584             1544591         \
=> passed  puzzle45.txt    1813751             1813747             1813753         \
==> 25/25 tests passed\
\
\
Total: 125/125 tests passed!\
\
\
================================================================\
\
\
\
}